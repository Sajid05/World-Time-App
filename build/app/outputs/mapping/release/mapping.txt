android.support.v4.app.RemoteActionCompatParcelizer -> android.support.v4.app.RemoteActionCompatParcelizer:
    void <init>() -> <init>
    androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel) -> write
android.support.v4.graphics.drawable.IconCompatParcelizer -> android.support.v4.graphics.drawable.IconCompatParcelizer:
    void <init>() -> <init>
    androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel) -> write
androidx.activity.Cancellable -> androidx.activity.a:
    void cancel() -> a
androidx.activity.ComponentActivity -> androidx.activity.b:
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> mLifecycleRegistry
    androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController -> mSavedStateRegistryController
    androidx.lifecycle.ViewModelStore mViewModelStore -> mViewModelStore
    androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher -> mOnBackPressedDispatcher
    int mContentLayoutId -> mContentLayoutId
    void <init>() -> <init>
    void <init>(int) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    java.lang.Object onRetainCustomNonConfigurationInstance() -> onRetainCustomNonConfigurationInstance
    java.lang.Object getLastCustomNonConfigurationInstance() -> getLastCustomNonConfigurationInstance
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    androidx.lifecycle.ViewModelStore getViewModelStore() -> getViewModelStore
    void onBackPressed() -> onBackPressed
    androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher() -> getOnBackPressedDispatcher
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry() -> getSavedStateRegistry
    void access$001(androidx.activity.ComponentActivity) -> access$001
androidx.activity.ComponentActivity$1 -> androidx.activity.b$1:
    androidx.activity.ComponentActivity this$0 -> a
    void <init>(androidx.activity.ComponentActivity) -> <init>
    void run() -> run
androidx.activity.ComponentActivity$2 -> androidx.activity.ComponentActivity$2:
    androidx.activity.ComponentActivity this$0 -> a
    void <init>(androidx.activity.ComponentActivity) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.activity.ComponentActivity$3 -> androidx.activity.ComponentActivity$3:
    androidx.activity.ComponentActivity this$0 -> a
    void <init>(androidx.activity.ComponentActivity) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.activity.ComponentActivity$NonConfigurationInstances -> androidx.activity.b$a:
    java.lang.Object custom -> a
    androidx.lifecycle.ViewModelStore viewModelStore -> b
    void <init>() -> <init>
androidx.activity.ImmLeaksCleaner -> androidx.activity.ImmLeaksCleaner:
    int sReflectedFieldsInitialized -> a
    java.lang.reflect.Field sHField -> b
    java.lang.reflect.Field sServedViewField -> c
    java.lang.reflect.Field sNextServedViewField -> d
    android.app.Activity mActivity -> e
    void <init>(android.app.Activity) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
    void initializeReflectiveFields() -> a
    void <clinit>() -> <clinit>
androidx.activity.OnBackPressedCallback -> androidx.activity.c:
    boolean mEnabled -> mEnabled
    java.util.concurrent.CopyOnWriteArrayList mCancellables -> mCancellables
    void <init>(boolean) -> <init>
    void setEnabled(boolean) -> setEnabled
    boolean isEnabled() -> isEnabled
    void remove() -> remove
    void handleOnBackPressed() -> handleOnBackPressed
    void addCancellable(androidx.activity.Cancellable) -> addCancellable
    void removeCancellable(androidx.activity.Cancellable) -> removeCancellable
androidx.activity.OnBackPressedDispatcher -> androidx.activity.OnBackPressedDispatcher:
    java.lang.Runnable mFallbackOnBackPressed -> b
    java.util.ArrayDeque mOnBackPressedCallbacks -> a
    void <init>() -> <init>
    void <init>(java.lang.Runnable) -> <init>
    androidx.activity.Cancellable addCancellableCallback(androidx.activity.OnBackPressedCallback) -> a
    void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback) -> a
    void onBackPressed() -> a
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable -> androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable:
    androidx.lifecycle.Lifecycle mLifecycle -> b
    androidx.activity.OnBackPressedCallback mOnBackPressedCallback -> c
    androidx.activity.Cancellable mCurrentCancellable -> d
    androidx.activity.OnBackPressedDispatcher this$0 -> a
    void <init>(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
    void cancel() -> a
androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable -> androidx.activity.OnBackPressedDispatcher$a:
    androidx.activity.OnBackPressedCallback mOnBackPressedCallback -> b
    androidx.activity.OnBackPressedDispatcher this$0 -> a
    void <init>(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback) -> <init>
    void cancel() -> a
androidx.activity.OnBackPressedDispatcherOwner -> androidx.activity.d:
    androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher() -> getOnBackPressedDispatcher
androidx.annotation.Keep -> androidx.annotation.Keep:
androidx.arch.core.executor.ArchTaskExecutor -> androidx.a.a.a.a:
    androidx.arch.core.executor.ArchTaskExecutor sInstance -> a
    androidx.arch.core.executor.TaskExecutor mDelegate -> b
    androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor -> c
    java.util.concurrent.Executor sMainThreadExecutor -> d
    java.util.concurrent.Executor sIOThreadExecutor -> e
    void <init>() -> <init>
    androidx.arch.core.executor.ArchTaskExecutor getInstance() -> a
    void executeOnDiskIO(java.lang.Runnable) -> a
    void postToMainThread(java.lang.Runnable) -> b
    boolean isMainThread() -> b
    void <clinit>() -> <clinit>
androidx.arch.core.executor.ArchTaskExecutor$1 -> androidx.a.a.a.a$1:
    void <init>() -> <init>
    void execute(java.lang.Runnable) -> execute
androidx.arch.core.executor.ArchTaskExecutor$2 -> androidx.a.a.a.a$2:
    void <init>() -> <init>
    void execute(java.lang.Runnable) -> execute
androidx.arch.core.executor.DefaultTaskExecutor -> androidx.a.a.a.b:
    java.lang.Object mLock -> a
    java.util.concurrent.ExecutorService mDiskIO -> b
    android.os.Handler mMainHandler -> c
    void <init>() -> <init>
    void executeOnDiskIO(java.lang.Runnable) -> a
    void postToMainThread(java.lang.Runnable) -> b
    boolean isMainThread() -> b
androidx.arch.core.executor.DefaultTaskExecutor$1 -> androidx.a.a.a.b$1:
    java.util.concurrent.atomic.AtomicInteger mThreadId -> b
    androidx.arch.core.executor.DefaultTaskExecutor this$0 -> a
    void <init>(androidx.arch.core.executor.DefaultTaskExecutor) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
androidx.arch.core.executor.TaskExecutor -> androidx.a.a.a.c:
    void <init>() -> <init>
    void executeOnDiskIO(java.lang.Runnable) -> a
    void postToMainThread(java.lang.Runnable) -> b
    boolean isMainThread() -> b
androidx.arch.core.internal.FastSafeIterableMap -> androidx.a.a.b.a:
    java.util.HashMap mHashMap -> b
    void <init>() -> <init>
    androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object) -> a
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> c
    java.util.Map$Entry ceil(java.lang.Object) -> d
androidx.arch.core.internal.SafeIterableMap -> androidx.a.a.b.b:
    androidx.arch.core.internal.SafeIterableMap$Entry mStart -> a
    androidx.arch.core.internal.SafeIterableMap$Entry mEnd -> b
    java.util.WeakHashMap mIterators -> c
    int mSize -> d
    void <init>() -> <init>
    androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object) -> a
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object) -> b
    java.lang.Object remove(java.lang.Object) -> b
    int size() -> a
    java.util.Iterator iterator() -> iterator
    java.util.Iterator descendingIterator() -> b
    androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions() -> c
    java.util.Map$Entry eldest() -> d
    java.util.Map$Entry newest() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
androidx.arch.core.internal.SafeIterableMap$AscendingIterator -> androidx.a.a.b.b$a:
    void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry) -> <init>
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
androidx.arch.core.internal.SafeIterableMap$DescendingIterator -> androidx.a.a.b.b$b:
    void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry) -> <init>
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
androidx.arch.core.internal.SafeIterableMap$Entry -> androidx.a.a.b.b$c:
    java.lang.Object mKey -> a
    java.lang.Object mValue -> b
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> c
    androidx.arch.core.internal.SafeIterableMap$Entry mPrevious -> d
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions -> androidx.a.a.b.b$d:
    androidx.arch.core.internal.SafeIterableMap$Entry mCurrent -> b
    boolean mBeforeStart -> c
    androidx.arch.core.internal.SafeIterableMap this$0 -> a
    void <init>(androidx.arch.core.internal.SafeIterableMap) -> <init>
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a_
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    java.lang.Object next() -> next
androidx.arch.core.internal.SafeIterableMap$ListIterator -> androidx.a.a.b.b$e:
    androidx.arch.core.internal.SafeIterableMap$Entry mExpectedEnd -> a
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> b
    void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry) -> <init>
    boolean hasNext() -> hasNext
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a_
    androidx.arch.core.internal.SafeIterableMap$Entry nextNode() -> b
    java.util.Map$Entry next() -> a
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    java.lang.Object next() -> next
androidx.arch.core.internal.SafeIterableMap$SupportRemove -> androidx.a.a.b.b$f:
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a_
androidx.collection.ArrayMap -> androidx.b.a:
    androidx.collection.MapCollections mCollections -> a
    void <init>() -> <init>
    androidx.collection.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    boolean retainAll(java.util.Collection) -> a
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
androidx.collection.ArrayMap$1 -> androidx.b.a$1:
    androidx.collection.ArrayMap this$0 -> a
    void <init>(androidx.collection.ArrayMap) -> <init>
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
androidx.collection.ArraySet -> androidx.b.b:
    int[] INT -> c
    java.lang.Object[] OBJECT -> d
    java.lang.Object[] sBaseCache -> e
    int sBaseCacheSize -> f
    java.lang.Object[] sTwiceBaseCache -> g
    int sTwiceBaseCacheSize -> h
    int[] mHashes -> i
    java.lang.Object[] mArray -> a
    int mSize -> b
    androidx.collection.MapCollections mCollections -> j
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> d
    void freeArrays(int[],java.lang.Object[],int) -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> a
    java.lang.Object valueAt(int) -> b
    boolean isEmpty() -> isEmpty
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> c
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    androidx.collection.MapCollections getCollection() -> b
    java.util.Iterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void <clinit>() -> <clinit>
androidx.collection.ArraySet$1 -> androidx.b.b$1:
    androidx.collection.ArraySet this$0 -> a
    void <init>(androidx.collection.ArraySet) -> <init>
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
androidx.collection.ContainerHelpers -> androidx.b.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
    void <clinit>() -> <clinit>
androidx.collection.MapCollections -> androidx.b.d:
    androidx.collection.MapCollections$EntrySet mEntrySet -> b
    androidx.collection.MapCollections$KeySet mKeySet -> c
    androidx.collection.MapCollections$ValuesCollection mValues -> d
    void <init>() -> <init>
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
androidx.collection.MapCollections$ArrayIterator -> androidx.b.d$a:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    androidx.collection.MapCollections this$0 -> e
    void <init>(androidx.collection.MapCollections,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
androidx.collection.MapCollections$EntrySet -> androidx.b.d$b:
    androidx.collection.MapCollections this$0 -> a
    void <init>(androidx.collection.MapCollections) -> <init>
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
androidx.collection.MapCollections$KeySet -> androidx.b.d$c:
    androidx.collection.MapCollections this$0 -> a
    void <init>(androidx.collection.MapCollections) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
androidx.collection.MapCollections$MapIterator -> androidx.b.d$d:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    androidx.collection.MapCollections this$0 -> d
    void <init>(androidx.collection.MapCollections) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
androidx.collection.MapCollections$ValuesCollection -> androidx.b.d$e:
    androidx.collection.MapCollections this$0 -> a
    void <init>(androidx.collection.MapCollections) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
androidx.collection.SimpleArrayMap -> androidx.b.e:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int binarySearchHashes(int[],int,int) -> a
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void <init>() -> <init>
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfKey(java.lang.Object) -> a
    int indexOfValue(java.lang.Object) -> b
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
androidx.collection.SparseArrayCompat -> androidx.b.f:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    androidx.collection.SparseArrayCompat clone() -> a
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void remove(int) -> b
    void gc() -> d
    void put(int,java.lang.Object) -> b
    int size() -> b
    int keyAt(int) -> c
    java.lang.Object valueAt(int) -> d
    int indexOfKey(int) -> e
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
androidx.core.R -> androidx.core.a:
androidx.core.R$id -> androidx.core.a$a:
    int accessibility_action_clickable_span -> accessibility_action_clickable_span
    int accessibility_custom_action_0 -> accessibility_custom_action_0
    int accessibility_custom_action_1 -> accessibility_custom_action_1
    int accessibility_custom_action_10 -> accessibility_custom_action_10
    int accessibility_custom_action_11 -> accessibility_custom_action_11
    int accessibility_custom_action_12 -> accessibility_custom_action_12
    int accessibility_custom_action_13 -> accessibility_custom_action_13
    int accessibility_custom_action_14 -> accessibility_custom_action_14
    int accessibility_custom_action_15 -> accessibility_custom_action_15
    int accessibility_custom_action_16 -> accessibility_custom_action_16
    int accessibility_custom_action_17 -> accessibility_custom_action_17
    int accessibility_custom_action_18 -> accessibility_custom_action_18
    int accessibility_custom_action_19 -> accessibility_custom_action_19
    int accessibility_custom_action_2 -> accessibility_custom_action_2
    int accessibility_custom_action_20 -> accessibility_custom_action_20
    int accessibility_custom_action_21 -> accessibility_custom_action_21
    int accessibility_custom_action_22 -> accessibility_custom_action_22
    int accessibility_custom_action_23 -> accessibility_custom_action_23
    int accessibility_custom_action_24 -> accessibility_custom_action_24
    int accessibility_custom_action_25 -> accessibility_custom_action_25
    int accessibility_custom_action_26 -> accessibility_custom_action_26
    int accessibility_custom_action_27 -> accessibility_custom_action_27
    int accessibility_custom_action_28 -> accessibility_custom_action_28
    int accessibility_custom_action_29 -> accessibility_custom_action_29
    int accessibility_custom_action_3 -> accessibility_custom_action_3
    int accessibility_custom_action_30 -> accessibility_custom_action_30
    int accessibility_custom_action_31 -> accessibility_custom_action_31
    int accessibility_custom_action_4 -> accessibility_custom_action_4
    int accessibility_custom_action_5 -> accessibility_custom_action_5
    int accessibility_custom_action_6 -> accessibility_custom_action_6
    int accessibility_custom_action_7 -> accessibility_custom_action_7
    int accessibility_custom_action_8 -> accessibility_custom_action_8
    int accessibility_custom_action_9 -> accessibility_custom_action_9
    int action_container -> action_container
    int action_divider -> action_divider
    int action_image -> action_image
    int action_text -> action_text
    int actions -> actions
    int async -> async
    int blocking -> blocking
    int chronometer -> chronometer
    int dialog_button -> dialog_button
    int forever -> forever
    int icon -> icon
    int icon_group -> icon_group
    int info -> info
    int italic -> italic
    int line1 -> line1
    int line3 -> line3
    int normal -> normal
    int notification_background -> notification_background
    int notification_main_column -> notification_main_column
    int notification_main_column_container -> notification_main_column_container
    int right_icon -> right_icon
    int right_side -> right_side
    int tag_accessibility_actions -> tag_accessibility_actions
    int tag_accessibility_clickable_spans -> tag_accessibility_clickable_spans
    int tag_accessibility_heading -> tag_accessibility_heading
    int tag_accessibility_pane_title -> tag_accessibility_pane_title
    int tag_screen_reader_focusable -> tag_screen_reader_focusable
    int tag_transition_group -> tag_transition_group
    int tag_unhandled_key_event_manager -> tag_unhandled_key_event_manager
    int tag_unhandled_key_listeners -> tag_unhandled_key_listeners
    int text -> text
    int text2 -> text2
    int time -> time
    int title -> title
androidx.core.app.ActivityCompat -> androidx.core.app.a:
    androidx.core.app.ActivityCompat$PermissionCompatDelegate sDelegate -> a
    androidx.core.app.ActivityCompat$PermissionCompatDelegate getPermissionCompatDelegate() -> a
    void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle) -> a
    void startIntentSenderForResult(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle) -> a
    void finishAfterTransition(android.app.Activity) -> a
    void setEnterSharedElementCallback(android.app.Activity,androidx.core.app.SharedElementCallback) -> a
    void setExitSharedElementCallback(android.app.Activity,androidx.core.app.SharedElementCallback) -> b
    void postponeEnterTransition(android.app.Activity) -> b
    void startPostponedEnterTransition(android.app.Activity) -> c
    void requestPermissions(android.app.Activity,java.lang.String[],int) -> a
    boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String) -> a
androidx.core.app.ActivityCompat$1 -> androidx.core.app.a$1:
    java.lang.String[] val$permissions -> a
    android.app.Activity val$activity -> b
    int val$requestCode -> c
    void <init>(java.lang.String[],android.app.Activity,int) -> <init>
    void run() -> run
androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback -> androidx.core.app.a$a:
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
androidx.core.app.ActivityCompat$PermissionCompatDelegate -> androidx.core.app.a$b:
    boolean requestPermissions(android.app.Activity,java.lang.String[],int) -> a
    boolean onActivityResult(android.app.Activity,int,int,android.content.Intent) -> a
androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator -> androidx.core.app.a$c:
    void validateRequestPermissionsRequestCode(int) -> validateRequestPermissionsRequestCode
androidx.core.app.ActivityCompat$SharedElementCallback21Impl -> androidx.core.app.a$d:
    androidx.core.app.SharedElementCallback mCallback -> a
    void <init>(androidx.core.app.SharedElementCallback) -> <init>
    void onSharedElementStart(java.util.List,java.util.List,java.util.List) -> onSharedElementStart
    void onSharedElementEnd(java.util.List,java.util.List,java.util.List) -> onSharedElementEnd
    void onRejectSharedElements(java.util.List) -> onRejectSharedElements
    void onMapSharedElements(java.util.List,java.util.Map) -> onMapSharedElements
    android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF) -> onCaptureSharedElementSnapshot
    android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable) -> onCreateSnapshotView
    void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener) -> onSharedElementsArrived
androidx.core.app.ActivityCompat$SharedElementCallback21Impl$1 -> androidx.core.app.a$d$1:
    android.app.SharedElementCallback$OnSharedElementsReadyListener val$listener -> a
    androidx.core.app.ActivityCompat$SharedElementCallback21Impl this$0 -> b
    void <init>(androidx.core.app.ActivityCompat$SharedElementCallback21Impl,android.app.SharedElementCallback$OnSharedElementsReadyListener) -> <init>
    void onSharedElementsReady() -> a
androidx.core.app.ComponentActivity -> androidx.core.app.b:
    androidx.collection.SimpleArrayMap mExtraDataMap -> mExtraDataMap
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> mLifecycleRegistry
    void <init>() -> <init>
    void putExtraData(androidx.core.app.ComponentActivity$ExtraData) -> putExtraData
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    androidx.core.app.ComponentActivity$ExtraData getExtraData(java.lang.Class) -> getExtraData
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> superDispatchKeyEvent
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent) -> dispatchKeyShortcutEvent
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
androidx.core.app.ComponentActivity$ExtraData -> androidx.core.app.b$a:
    void <init>() -> <init>
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    void <init>() -> <init>
    android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateActivity
    android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String) -> instantiateApplication
    android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateReceiver
    android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String) -> instantiateProvider
    android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateService
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
androidx.core.app.CoreComponentFactory$CompatWrapped -> androidx.core.app.CoreComponentFactory$a:
    java.lang.Object getWrapper() -> a
androidx.core.app.RemoteActionCompat -> androidx.core.app.RemoteActionCompat:
    androidx.core.graphics.drawable.IconCompat mIcon -> a
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mContentDescription -> c
    android.app.PendingIntent mActionIntent -> d
    boolean mEnabled -> e
    boolean mShouldShowIcon -> f
    void <init>() -> <init>
androidx.core.app.RemoteActionCompatParcelizer -> androidx.core.app.RemoteActionCompatParcelizer:
    void <init>() -> <init>
    androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel) -> write
androidx.core.app.SharedElementCallback -> androidx.core.app.c:
    android.graphics.Matrix mTempMatrix -> a
    void onSharedElementStart(java.util.List,java.util.List,java.util.List) -> a
    void onSharedElementEnd(java.util.List,java.util.List,java.util.List) -> b
    void onRejectSharedElements(java.util.List) -> a
    void onMapSharedElements(java.util.List,java.util.Map) -> a
    android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF) -> a
    android.graphics.Bitmap createDrawableBitmap(android.graphics.drawable.Drawable) -> a
    android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable) -> a
    void onSharedElementsArrived(java.util.List,java.util.List,androidx.core.app.SharedElementCallback$OnSharedElementsReadyListener) -> a
androidx.core.app.SharedElementCallback$OnSharedElementsReadyListener -> androidx.core.app.c$a:
    void onSharedElementsReady() -> a
androidx.core.content.ContextCompat -> androidx.core.a.a:
    java.lang.Object sLock -> a
    void <clinit>() -> <clinit>
androidx.core.content.res.ResourcesCompat -> androidx.core.a.a.a:
    android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme) -> a
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    int mType -> a
    java.lang.Object mObj1 -> b
    byte[] mData -> c
    android.os.Parcelable mParcelable -> d
    int mInt1 -> e
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> h
    android.graphics.PorterDuff$Mode mTintMode -> i
    java.lang.String mTintModeStr -> j
    void <init>() -> <init>
    java.lang.String getResPackage() -> a
    int getResId() -> b
    java.lang.String toString() -> toString
    void onPreParceling(boolean) -> a
    void onPostParceling() -> c
    java.lang.String typeToString(int) -> a
    java.lang.String getResPackage(android.graphics.drawable.Icon) -> a
    int getResId(android.graphics.drawable.Icon) -> b
    void <clinit>() -> <clinit>
androidx.core.graphics.drawable.IconCompatParcelizer -> androidx.core.graphics.drawable.IconCompatParcelizer:
    void <init>() -> <init>
    androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel) -> write
androidx.core.util.DebugUtils -> androidx.core.b.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
androidx.core.util.LogWriter -> androidx.core.b.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void <init>(java.lang.String) -> <init>
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
androidx.core.util.Preconditions -> androidx.core.b.c:
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> a
androidx.core.view.KeyEventDispatcher -> androidx.core.c.a:
    boolean sActionBarFieldsFetched -> a
    java.lang.reflect.Method sActionBarOnMenuKeyMethod -> b
    boolean sDialogFieldsFetched -> c
    java.lang.reflect.Field sDialogKeyListenerField -> d
    boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent) -> a
    boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent) -> a
    boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent) -> a
    boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent) -> a
    android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog) -> a
    boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent) -> a
    void <clinit>() -> <clinit>
androidx.core.view.KeyEventDispatcher$Component -> androidx.core.c.a$a:
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> superDispatchKeyEvent
androidx.core.view.LayoutInflaterCompat -> androidx.core.c.b:
    java.lang.reflect.Field sLayoutInflaterFactory2Field -> a
    boolean sCheckedField -> b
    void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2) -> b
    void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2) -> a
androidx.core.view.OneShotPreDrawListener -> androidx.core.c.c:
    android.view.View mView -> a
    android.view.ViewTreeObserver mViewTreeObserver -> b
    java.lang.Runnable mRunnable -> c
    void <init>(android.view.View,java.lang.Runnable) -> <init>
    androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable) -> a
    boolean onPreDraw() -> onPreDraw
    void removeListener() -> a
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
androidx.core.view.ViewCompat -> androidx.core.c.d:
    java.util.concurrent.atomic.AtomicInteger sNextGeneratedId -> a
    java.util.WeakHashMap sTransitionNameMap -> b
    java.util.WeakHashMap sViewPropertyAnimatorMap -> c
    boolean sAccessibilityDelegateCheckFailed -> d
    int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS -> e
    androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager -> f
    int getAccessibilityLiveRegion(android.view.View) -> a
    void setTransitionName(android.view.View,java.lang.String) -> a
    java.lang.String getTransitionName(android.view.View) -> b
    boolean isAttachedToWindow(android.view.View) -> c
    boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent) -> a
    boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent) -> b
    java.lang.CharSequence getAccessibilityPaneTitle(android.view.View) -> d
    androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty() -> a
    void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int) -> a
    void <clinit>() -> <clinit>
androidx.core.view.ViewCompat$4 -> androidx.core.c.d$1:
    void <init>(int,java.lang.Class,int,int) -> <init>
    java.lang.CharSequence frameworkGet(android.view.View) -> a
    java.lang.Object frameworkGet(android.view.View) -> b
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager -> androidx.core.c.d$a:
    java.util.WeakHashMap mPanesToVisible -> a
    void <init>() -> <init>
    void onGlobalLayout() -> onGlobalLayout
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
    void checkPaneVisibility(android.view.View,boolean) -> a
    void registerForLayoutCallback(android.view.View) -> a
androidx.core.view.ViewCompat$AccessibilityViewProperty -> androidx.core.c.d$b:
    int mTagKey -> a
    java.lang.Class mType -> b
    int mFrameworkMinimumSdk -> c
    int mContentChangeType -> d
    void <init>(int,java.lang.Class,int,int) -> <init>
    java.lang.Object get(android.view.View) -> c
    boolean frameworkAvailable() -> a
    boolean extrasAvailable() -> b
    java.lang.Object frameworkGet(android.view.View) -> b
androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat -> androidx.core.c.d$c:
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent) -> a
androidx.core.view.ViewCompat$UnhandledKeyEventManager -> androidx.core.c.d$d:
    java.util.ArrayList sViewsWithListeners -> a
    java.util.WeakHashMap mViewsContainingListeners -> b
    android.util.SparseArray mCapturedKeys -> c
    java.lang.ref.WeakReference mLastDispatchedPreViewKeyEvent -> d
    void <init>() -> <init>
    android.util.SparseArray getCapturedKeys() -> a
    androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View) -> a
    boolean dispatch(android.view.View,android.view.KeyEvent) -> a
    android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent) -> b
    boolean preDispatch(android.view.KeyEvent) -> a
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent) -> c
    void recalcViewsWithUnhandled() -> b
    void <clinit>() -> <clinit>
androidx.core.view.ViewGroupCompat -> androidx.core.c.e:
    boolean isTransitionGroup(android.view.ViewGroup) -> a
androidx.fragment.app.BackStackRecord -> androidx.fragment.app.a:
    androidx.fragment.app.FragmentManagerImpl mManager -> a
    boolean mCommitted -> b
    int mIndex -> c
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.PrintWriter) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void <init>(androidx.fragment.app.FragmentManagerImpl) -> <init>
    void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int) -> a
    void bumpBackStackNesting(int) -> a
    void runOnCommitRunnables() -> a
    int commit() -> b
    int commitInternal(boolean) -> a
    boolean generateOps(java.util.ArrayList,java.util.ArrayList) -> a
    boolean interactsWith(int) -> b
    boolean interactsWith(java.util.ArrayList,int,int) -> a
    void executeOps() -> c
    void executePopOps(boolean) -> b
    androidx.fragment.app.Fragment expandOps(java.util.ArrayList,androidx.fragment.app.Fragment) -> a
    androidx.fragment.app.Fragment trackAddedFragmentsInPop(java.util.ArrayList,androidx.fragment.app.Fragment) -> b
    boolean isPostponed() -> d
    void setOnStartPostponedListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener) -> a
    boolean isFragmentPostponed(androidx.fragment.app.FragmentTransaction$Op) -> b
    java.lang.String getName() -> e
androidx.fragment.app.BackStackState -> androidx.fragment.app.b:
    int[] mOps -> a
    java.util.ArrayList mFragmentWhos -> b
    int[] mOldMaxLifecycleStates -> c
    int[] mCurrentMaxLifecycleStates -> d
    int mTransition -> e
    int mTransitionStyle -> f
    java.lang.String mName -> g
    int mIndex -> h
    int mBreadCrumbTitleRes -> i
    java.lang.CharSequence mBreadCrumbTitleText -> j
    int mBreadCrumbShortTitleRes -> k
    java.lang.CharSequence mBreadCrumbShortTitleText -> l
    java.util.ArrayList mSharedElementSourceNames -> m
    java.util.ArrayList mSharedElementTargetNames -> n
    boolean mReorderingAllowed -> o
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(androidx.fragment.app.BackStackRecord) -> <init>
    void <init>(android.os.Parcel) -> <init>
    androidx.fragment.app.BackStackRecord instantiate(androidx.fragment.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.fragment.app.BackStackState$1 -> androidx.fragment.app.b$1:
    void <init>() -> <init>
    androidx.fragment.app.BackStackState createFromParcel(android.os.Parcel) -> a
    androidx.fragment.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.fragment.app.Fragment -> androidx.fragment.app.c:
    java.lang.Object USE_DEFAULT_TRANSITION -> USE_DEFAULT_TRANSITION
    int INITIALIZING -> INITIALIZING
    int CREATED -> CREATED
    int ACTIVITY_CREATED -> ACTIVITY_CREATED
    int STARTED -> STARTED
    int RESUMED -> RESUMED
    int mState -> mState
    android.os.Bundle mSavedFragmentState -> mSavedFragmentState
    android.util.SparseArray mSavedViewState -> mSavedViewState
    java.lang.Boolean mSavedUserVisibleHint -> mSavedUserVisibleHint
    java.lang.String mWho -> mWho
    android.os.Bundle mArguments -> mArguments
    androidx.fragment.app.Fragment mTarget -> mTarget
    java.lang.String mTargetWho -> mTargetWho
    int mTargetRequestCode -> mTargetRequestCode
    java.lang.Boolean mIsPrimaryNavigationFragment -> mIsPrimaryNavigationFragment
    boolean mAdded -> mAdded
    boolean mRemoving -> mRemoving
    boolean mFromLayout -> mFromLayout
    boolean mInLayout -> mInLayout
    boolean mRestored -> mRestored
    boolean mPerformedCreateView -> mPerformedCreateView
    int mBackStackNesting -> mBackStackNesting
    androidx.fragment.app.FragmentManagerImpl mFragmentManager -> mFragmentManager
    androidx.fragment.app.FragmentHostCallback mHost -> mHost
    androidx.fragment.app.FragmentManagerImpl mChildFragmentManager -> mChildFragmentManager
    androidx.fragment.app.Fragment mParentFragment -> mParentFragment
    int mFragmentId -> mFragmentId
    int mContainerId -> mContainerId
    java.lang.String mTag -> mTag
    boolean mHidden -> mHidden
    boolean mDetached -> mDetached
    boolean mRetainInstance -> mRetainInstance
    boolean mRetainInstanceChangedWhileDetached -> mRetainInstanceChangedWhileDetached
    boolean mHasMenu -> mHasMenu
    boolean mMenuVisible -> mMenuVisible
    boolean mCalled -> mCalled
    android.view.ViewGroup mContainer -> mContainer
    android.view.View mView -> mView
    android.view.View mInnerView -> mInnerView
    boolean mDeferStart -> mDeferStart
    boolean mUserVisibleHint -> mUserVisibleHint
    androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo -> mAnimationInfo
    java.lang.Runnable mPostponedDurationRunnable -> mPostponedDurationRunnable
    boolean mIsNewlyAdded -> mIsNewlyAdded
    boolean mHiddenChanged -> mHiddenChanged
    float mPostponedAlpha -> mPostponedAlpha
    android.view.LayoutInflater mLayoutInflater -> mLayoutInflater
    boolean mIsCreated -> mIsCreated
    androidx.lifecycle.Lifecycle$State mMaxState -> mMaxState
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> mLifecycleRegistry
    androidx.fragment.app.FragmentViewLifecycleOwner mViewLifecycleOwner -> mViewLifecycleOwner
    androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData -> mViewLifecycleOwnerLiveData
    androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController -> mSavedStateRegistryController
    int mContentLayoutId -> mContentLayoutId
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    androidx.lifecycle.LifecycleOwner getViewLifecycleOwner() -> getViewLifecycleOwner
    androidx.lifecycle.LiveData getViewLifecycleOwnerLiveData() -> getViewLifecycleOwnerLiveData
    androidx.lifecycle.ViewModelStore getViewModelStore() -> getViewModelStore
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry() -> getSavedStateRegistry
    void <init>() -> <init>
    void <init>(int) -> <init>
    void initLifecycle() -> initLifecycle
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String) -> instantiate
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> instantiate
    void restoreViewState(android.os.Bundle) -> restoreViewState
    boolean isInBackStack() -> isInBackStack
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getId() -> getId
    java.lang.String getTag() -> getTag
    void setArguments(android.os.Bundle) -> setArguments
    android.os.Bundle getArguments() -> getArguments
    android.os.Bundle requireArguments() -> requireArguments
    boolean isStateSaved() -> isStateSaved
    void setInitialSavedState(androidx.fragment.app.Fragment$SavedState) -> setInitialSavedState
    void setTargetFragment(androidx.fragment.app.Fragment,int) -> setTargetFragment
    androidx.fragment.app.Fragment getTargetFragment() -> getTargetFragment
    int getTargetRequestCode() -> getTargetRequestCode
    android.content.Context getContext() -> getContext
    android.content.Context requireContext() -> requireContext
    androidx.fragment.app.FragmentActivity getActivity() -> getActivity
    androidx.fragment.app.FragmentActivity requireActivity() -> requireActivity
    java.lang.Object getHost() -> getHost
    java.lang.Object requireHost() -> requireHost
    android.content.res.Resources getResources() -> getResources
    java.lang.CharSequence getText(int) -> getText
    java.lang.String getString(int) -> getString
    java.lang.String getString(int,java.lang.Object[]) -> getString
    androidx.fragment.app.FragmentManager getFragmentManager() -> getFragmentManager
    androidx.fragment.app.FragmentManager requireFragmentManager() -> requireFragmentManager
    androidx.fragment.app.FragmentManager getChildFragmentManager() -> getChildFragmentManager
    androidx.fragment.app.Fragment getParentFragment() -> getParentFragment
    androidx.fragment.app.Fragment requireParentFragment() -> requireParentFragment
    boolean isAdded() -> isAdded
    boolean isDetached() -> isDetached
    boolean isRemoving() -> isRemoving
    boolean isInLayout() -> isInLayout
    boolean isResumed() -> isResumed
    boolean isVisible() -> isVisible
    boolean isHidden() -> isHidden
    boolean hasOptionsMenu() -> hasOptionsMenu
    boolean isMenuVisible() -> isMenuVisible
    void onHiddenChanged(boolean) -> onHiddenChanged
    void setRetainInstance(boolean) -> setRetainInstance
    boolean getRetainInstance() -> getRetainInstance
    void setHasOptionsMenu(boolean) -> setHasOptionsMenu
    void setMenuVisibility(boolean) -> setMenuVisibility
    void setUserVisibleHint(boolean) -> setUserVisibleHint
    boolean getUserVisibleHint() -> getUserVisibleHint
    androidx.loader.app.LoaderManager getLoaderManager() -> getLoaderManager
    void startActivity(android.content.Intent) -> startActivity
    void startActivity(android.content.Intent,android.os.Bundle) -> startActivity
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityForResult(android.content.Intent,int,android.os.Bundle) -> startActivityForResult
    void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle) -> startIntentSenderForResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void requestPermissions(java.lang.String[],int) -> requestPermissions
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean shouldShowRequestPermissionRationale(java.lang.String) -> shouldShowRequestPermissionRationale
    android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle) -> onGetLayoutInflater
    android.view.LayoutInflater getLayoutInflater() -> getLayoutInflater
    android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle) -> performGetLayoutInflater
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> getLayoutInflater
    void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle) -> onInflate
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> onInflate
    void onAttachFragment(androidx.fragment.app.Fragment) -> onAttachFragment
    void onAttach(android.content.Context) -> onAttach
    void onAttach(android.app.Activity) -> onAttach
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> onCreateAnimation
    android.animation.Animator onCreateAnimator(int,boolean,int) -> onCreateAnimator
    void onCreate(android.os.Bundle) -> onCreate
    void restoreChildFragmentState(android.os.Bundle) -> restoreChildFragmentState
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onViewCreated(android.view.View,android.os.Bundle) -> onViewCreated
    android.view.View getView() -> getView
    android.view.View requireView() -> requireView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onViewStateRestored(android.os.Bundle) -> onViewStateRestored
    void onStart() -> onStart
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onMultiWindowModeChanged(boolean) -> onMultiWindowModeChanged
    void onPictureInPictureModeChanged(boolean) -> onPictureInPictureModeChanged
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPrimaryNavigationFragmentChanged(boolean) -> onPrimaryNavigationFragmentChanged
    void onPause() -> onPause
    void onStop() -> onStop
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> onDestroyView
    void onDestroy() -> onDestroy
    void initState() -> initState
    void onDetach() -> onDetach
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> onCreateOptionsMenu
    void onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onDestroyOptionsMenu() -> onDestroyOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void registerForContextMenu(android.view.View) -> registerForContextMenu
    void unregisterForContextMenu(android.view.View) -> unregisterForContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback) -> setEnterSharedElementCallback
    void setExitSharedElementCallback(androidx.core.app.SharedElementCallback) -> setExitSharedElementCallback
    void setEnterTransition(java.lang.Object) -> setEnterTransition
    java.lang.Object getEnterTransition() -> getEnterTransition
    void setReturnTransition(java.lang.Object) -> setReturnTransition
    java.lang.Object getReturnTransition() -> getReturnTransition
    void setExitTransition(java.lang.Object) -> setExitTransition
    java.lang.Object getExitTransition() -> getExitTransition
    void setReenterTransition(java.lang.Object) -> setReenterTransition
    java.lang.Object getReenterTransition() -> getReenterTransition
    void setSharedElementEnterTransition(java.lang.Object) -> setSharedElementEnterTransition
    java.lang.Object getSharedElementEnterTransition() -> getSharedElementEnterTransition
    void setSharedElementReturnTransition(java.lang.Object) -> setSharedElementReturnTransition
    java.lang.Object getSharedElementReturnTransition() -> getSharedElementReturnTransition
    void setAllowEnterTransitionOverlap(boolean) -> setAllowEnterTransitionOverlap
    boolean getAllowEnterTransitionOverlap() -> getAllowEnterTransitionOverlap
    void setAllowReturnTransitionOverlap(boolean) -> setAllowReturnTransitionOverlap
    boolean getAllowReturnTransitionOverlap() -> getAllowReturnTransitionOverlap
    void postponeEnterTransition() -> postponeEnterTransition
    void postponeEnterTransition(long,java.util.concurrent.TimeUnit) -> postponeEnterTransition
    void startPostponedEnterTransition() -> startPostponedEnterTransition
    void callStartTransitionListener() -> callStartTransitionListener
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> findFragmentByWho
    void performAttach() -> performAttach
    void performCreate(android.os.Bundle) -> performCreate
    void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> performCreateView
    void performActivityCreated(android.os.Bundle) -> performActivityCreated
    void performStart() -> performStart
    void performResume() -> performResume
    void noteStateNotSaved() -> noteStateNotSaved
    void performPrimaryNavigationFragmentChanged() -> performPrimaryNavigationFragmentChanged
    void performMultiWindowModeChanged(boolean) -> performMultiWindowModeChanged
    void performPictureInPictureModeChanged(boolean) -> performPictureInPictureModeChanged
    void performConfigurationChanged(android.content.res.Configuration) -> performConfigurationChanged
    void performLowMemory() -> performLowMemory
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> performCreateOptionsMenu
    boolean performPrepareOptionsMenu(android.view.Menu) -> performPrepareOptionsMenu
    boolean performOptionsItemSelected(android.view.MenuItem) -> performOptionsItemSelected
    boolean performContextItemSelected(android.view.MenuItem) -> performContextItemSelected
    void performOptionsMenuClosed(android.view.Menu) -> performOptionsMenuClosed
    void performSaveInstanceState(android.os.Bundle) -> performSaveInstanceState
    void performPause() -> performPause
    void performStop() -> performStop
    void performDestroyView() -> performDestroyView
    void performDestroy() -> performDestroy
    void performDetach() -> performDetach
    void setOnStartEnterTransitionListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener) -> setOnStartEnterTransitionListener
    androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo() -> ensureAnimationInfo
    int getNextAnim() -> getNextAnim
    void setNextAnim(int) -> setNextAnim
    int getNextTransition() -> getNextTransition
    void setNextTransition(int,int) -> setNextTransition
    int getNextTransitionStyle() -> getNextTransitionStyle
    androidx.core.app.SharedElementCallback getEnterTransitionCallback() -> getEnterTransitionCallback
    androidx.core.app.SharedElementCallback getExitTransitionCallback() -> getExitTransitionCallback
    android.view.View getAnimatingAway() -> getAnimatingAway
    void setAnimatingAway(android.view.View) -> setAnimatingAway
    void setAnimator(android.animation.Animator) -> setAnimator
    android.animation.Animator getAnimator() -> getAnimator
    int getStateAfterAnimating() -> getStateAfterAnimating
    void setStateAfterAnimating(int) -> setStateAfterAnimating
    boolean isPostponed() -> isPostponed
    boolean isHideReplaced() -> isHideReplaced
    void setHideReplaced(boolean) -> setHideReplaced
    void <clinit>() -> <clinit>
androidx.fragment.app.Fragment$1 -> androidx.fragment.app.c$1:
    androidx.fragment.app.Fragment this$0 -> a
    void <init>(androidx.fragment.app.Fragment) -> <init>
    void run() -> run
androidx.fragment.app.Fragment$2 -> androidx.fragment.app.Fragment$2:
    androidx.fragment.app.Fragment this$0 -> a
    void <init>(androidx.fragment.app.Fragment) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.fragment.app.Fragment$3 -> androidx.fragment.app.c$2:
    androidx.fragment.app.Fragment this$0 -> a
    void <init>(androidx.fragment.app.Fragment) -> <init>
    void run() -> run
androidx.fragment.app.Fragment$4 -> androidx.fragment.app.c$3:
    androidx.fragment.app.Fragment this$0 -> a
    void <init>(androidx.fragment.app.Fragment) -> <init>
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
androidx.fragment.app.Fragment$AnimationInfo -> androidx.fragment.app.c$a:
    android.view.View mAnimatingAway -> a
    android.animation.Animator mAnimator -> b
    int mStateAfterAnimating -> c
    int mNextAnim -> d
    int mNextTransition -> e
    int mNextTransitionStyle -> f
    java.lang.Object mEnterTransition -> g
    java.lang.Object mReturnTransition -> h
    java.lang.Object mExitTransition -> i
    java.lang.Object mReenterTransition -> j
    java.lang.Object mSharedElementEnterTransition -> k
    java.lang.Object mSharedElementReturnTransition -> l
    java.lang.Boolean mAllowReturnTransitionOverlap -> m
    java.lang.Boolean mAllowEnterTransitionOverlap -> n
    androidx.core.app.SharedElementCallback mEnterTransitionCallback -> o
    androidx.core.app.SharedElementCallback mExitTransitionCallback -> p
    boolean mEnterTransitionPostponed -> q
    androidx.fragment.app.Fragment$OnStartEnterTransitionListener mStartEnterTransitionListener -> r
    boolean mIsHideReplaced -> s
    void <init>() -> <init>
androidx.fragment.app.Fragment$InstantiationException -> androidx.fragment.app.c$b:
    void <init>(java.lang.String,java.lang.Exception) -> <init>
androidx.fragment.app.Fragment$OnStartEnterTransitionListener -> androidx.fragment.app.c$c:
    void onStartEnterTransition() -> a
    void startListening() -> b
androidx.fragment.app.Fragment$SavedState -> androidx.fragment.app.c$d:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcel,java.lang.ClassLoader) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.fragment.app.Fragment$SavedState$1 -> androidx.fragment.app.c$d$1:
    void <init>() -> <init>
    androidx.fragment.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    androidx.fragment.app.Fragment$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    androidx.fragment.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.fragment.app.FragmentActivity -> androidx.fragment.app.d:
    java.lang.String TAG -> TAG
    java.lang.String FRAGMENTS_TAG -> FRAGMENTS_TAG
    java.lang.String NEXT_CANDIDATE_REQUEST_INDEX_TAG -> NEXT_CANDIDATE_REQUEST_INDEX_TAG
    java.lang.String ALLOCATED_REQUEST_INDICIES_TAG -> ALLOCATED_REQUEST_INDICIES_TAG
    java.lang.String REQUEST_FRAGMENT_WHO_TAG -> REQUEST_FRAGMENT_WHO_TAG
    int MAX_NUM_PENDING_FRAGMENT_ACTIVITY_RESULTS -> MAX_NUM_PENDING_FRAGMENT_ACTIVITY_RESULTS
    androidx.fragment.app.FragmentController mFragments -> mFragments
    androidx.lifecycle.LifecycleRegistry mFragmentLifecycleRegistry -> mFragmentLifecycleRegistry
    boolean mCreated -> mCreated
    boolean mResumed -> mResumed
    boolean mStopped -> mStopped
    boolean mRequestedPermissionsFromFragment -> mRequestedPermissionsFromFragment
    boolean mStartedIntentSenderFromFragment -> mStartedIntentSenderFromFragment
    boolean mStartedActivityFromFragment -> mStartedActivityFromFragment
    int mNextCandidateRequestIndex -> mNextCandidateRequestIndex
    androidx.collection.SparseArrayCompat mPendingFragmentActivityResults -> mPendingFragmentActivityResults
    void <init>() -> <init>
    void <init>(int) -> <init>
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void supportFinishAfterTransition() -> supportFinishAfterTransition
    void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback) -> setEnterSharedElementCallback
    void setExitSharedElementCallback(androidx.core.app.SharedElementCallback) -> setExitSharedElementCallback
    void supportPostponeEnterTransition() -> supportPostponeEnterTransition
    void supportStartPostponedEnterTransition() -> supportStartPostponedEnterTransition
    void onMultiWindowModeChanged(boolean) -> onMultiWindowModeChanged
    void onPictureInPictureModeChanged(boolean) -> onPictureInPictureModeChanged
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> dispatchFragmentsOnCreateView
    void onDestroy() -> onDestroy
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStateNotSaved() -> onStateNotSaved
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> onResumeFragments
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> onPrepareOptionsPanel
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    void supportInvalidateOptionsMenu() -> supportInvalidateOptionsMenu
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void onAttachFragment(androidx.fragment.app.Fragment) -> onAttachFragment
    androidx.fragment.app.FragmentManager getSupportFragmentManager() -> getSupportFragmentManager
    androidx.loader.app.LoaderManager getSupportLoaderManager() -> getSupportLoaderManager
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityForResult(android.content.Intent,int,android.os.Bundle) -> startActivityForResult
    void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int) -> startIntentSenderForResult
    void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle) -> startIntentSenderForResult
    void checkForValidRequestCode(int) -> checkForValidRequestCode
    void validateRequestPermissionsRequestCode(int) -> validateRequestPermissionsRequestCode
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int) -> startActivityFromFragment
    void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle) -> startActivityFromFragment
    void startIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle) -> startIntentSenderFromFragment
    int allocateRequestIndex(androidx.fragment.app.Fragment) -> allocateRequestIndex
    void requestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int) -> requestPermissionsFromFragment
    void markFragmentsCreated() -> markFragmentsCreated
    boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State) -> markState
androidx.fragment.app.FragmentActivity$HostCallbacks -> androidx.fragment.app.d$a:
    androidx.fragment.app.FragmentActivity this$0 -> a
    void <init>(androidx.fragment.app.FragmentActivity) -> <init>
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    androidx.lifecycle.ViewModelStore getViewModelStore() -> getViewModelStore
    androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher() -> getOnBackPressedDispatcher
    void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment) -> a
    android.view.LayoutInflater onGetLayoutInflater() -> b
    androidx.fragment.app.FragmentActivity onGetHost() -> c
    void onSupportInvalidateOptionsMenu() -> d
    void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle) -> a
    void onStartIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle) -> a
    void onRequestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int) -> a
    boolean onShouldShowRequestPermissionRationale(java.lang.String) -> a
    boolean onHasWindowAnimations() -> e
    int onGetWindowAnimations() -> f
    void onAttachFragment(androidx.fragment.app.Fragment) -> b
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
    java.lang.Object onGetHost() -> g
androidx.fragment.app.FragmentContainer -> androidx.fragment.app.e:
    void <init>() -> <init>
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
androidx.fragment.app.FragmentController -> androidx.fragment.app.f:
    androidx.fragment.app.FragmentHostCallback mHost -> a
    androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback) -> a
    void <init>(androidx.fragment.app.FragmentHostCallback) -> <init>
    androidx.fragment.app.FragmentManager getSupportFragmentManager() -> a
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> a
    void attachHost(androidx.fragment.app.Fragment) -> a
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    void noteStateNotSaved() -> b
    android.os.Parcelable saveAllState() -> c
    void restoreSaveState(android.os.Parcelable) -> a
    void dispatchCreate() -> d
    void dispatchActivityCreated() -> e
    void dispatchStart() -> f
    void dispatchResume() -> g
    void dispatchPause() -> h
    void dispatchStop() -> i
    void dispatchDestroy() -> j
    void dispatchMultiWindowModeChanged(boolean) -> a
    void dispatchPictureInPictureModeChanged(boolean) -> b
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> k
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    boolean execPendingActions() -> l
androidx.fragment.app.FragmentFactory -> androidx.fragment.app.g:
    androidx.collection.SimpleArrayMap sClassMap -> a
    void <init>() -> <init>
    java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String) -> d
    boolean isFragmentClass(java.lang.ClassLoader,java.lang.String) -> a
    java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String) -> b
    androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String) -> c
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentHostCallback -> androidx.fragment.app.h:
    android.app.Activity mActivity -> a
    android.content.Context mContext -> c
    android.os.Handler mHandler -> d
    int mWindowAnimations -> e
    androidx.fragment.app.FragmentManagerImpl mFragmentManager -> b
    void <init>(androidx.fragment.app.FragmentActivity) -> <init>
    void <init>(android.app.Activity,android.content.Context,android.os.Handler,int) -> <init>
    void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment) -> a
    android.view.LayoutInflater onGetLayoutInflater() -> b
    java.lang.Object onGetHost() -> g
    void onSupportInvalidateOptionsMenu() -> d
    void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle) -> a
    void onStartIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle) -> a
    void onRequestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int) -> a
    boolean onShouldShowRequestPermissionRationale(java.lang.String) -> a
    boolean onHasWindowAnimations() -> e
    int onGetWindowAnimations() -> f
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
    android.app.Activity getActivity() -> h
    android.content.Context getContext() -> i
    android.os.Handler getHandler() -> j
    void onAttachFragment(androidx.fragment.app.Fragment) -> b
androidx.fragment.app.FragmentManager -> androidx.fragment.app.i:
    androidx.fragment.app.FragmentFactory DEFAULT_FACTORY -> a
    androidx.fragment.app.FragmentFactory mFragmentFactory -> b
    void <init>() -> <init>
    androidx.fragment.app.FragmentTransaction beginTransaction() -> a
    androidx.fragment.app.Fragment findFragmentByTag(java.lang.String) -> a
    boolean popBackStackImmediate() -> b
    java.util.List getFragments() -> c
    void setFragmentFactory(androidx.fragment.app.FragmentFactory) -> a
    androidx.fragment.app.FragmentFactory getFragmentFactory() -> d
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks -> androidx.fragment.app.i$a:
    void onFragmentPreAttached(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.content.Context) -> a
    void onFragmentAttached(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.content.Context) -> b
    void onFragmentPreCreated(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.os.Bundle) -> a
    void onFragmentCreated(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.os.Bundle) -> b
    void onFragmentActivityCreated(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.os.Bundle) -> c
    void onFragmentViewCreated(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.view.View,android.os.Bundle) -> a
    void onFragmentStarted(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> a
    void onFragmentResumed(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> b
    void onFragmentPaused(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> c
    void onFragmentStopped(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> d
    void onFragmentSaveInstanceState(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment,android.os.Bundle) -> d
    void onFragmentViewDestroyed(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> e
    void onFragmentDestroyed(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> f
    void onFragmentDetached(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment) -> g
androidx.fragment.app.FragmentManager$OnBackStackChangedListener -> androidx.fragment.app.i$b:
    void onBackStackChanged() -> a
androidx.fragment.app.FragmentManagerImpl -> androidx.fragment.app.j:
    boolean DEBUG -> b
    java.util.ArrayList mPendingActions -> c
    boolean mExecutingActions -> d
    int mNextFragmentIndex -> e
    java.util.ArrayList mAdded -> f
    java.util.HashMap mActive -> g
    java.util.ArrayList mBackStack -> h
    java.util.ArrayList mCreatedMenus -> i
    androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher -> F
    androidx.activity.OnBackPressedCallback mOnBackPressedCallback -> G
    java.util.ArrayList mBackStackIndices -> j
    java.util.ArrayList mAvailBackStackIndices -> k
    java.util.ArrayList mBackStackChangeListeners -> l
    java.util.concurrent.CopyOnWriteArrayList mLifecycleCallbacks -> H
    int mCurState -> m
    androidx.fragment.app.FragmentHostCallback mHost -> n
    androidx.fragment.app.FragmentContainer mContainer -> o
    androidx.fragment.app.Fragment mParent -> p
    androidx.fragment.app.Fragment mPrimaryNav -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mStopped -> t
    boolean mDestroyed -> u
    boolean mHavePendingDeferredStart -> v
    java.util.ArrayList mTmpRecords -> w
    java.util.ArrayList mTmpIsPop -> x
    java.util.ArrayList mTmpAddedFragments -> y
    android.os.Bundle mStateBundle -> z
    android.util.SparseArray mStateArray -> A
    java.util.ArrayList mPostponedTransactions -> B
    androidx.fragment.app.FragmentManagerViewModel mNonConfig -> I
    java.lang.Runnable mExecCommit -> C
    android.view.animation.Interpolator DECELERATE_QUINT -> D
    android.view.animation.Interpolator DECELERATE_CUBIC -> E
    void <init>() -> <init>
    void throwException(java.lang.RuntimeException) -> a
    androidx.fragment.app.FragmentTransaction beginTransaction() -> a
    void updateOnBackPressedCallbackEnabled() -> C
    boolean isPrimaryNavigation(androidx.fragment.app.Fragment) -> a
    void handleOnBackPressed() -> e
    boolean popBackStackImmediate() -> b
    boolean popBackStackImmediate(java.lang.String,int,int) -> a
    int getBackStackEntryCount() -> f
    void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment) -> a
    androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.util.List getFragments() -> c
    androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment) -> b
    androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment) -> c
    void addRetainedFragment(androidx.fragment.app.Fragment) -> d
    void removeRetainedFragment(androidx.fragment.app.Fragment) -> e
    boolean isDestroyed() -> g
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(float,float,float,float) -> a
    androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(float,float) -> a
    androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(androidx.fragment.app.Fragment) -> f
    boolean isStateAtLeast(int) -> a
    void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean) -> a
    void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int) -> a
    void moveToState(androidx.fragment.app.Fragment) -> g
    void ensureInflatedFragmentView(androidx.fragment.app.Fragment) -> h
    void completeShowHideFragment(androidx.fragment.app.Fragment) -> i
    void moveFragmentToExpectedState(androidx.fragment.app.Fragment) -> j
    void moveToState(int,boolean) -> a
    void startPendingDeferredFragments() -> h
    void makeActive(androidx.fragment.app.Fragment) -> k
    void makeInactive(androidx.fragment.app.Fragment) -> l
    void addFragment(androidx.fragment.app.Fragment,boolean) -> a
    void removeFragment(androidx.fragment.app.Fragment) -> m
    void hideFragment(androidx.fragment.app.Fragment) -> n
    void showFragment(androidx.fragment.app.Fragment) -> o
    void detachFragment(androidx.fragment.app.Fragment) -> p
    void attachFragment(androidx.fragment.app.Fragment) -> q
    androidx.fragment.app.Fragment findFragmentById(int) -> b
    androidx.fragment.app.Fragment findFragmentByTag(java.lang.String) -> a
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> b
    void checkStateLoss() -> D
    boolean isStateSaved() -> i
    void enqueueAction(androidx.fragment.app.FragmentManagerImpl$OpGenerator,boolean) -> a
    void scheduleCommit() -> j
    int allocBackStackIndex(androidx.fragment.app.BackStackRecord) -> a
    void setBackStackIndex(int,androidx.fragment.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> c
    void ensureExecReady(boolean) -> c
    void cleanupExec() -> E
    boolean execPendingActions() -> k
    void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList) -> a
    void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList) -> b
    void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int) -> a
    void makeRemovedFragmentsInvisible(androidx.collection.ArraySet) -> a
    int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet) -> a
    void completeExecute(androidx.fragment.app.BackStackRecord,boolean,boolean,boolean) -> a
    androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment) -> u
    void executeOps(java.util.ArrayList,java.util.ArrayList,int,int) -> b
    void addAddedFragments(androidx.collection.ArraySet) -> b
    void forcePostponedTransactions() -> F
    void endAnimatingAwayFragments() -> G
    boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList) -> c
    void doPendingDeferredStart() -> l
    void reportBackStackChanged() -> m
    void addBackStackState(androidx.fragment.app.BackStackRecord) -> b
    boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int) -> a
    void saveFragmentViewState(androidx.fragment.app.Fragment) -> r
    android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment) -> s
    android.os.Parcelable saveAllState() -> n
    void restoreSaveState(android.os.Parcelable) -> a
    void burpActive() -> H
    void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment) -> a
    void noteStateNotSaved() -> o
    void dispatchCreate() -> p
    void dispatchActivityCreated() -> q
    void dispatchStart() -> r
    void dispatchResume() -> s
    void dispatchPause() -> t
    void dispatchStop() -> u
    void dispatchDestroyView() -> v
    void dispatchDestroy() -> w
    void dispatchStateChange(int) -> e
    void dispatchMultiWindowModeChanged(boolean) -> a
    void dispatchPictureInPictureModeChanged(boolean) -> b
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> x
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    void setPrimaryNavigationFragment(androidx.fragment.app.Fragment) -> t
    void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment) -> v
    void dispatchPrimaryNavigationFragmentChanged() -> y
    androidx.fragment.app.Fragment getPrimaryNavigationFragment() -> z
    void setMaxLifecycle(androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State) -> a
    androidx.fragment.app.FragmentFactory getFragmentFactory() -> d
    void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean) -> a
    void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean) -> b
    void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> a
    void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> b
    void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> c
    void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean) -> a
    void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean) -> b
    void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean) -> c
    void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean) -> d
    void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean) -> e
    void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> d
    void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean) -> f
    void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean) -> g
    void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean) -> h
    boolean checkForMenus() -> A
    boolean isMenuAvailable(androidx.fragment.app.Fragment) -> w
    int reverseTransit(int) -> d
    int transitToStyleIndex(int,boolean) -> b
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.LayoutInflater$Factory2 getLayoutInflaterFactory() -> B
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentManagerImpl$1 -> androidx.fragment.app.j$1:
    androidx.fragment.app.FragmentManagerImpl this$0 -> a
    void <init>(androidx.fragment.app.FragmentManagerImpl,boolean) -> <init>
    void handleOnBackPressed() -> handleOnBackPressed
androidx.fragment.app.FragmentManagerImpl$2 -> androidx.fragment.app.j$2:
    androidx.fragment.app.FragmentManagerImpl this$0 -> a
    void <init>(androidx.fragment.app.FragmentManagerImpl) -> <init>
    void run() -> run
androidx.fragment.app.FragmentManagerImpl$3 -> androidx.fragment.app.j$3:
    android.view.ViewGroup val$container -> a
    androidx.fragment.app.Fragment val$fragment -> b
    androidx.fragment.app.FragmentManagerImpl this$0 -> c
    void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,androidx.fragment.app.Fragment) -> <init>
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
androidx.fragment.app.FragmentManagerImpl$3$1 -> androidx.fragment.app.j$3$1:
    androidx.fragment.app.FragmentManagerImpl$3 this$1 -> a
    void <init>(androidx.fragment.app.FragmentManagerImpl$3) -> <init>
    void run() -> run
androidx.fragment.app.FragmentManagerImpl$4 -> androidx.fragment.app.j$4:
    android.view.ViewGroup val$container -> a
    android.view.View val$viewToAnimate -> b
    androidx.fragment.app.Fragment val$fragment -> c
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
androidx.fragment.app.FragmentManagerImpl$5 -> androidx.fragment.app.j$5:
    android.view.ViewGroup val$container -> a
    android.view.View val$animatingView -> b
    androidx.fragment.app.Fragment val$fragment -> c
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    void <init>(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
androidx.fragment.app.FragmentManagerImpl$6 -> androidx.fragment.app.j$6:
    androidx.fragment.app.FragmentManagerImpl this$0 -> a
    void <init>(androidx.fragment.app.FragmentManagerImpl) -> <init>
    androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String) -> c
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator -> androidx.fragment.app.j$a:
    android.view.animation.Animation animation -> a
    android.animation.Animator animator -> b
    void <init>(android.view.animation.Animation) -> <init>
    void <init>(android.animation.Animator) -> <init>
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation -> androidx.fragment.app.j$b:
    android.view.ViewGroup mParent -> a
    android.view.View mChild -> b
    boolean mEnded -> c
    boolean mTransitionEnded -> d
    boolean mAnimating -> e
    void <init>(android.view.animation.Animation,android.view.ViewGroup,android.view.View) -> <init>
    boolean getTransformation(long,android.view.animation.Transformation) -> getTransformation
    boolean getTransformation(long,android.view.animation.Transformation,float) -> getTransformation
    void run() -> run
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder -> androidx.fragment.app.j$c:
    androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks mCallback -> a
    boolean mRecursive -> b
androidx.fragment.app.FragmentManagerImpl$FragmentTag -> androidx.fragment.app.j$d:
    int[] Fragment -> a
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentManagerImpl$OpGenerator -> androidx.fragment.app.j$e:
    boolean generateOps(java.util.ArrayList,java.util.ArrayList) -> a
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener -> androidx.fragment.app.j$f:
    boolean mIsBack -> a
    androidx.fragment.app.BackStackRecord mRecord -> b
    int mNumPostponed -> c
    void <init>(androidx.fragment.app.BackStackRecord,boolean) -> <init>
    void onStartEnterTransition() -> a
    void startListening() -> b
    boolean isReady() -> c
    void completeTransaction() -> d
    void cancelTransaction() -> e
androidx.fragment.app.FragmentManagerState -> androidx.fragment.app.k:
    java.util.ArrayList mActive -> a
    java.util.ArrayList mAdded -> b
    androidx.fragment.app.BackStackState[] mBackStack -> c
    java.lang.String mPrimaryNavActiveWho -> d
    int mNextFragmentIndex -> e
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>() -> <init>
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentManagerState$1 -> androidx.fragment.app.k$1:
    void <init>() -> <init>
    androidx.fragment.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    androidx.fragment.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.fragment.app.FragmentManagerViewModel -> androidx.fragment.app.l:
    androidx.lifecycle.ViewModelProvider$Factory FACTORY -> a
    java.util.HashSet mRetainedFragments -> b
    java.util.HashMap mChildNonConfigs -> c
    java.util.HashMap mViewModelStores -> d
    boolean mStateAutomaticallySaved -> e
    boolean mHasBeenCleared -> f
    boolean mHasSavedSnapshot -> g
    androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore) -> a
    void <init>(boolean) -> <init>
    void onCleared() -> a
    boolean isCleared() -> b
    boolean addRetainedFragment(androidx.fragment.app.Fragment) -> a
    java.util.Collection getRetainedFragments() -> c
    boolean shouldDestroy(androidx.fragment.app.Fragment) -> b
    boolean removeRetainedFragment(androidx.fragment.app.Fragment) -> c
    androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment) -> d
    androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment) -> e
    void clearNonConfigState(androidx.fragment.app.Fragment) -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentManagerViewModel$1 -> androidx.fragment.app.l$1:
    void <init>() -> <init>
    androidx.lifecycle.ViewModel create(java.lang.Class) -> a
androidx.fragment.app.FragmentState -> androidx.fragment.app.m:
    java.lang.String mClassName -> a
    java.lang.String mWho -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mRemoving -> h
    boolean mDetached -> i
    android.os.Bundle mArguments -> j
    boolean mHidden -> k
    int mMaxLifecycleState -> l
    android.os.Bundle mSavedFragmentState -> m
    androidx.fragment.app.Fragment mInstance -> n
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(androidx.fragment.app.Fragment) -> <init>
    void <init>(android.os.Parcel) -> <init>
    androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,androidx.fragment.app.FragmentFactory) -> a
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentState$1 -> androidx.fragment.app.m$1:
    void <init>() -> <init>
    androidx.fragment.app.FragmentState createFromParcel(android.os.Parcel) -> a
    androidx.fragment.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.fragment.app.FragmentTransaction -> androidx.fragment.app.n:
    java.util.ArrayList mOps -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    int mBreadCrumbTitleRes -> n
    java.lang.CharSequence mBreadCrumbTitleText -> o
    int mBreadCrumbShortTitleRes -> p
    java.lang.CharSequence mBreadCrumbShortTitleText -> q
    java.util.ArrayList mSharedElementSourceNames -> r
    java.util.ArrayList mSharedElementTargetNames -> s
    boolean mReorderingAllowed -> t
    java.util.ArrayList mCommitRunnables -> u
    void <init>() -> <init>
    void addOp(androidx.fragment.app.FragmentTransaction$Op) -> a
    androidx.fragment.app.FragmentTransaction add(int,androidx.fragment.app.Fragment,java.lang.String) -> a
    void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int) -> a
    int commit() -> b
androidx.fragment.app.FragmentTransaction$Op -> androidx.fragment.app.n$a:
    int mCmd -> a
    androidx.fragment.app.Fragment mFragment -> b
    int mEnterAnim -> c
    int mExitAnim -> d
    int mPopEnterAnim -> e
    int mPopExitAnim -> f
    androidx.lifecycle.Lifecycle$State mOldMaxState -> g
    androidx.lifecycle.Lifecycle$State mCurrentMaxState -> h
    void <init>() -> <init>
    void <init>(int,androidx.fragment.app.Fragment) -> <init>
androidx.fragment.app.FragmentTransition -> androidx.fragment.app.o:
    int[] INVERSE_OPS -> a
    androidx.fragment.app.FragmentTransitionImpl PLATFORM_IMPL -> b
    androidx.fragment.app.FragmentTransitionImpl SUPPORT_IMPL -> c
    androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl() -> a
    void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean) -> a
    androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int) -> a
    void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap) -> a
    void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList) -> a
    void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap) -> b
    void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList) -> a
    androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment) -> a
    boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List) -> a
    java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean) -> a
    java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean) -> a
    java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean) -> b
    java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object) -> a
    void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection) -> a
    java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object) -> b
    androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition) -> b
    androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition) -> a
    java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String) -> a
    android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean) -> a
    void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord) -> a
    void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap) -> a
    void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean) -> a
    java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View) -> a
    void setViewVisibility(java.util.ArrayList,int) -> a
    java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean) -> a
    void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean) -> a
    void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean) -> b
    void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean) -> a
    androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int) -> a
    void <clinit>() -> <clinit>
androidx.fragment.app.FragmentTransition$1 -> androidx.fragment.app.o$1:
    java.util.ArrayList val$exitingViews -> a
    void <init>(java.util.ArrayList) -> <init>
    void run() -> run
androidx.fragment.app.FragmentTransition$2 -> androidx.fragment.app.o$2:
    java.lang.Object val$enterTransition -> a
    androidx.fragment.app.FragmentTransitionImpl val$impl -> b
    android.view.View val$nonExistentView -> c
    androidx.fragment.app.Fragment val$inFragment -> d
    java.util.ArrayList val$sharedElementsIn -> e
    java.util.ArrayList val$enteringViews -> f
    java.util.ArrayList val$exitingViews -> g
    java.lang.Object val$exitTransition -> h
    void <init>(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object) -> <init>
    void run() -> run
androidx.fragment.app.FragmentTransition$3 -> androidx.fragment.app.o$3:
    androidx.fragment.app.Fragment val$inFragment -> a
    androidx.fragment.app.Fragment val$outFragment -> b
    boolean val$inIsPop -> c
    androidx.collection.ArrayMap val$inSharedElements -> d
    android.view.View val$epicenterView -> e
    androidx.fragment.app.FragmentTransitionImpl val$impl -> f
    android.graphics.Rect val$epicenter -> g
    void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect) -> <init>
    void run() -> run
androidx.fragment.app.FragmentTransition$4 -> androidx.fragment.app.o$4:
    androidx.fragment.app.FragmentTransitionImpl val$impl -> a
    androidx.collection.ArrayMap val$nameOverrides -> b
    java.lang.Object val$finalSharedElementTransition -> c
    androidx.fragment.app.FragmentTransition$FragmentContainerTransition val$fragments -> d
    java.util.ArrayList val$sharedElementsIn -> e
    android.view.View val$nonExistentView -> f
    androidx.fragment.app.Fragment val$inFragment -> g
    androidx.fragment.app.Fragment val$outFragment -> h
    boolean val$inIsPop -> i
    java.util.ArrayList val$sharedElementsOut -> j
    java.lang.Object val$enterTransition -> k
    android.graphics.Rect val$inEpicenter -> l
    void <init>(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect) -> <init>
    void run() -> run
androidx.fragment.app.FragmentTransition$FragmentContainerTransition -> androidx.fragment.app.o$a:
    androidx.fragment.app.Fragment lastIn -> a
    boolean lastInIsPop -> b
    androidx.fragment.app.BackStackRecord lastInTransaction -> c
    androidx.fragment.app.Fragment firstOut -> d
    boolean firstOutIsPop -> e
    androidx.fragment.app.BackStackRecord firstOutTransaction -> f
    void <init>() -> <init>
androidx.fragment.app.FragmentTransitionCompat21 -> androidx.fragment.app.p:
    void <init>() -> <init>
    boolean canHandle(java.lang.Object) -> a
    java.lang.Object cloneTransition(java.lang.Object) -> b
    java.lang.Object wrapTransitionInSet(java.lang.Object) -> c
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList) -> a
    void setEpicenter(java.lang.Object,android.view.View) -> a
    void addTargets(java.lang.Object,java.util.ArrayList) -> a
    boolean hasSimpleTarget(android.transition.Transition) -> a
    java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList) -> b
    java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object) -> a
    void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList) -> a
    void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> a
    void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> b
    void addTarget(java.lang.Object,android.view.View) -> b
    void removeTarget(java.lang.Object,android.view.View) -> c
    void setEpicenter(java.lang.Object,android.graphics.Rect) -> a
androidx.fragment.app.FragmentTransitionCompat21$1 -> androidx.fragment.app.p$1:
    android.graphics.Rect val$epicenter -> a
    androidx.fragment.app.FragmentTransitionCompat21 this$0 -> b
    void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect) -> <init>
    android.graphics.Rect onGetEpicenter(android.transition.Transition) -> onGetEpicenter
androidx.fragment.app.FragmentTransitionCompat21$2 -> androidx.fragment.app.p$2:
    android.view.View val$fragmentView -> a
    java.util.ArrayList val$exitingViews -> b
    androidx.fragment.app.FragmentTransitionCompat21 this$0 -> c
    void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList) -> <init>
    void onTransitionStart(android.transition.Transition) -> onTransitionStart
    void onTransitionEnd(android.transition.Transition) -> onTransitionEnd
    void onTransitionCancel(android.transition.Transition) -> onTransitionCancel
    void onTransitionPause(android.transition.Transition) -> onTransitionPause
    void onTransitionResume(android.transition.Transition) -> onTransitionResume
androidx.fragment.app.FragmentTransitionCompat21$3 -> androidx.fragment.app.p$3:
    java.lang.Object val$enterTransition -> a
    java.util.ArrayList val$enteringViews -> b
    java.lang.Object val$exitTransition -> c
    java.util.ArrayList val$exitingViews -> d
    java.lang.Object val$sharedElementTransition -> e
    java.util.ArrayList val$sharedElementsIn -> f
    androidx.fragment.app.FragmentTransitionCompat21 this$0 -> g
    void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList) -> <init>
    void onTransitionStart(android.transition.Transition) -> onTransitionStart
    void onTransitionEnd(android.transition.Transition) -> onTransitionEnd
    void onTransitionCancel(android.transition.Transition) -> onTransitionCancel
    void onTransitionPause(android.transition.Transition) -> onTransitionPause
    void onTransitionResume(android.transition.Transition) -> onTransitionResume
androidx.fragment.app.FragmentTransitionCompat21$4 -> androidx.fragment.app.p$4:
    android.graphics.Rect val$epicenter -> a
    androidx.fragment.app.FragmentTransitionCompat21 this$0 -> b
    void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect) -> <init>
    android.graphics.Rect onGetEpicenter(android.transition.Transition) -> onGetEpicenter
androidx.fragment.app.FragmentTransitionImpl -> androidx.fragment.app.q:
    void <init>() -> <init>
    boolean canHandle(java.lang.Object) -> a
    java.lang.Object cloneTransition(java.lang.Object) -> b
    java.lang.Object wrapTransitionInSet(java.lang.Object) -> c
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList) -> a
    void setEpicenter(java.lang.Object,android.view.View) -> a
    void getBoundsOnScreen(android.view.View,android.graphics.Rect) -> a
    void addTargets(java.lang.Object,java.util.ArrayList) -> a
    java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList) -> b
    java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object) -> a
    java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList) -> a
    void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map) -> a
    void captureTransitioningViews(java.util.ArrayList,android.view.View) -> a
    void findNamedViews(java.util.Map,android.view.View) -> a
    void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map) -> a
    void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList) -> a
    void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> a
    void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> b
    void addTarget(java.lang.Object,android.view.View) -> b
    void removeTarget(java.lang.Object,android.view.View) -> c
    void setEpicenter(java.lang.Object,android.graphics.Rect) -> a
    void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map) -> a
    void bfsAddViewChildren(java.util.List,android.view.View) -> a
    boolean containedBeforeIndex(java.util.List,android.view.View,int) -> a
    boolean isNullOrEmpty(java.util.List) -> a
    java.lang.String findKeyForValue(java.util.Map,java.lang.String) -> a
androidx.fragment.app.FragmentTransitionImpl$1 -> androidx.fragment.app.q$1:
    int val$numSharedElements -> a
    java.util.ArrayList val$sharedElementsIn -> b
    java.util.ArrayList val$inNames -> c
    java.util.ArrayList val$sharedElementsOut -> d
    java.util.ArrayList val$outNames -> e
    androidx.fragment.app.FragmentTransitionImpl this$0 -> f
    void <init>(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> <init>
    void run() -> run
androidx.fragment.app.FragmentTransitionImpl$2 -> androidx.fragment.app.q$2:
    java.util.ArrayList val$sharedElementsIn -> a
    java.util.Map val$nameOverrides -> b
    androidx.fragment.app.FragmentTransitionImpl this$0 -> c
    void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map) -> <init>
    void run() -> run
androidx.fragment.app.FragmentTransitionImpl$3 -> androidx.fragment.app.q$3:
    java.util.ArrayList val$sharedElementsIn -> a
    java.util.Map val$nameOverrides -> b
    androidx.fragment.app.FragmentTransitionImpl this$0 -> c
    void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map) -> <init>
    void run() -> run
androidx.fragment.app.FragmentViewLifecycleOwner -> androidx.fragment.app.r:
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> a
    void <init>() -> <init>
    void initialize() -> a
    boolean isInitialized() -> b
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event) -> a
androidx.fragment.app.SuperNotCalledException -> androidx.fragment.app.s:
    void <init>(java.lang.String) -> <init>
androidx.lifecycle.ClassesInfoCache -> androidx.lifecycle.a:
    androidx.lifecycle.ClassesInfoCache sInstance -> a
    java.util.Map mCallbackMap -> b
    java.util.Map mHasLifecycleMethods -> c
    void <init>() -> <init>
    boolean hasLifecycleMethods(java.lang.Class) -> a
    java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class) -> c
    androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class) -> b
    void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class) -> a
    androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[]) -> a
    void <clinit>() -> <clinit>
androidx.lifecycle.ClassesInfoCache$CallbackInfo -> androidx.lifecycle.a$a:
    java.util.Map mEventToHandlers -> a
    java.util.Map mHandlerToEvent -> b
    void <init>(java.util.Map) -> <init>
    void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object) -> a
    void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object) -> a
androidx.lifecycle.ClassesInfoCache$MethodReference -> androidx.lifecycle.a$b:
    int mCallType -> a
    java.lang.reflect.Method mMethod -> b
    void <init>(int,java.lang.reflect.Method) -> <init>
    void invokeCallback(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
androidx.lifecycle.CompositeGeneratedAdaptersObserver -> androidx.lifecycle.CompositeGeneratedAdaptersObserver:
    androidx.lifecycle.GeneratedAdapter[] mGeneratedAdapters -> a
    void <init>(androidx.lifecycle.GeneratedAdapter[]) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.FullLifecycleObserver -> androidx.lifecycle.b:
    void onCreate(androidx.lifecycle.LifecycleOwner) -> a
    void onStart(androidx.lifecycle.LifecycleOwner) -> b
    void onResume(androidx.lifecycle.LifecycleOwner) -> c
    void onPause(androidx.lifecycle.LifecycleOwner) -> d
    void onStop(androidx.lifecycle.LifecycleOwner) -> e
    void onDestroy(androidx.lifecycle.LifecycleOwner) -> f
androidx.lifecycle.FullLifecycleObserverAdapter -> androidx.lifecycle.FullLifecycleObserverAdapter:
    androidx.lifecycle.FullLifecycleObserver mFullLifecycleObserver -> a
    androidx.lifecycle.LifecycleEventObserver mLifecycleEventObserver -> b
    void <init>(androidx.lifecycle.FullLifecycleObserver,androidx.lifecycle.LifecycleEventObserver) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.FullLifecycleObserverAdapter$1 -> androidx.lifecycle.FullLifecycleObserverAdapter$1:
    int[] $SwitchMap$androidx$lifecycle$Lifecycle$Event -> a
    void <clinit>() -> <clinit>
androidx.lifecycle.GeneratedAdapter -> androidx.lifecycle.c:
    void callMethods(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,boolean,androidx.lifecycle.MethodCallsLogger) -> a
androidx.lifecycle.GenericLifecycleObserver -> androidx.lifecycle.d:
androidx.lifecycle.Lifecycle -> androidx.lifecycle.e:
    java.util.concurrent.atomic.AtomicReference mInternalScopeRef -> a
    void <init>() -> <init>
    void addObserver(androidx.lifecycle.LifecycleObserver) -> a
    void removeObserver(androidx.lifecycle.LifecycleObserver) -> b
    androidx.lifecycle.Lifecycle$State getCurrentState() -> a
androidx.lifecycle.Lifecycle$Event -> androidx.lifecycle.e$a:
    androidx.lifecycle.Lifecycle$Event ON_CREATE -> ON_CREATE
    androidx.lifecycle.Lifecycle$Event ON_START -> ON_START
    androidx.lifecycle.Lifecycle$Event ON_RESUME -> ON_RESUME
    androidx.lifecycle.Lifecycle$Event ON_PAUSE -> ON_PAUSE
    androidx.lifecycle.Lifecycle$Event ON_STOP -> ON_STOP
    androidx.lifecycle.Lifecycle$Event ON_DESTROY -> ON_DESTROY
    androidx.lifecycle.Lifecycle$Event ON_ANY -> ON_ANY
    androidx.lifecycle.Lifecycle$Event[] $VALUES -> $VALUES
    androidx.lifecycle.Lifecycle$Event[] values() -> values
    androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
androidx.lifecycle.Lifecycle$State -> androidx.lifecycle.e$b:
    androidx.lifecycle.Lifecycle$State DESTROYED -> a
    androidx.lifecycle.Lifecycle$State INITIALIZED -> b
    androidx.lifecycle.Lifecycle$State CREATED -> c
    androidx.lifecycle.Lifecycle$State STARTED -> d
    androidx.lifecycle.Lifecycle$State RESUMED -> e
    androidx.lifecycle.Lifecycle$State[] $VALUES -> f
    androidx.lifecycle.Lifecycle$State[] values() -> values
    androidx.lifecycle.Lifecycle$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isAtLeast(androidx.lifecycle.Lifecycle$State) -> a
    void <clinit>() -> <clinit>
androidx.lifecycle.LifecycleEventObserver -> androidx.lifecycle.f:
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.LifecycleObserver -> androidx.lifecycle.g:
androidx.lifecycle.LifecycleOwner -> androidx.lifecycle.h:
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
androidx.lifecycle.LifecycleRegistry -> androidx.lifecycle.i:
    androidx.arch.core.internal.FastSafeIterableMap mObserverMap -> b
    androidx.lifecycle.Lifecycle$State mState -> c
    java.lang.ref.WeakReference mLifecycleOwner -> d
    int mAddingObserverCounter -> e
    boolean mHandlingEvent -> f
    boolean mNewEventOccurred -> g
    java.util.ArrayList mParentStates -> h
    void <init>(androidx.lifecycle.LifecycleOwner) -> <init>
    void markState(androidx.lifecycle.Lifecycle$State) -> a
    void setCurrentState(androidx.lifecycle.Lifecycle$State) -> b
    void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event) -> a
    void moveToState(androidx.lifecycle.Lifecycle$State) -> c
    boolean isSynced() -> b
    androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver) -> c
    void addObserver(androidx.lifecycle.LifecycleObserver) -> a
    void popParentState() -> c
    void pushParentState(androidx.lifecycle.Lifecycle$State) -> d
    void removeObserver(androidx.lifecycle.LifecycleObserver) -> b
    androidx.lifecycle.Lifecycle$State getCurrentState() -> a
    androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event) -> b
    androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State) -> e
    androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State) -> f
    void forwardPass(androidx.lifecycle.LifecycleOwner) -> a
    void backwardPass(androidx.lifecycle.LifecycleOwner) -> b
    void sync() -> d
    androidx.lifecycle.Lifecycle$State min(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State) -> a
androidx.lifecycle.LifecycleRegistry$1 -> androidx.lifecycle.i$1:
    int[] $SwitchMap$androidx$lifecycle$Lifecycle$Event -> a
    int[] $SwitchMap$androidx$lifecycle$Lifecycle$State -> b
    void <clinit>() -> <clinit>
androidx.lifecycle.LifecycleRegistry$ObserverWithState -> androidx.lifecycle.i$a:
    androidx.lifecycle.Lifecycle$State mState -> a
    androidx.lifecycle.LifecycleEventObserver mLifecycleObserver -> b
    void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State) -> <init>
    void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.LifecycleRegistryOwner -> androidx.lifecycle.j:
    androidx.lifecycle.LifecycleRegistry getLifecycle() -> a
androidx.lifecycle.Lifecycling -> androidx.lifecycle.k:
    java.util.Map sCallbackCache -> a
    java.util.Map sClassToAdapters -> b
    androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object) -> a
    androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object) -> a
    java.lang.reflect.Constructor generatedConstructor(java.lang.Class) -> a
    int getObserverConstructorType(java.lang.Class) -> b
    int resolveObserverCallbackType(java.lang.Class) -> c
    boolean isLifecycleParent(java.lang.Class) -> d
    java.lang.String getAdapterName(java.lang.String) -> a
    void <clinit>() -> <clinit>
androidx.lifecycle.Lifecycling$1 -> androidx.lifecycle.Lifecycling$1:
    androidx.lifecycle.LifecycleEventObserver val$observer -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.LiveData -> androidx.lifecycle.LiveData:
    java.lang.Object mDataLock -> a
    java.lang.Object NOT_SET -> b
    androidx.arch.core.internal.SafeIterableMap mObservers -> e
    int mActiveCount -> c
    java.lang.Object mData -> f
    java.lang.Object mPendingData -> d
    int mVersion -> g
    boolean mDispatchingValue -> h
    boolean mDispatchInvalidated -> i
    java.lang.Runnable mPostValueRunnable -> j
    void <init>() -> <init>
    void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper) -> b
    void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper) -> a
    void observe(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer) -> a
    void removeObserver(androidx.lifecycle.Observer) -> a
    void setValue(java.lang.Object) -> a
    java.lang.Object getValue() -> a
    void onActive() -> b
    void onInactive() -> c
    boolean hasActiveObservers() -> d
    void assertMainThread(java.lang.String) -> a
    void <clinit>() -> <clinit>
androidx.lifecycle.LiveData$1 -> androidx.lifecycle.LiveData$1:
    androidx.lifecycle.LiveData this$0 -> a
    void <init>(androidx.lifecycle.LiveData) -> <init>
    void run() -> run
androidx.lifecycle.LiveData$LifecycleBoundObserver -> androidx.lifecycle.LiveData$LifecycleBoundObserver:
    androidx.lifecycle.LifecycleOwner mOwner -> a
    androidx.lifecycle.LiveData this$0 -> b
    void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer) -> <init>
    boolean shouldBeActive() -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
    boolean isAttachedTo(androidx.lifecycle.LifecycleOwner) -> a
    void detachObserver() -> b
androidx.lifecycle.LiveData$ObserverWrapper -> androidx.lifecycle.LiveData$a:
    androidx.lifecycle.Observer mObserver -> c
    boolean mActive -> d
    int mLastVersion -> e
    androidx.lifecycle.LiveData this$0 -> f
    void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.Observer) -> <init>
    boolean shouldBeActive() -> a
    boolean isAttachedTo(androidx.lifecycle.LifecycleOwner) -> a
    void detachObserver() -> b
    void activeStateChanged(boolean) -> a
androidx.lifecycle.MethodCallsLogger -> androidx.lifecycle.l:
    java.util.Map mCalledMethods -> a
    void <init>() -> <init>
androidx.lifecycle.MutableLiveData -> androidx.lifecycle.m:
    void <init>() -> <init>
    void setValue(java.lang.Object) -> a
androidx.lifecycle.Observer -> androidx.lifecycle.n:
    void onChanged(java.lang.Object) -> a
androidx.lifecycle.OnLifecycleEvent -> androidx.lifecycle.o:
    androidx.lifecycle.Lifecycle$Event value() -> a
androidx.lifecycle.ReflectiveGenericLifecycleObserver -> androidx.lifecycle.ReflectiveGenericLifecycleObserver:
    java.lang.Object mWrapped -> a
    androidx.lifecycle.ClassesInfoCache$CallbackInfo mInfo -> b
    void <init>(java.lang.Object) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ReportFragment -> androidx.lifecycle.p:
    androidx.lifecycle.ReportFragment$ActivityInitializationListener mProcessListener -> a
    void <init>() -> <init>
    void injectIfNeededIn(android.app.Activity) -> a
    void dispatch(android.app.Activity,androidx.lifecycle.Lifecycle$Event) -> a
    void dispatchCreate(androidx.lifecycle.ReportFragment$ActivityInitializationListener) -> a
    void dispatchStart(androidx.lifecycle.ReportFragment$ActivityInitializationListener) -> b
    void dispatchResume(androidx.lifecycle.ReportFragment$ActivityInitializationListener) -> c
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void dispatch(androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ReportFragment$ActivityInitializationListener -> androidx.lifecycle.p$a:
    void onCreate() -> a
    void onStart() -> b
    void onResume() -> c
androidx.lifecycle.ReportFragment$LifecycleCallbacks -> androidx.lifecycle.p$b:
    void <init>() -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityPostCreated(android.app.Activity,android.os.Bundle) -> onActivityPostCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityPostStarted(android.app.Activity) -> onActivityPostStarted
    void onActivityResumed(android.app.Activity) -> onActivityResumed
    void onActivityPostResumed(android.app.Activity) -> onActivityPostResumed
    void onActivityPrePaused(android.app.Activity) -> onActivityPrePaused
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityPreStopped(android.app.Activity) -> onActivityPreStopped
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityPreDestroyed(android.app.Activity) -> onActivityPreDestroyed
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
androidx.lifecycle.SingleGeneratedAdapterObserver -> androidx.lifecycle.SingleGeneratedAdapterObserver:
    androidx.lifecycle.GeneratedAdapter mGeneratedAdapter -> a
    void <init>(androidx.lifecycle.GeneratedAdapter) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ViewModel -> androidx.lifecycle.q:
    java.util.Map mBagOfTags -> a
    boolean mCleared -> b
    void <init>() -> <init>
    void onCleared() -> a
    void clear() -> d
    void closeWithRuntimeException(java.lang.Object) -> a
androidx.lifecycle.ViewModelProvider -> androidx.lifecycle.r:
    androidx.lifecycle.ViewModelProvider$Factory mFactory -> a
    androidx.lifecycle.ViewModelStore mViewModelStore -> b
    void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory) -> <init>
    androidx.lifecycle.ViewModel get(java.lang.Class) -> a
    androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class) -> a
androidx.lifecycle.ViewModelProvider$Factory -> androidx.lifecycle.r$a:
    androidx.lifecycle.ViewModel create(java.lang.Class) -> a
androidx.lifecycle.ViewModelProvider$KeyedFactory -> androidx.lifecycle.r$b:
    void <init>() -> <init>
    androidx.lifecycle.ViewModel create(java.lang.String,java.lang.Class) -> a
androidx.lifecycle.ViewModelStore -> androidx.lifecycle.s:
    java.util.HashMap mMap -> a
    void <init>() -> <init>
    void put(java.lang.String,androidx.lifecycle.ViewModel) -> a
    androidx.lifecycle.ViewModel get(java.lang.String) -> a
    void clear() -> a
androidx.lifecycle.ViewModelStoreOwner -> androidx.lifecycle.t:
    androidx.lifecycle.ViewModelStore getViewModelStore() -> getViewModelStore
androidx.loader.app.LoaderManager -> androidx.c.a.a:
    void <init>() -> <init>
    androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner) -> a
    void markForRedelivery() -> a
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
androidx.loader.app.LoaderManager$LoaderCallbacks -> androidx.c.a.a$a:
    void onLoadFinished(androidx.loader.content.Loader,java.lang.Object) -> a
    void onLoaderReset(androidx.loader.content.Loader) -> a
androidx.loader.app.LoaderManagerImpl -> androidx.c.a.b:
    boolean DEBUG -> a
    androidx.lifecycle.LifecycleOwner mLifecycleOwner -> b
    androidx.loader.app.LoaderManagerImpl$LoaderViewModel mLoaderViewModel -> c
    void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore) -> <init>
    void markForRedelivery() -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void <clinit>() -> <clinit>
androidx.loader.app.LoaderManagerImpl$LoaderInfo -> androidx.c.a.b$a:
    int mId -> e
    android.os.Bundle mArgs -> f
    androidx.loader.content.Loader mLoader -> g
    androidx.lifecycle.LifecycleOwner mLifecycleOwner -> h
    androidx.loader.app.LoaderManagerImpl$LoaderObserver mObserver -> i
    androidx.loader.content.Loader mPriorLoader -> j
    androidx.loader.content.Loader getLoader() -> e
    void onActive() -> b
    void onInactive() -> c
    void markForRedelivery() -> f
    void removeObserver(androidx.lifecycle.Observer) -> a
    androidx.loader.content.Loader destroy(boolean) -> a
    void setValue(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
androidx.loader.app.LoaderManagerImpl$LoaderObserver -> androidx.c.a.b$b:
    androidx.loader.content.Loader mLoader -> a
    androidx.loader.app.LoaderManager$LoaderCallbacks mCallback -> b
    boolean mDeliveredData -> c
    void onChanged(java.lang.Object) -> a
    boolean hasDeliveredData() -> a
    void reset() -> b
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.PrintWriter) -> a
androidx.loader.app.LoaderManagerImpl$LoaderViewModel -> androidx.c.a.b$c:
    androidx.lifecycle.ViewModelProvider$Factory FACTORY -> a
    androidx.collection.SparseArrayCompat mLoaders -> b
    boolean mCreatingLoader -> c
    void <init>() -> <init>
    androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore) -> a
    void markForRedelivery() -> b
    void onCleared() -> a
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void <clinit>() -> <clinit>
androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1 -> androidx.c.a.b$c$1:
    void <init>() -> <init>
    androidx.lifecycle.ViewModel create(java.lang.Class) -> a
androidx.loader.content.Loader -> androidx.c.b.a:
    int mId -> a
    androidx.loader.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void unregisterListener(androidx.loader.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    boolean cancelLoad() -> c
    boolean onCancelLoad() -> d
    void stopLoading() -> e
    void onStopLoading() -> f
    void abandon() -> g
    void onAbandon() -> h
    void reset() -> i
    void onReset() -> j
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
androidx.loader.content.Loader$OnLoadCompleteListener -> androidx.c.b.a$a:
androidx.savedstate.Recreator -> androidx.savedstate.Recreator:
    androidx.savedstate.SavedStateRegistryOwner mOwner -> a
    void <init>(androidx.savedstate.SavedStateRegistryOwner) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
    void reflectiveNew(java.lang.String) -> a
androidx.savedstate.SavedStateRegistry -> androidx.savedstate.a:
    androidx.arch.core.internal.SafeIterableMap mComponents -> b
    android.os.Bundle mRestoredState -> c
    boolean mRestored -> d
    boolean mAllowingSavingState -> a
    void <init>() -> <init>
    android.os.Bundle consumeRestoredStateForKey(java.lang.String) -> a
    void performRestore(androidx.lifecycle.Lifecycle,android.os.Bundle) -> a
    void performSave(android.os.Bundle) -> a
androidx.savedstate.SavedStateRegistry$1 -> androidx.savedstate.SavedStateRegistry$1:
    androidx.savedstate.SavedStateRegistry this$0 -> a
    void <init>(androidx.savedstate.SavedStateRegistry) -> <init>
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.savedstate.SavedStateRegistry$AutoRecreated -> androidx.savedstate.a$a:
    void onRecreated(androidx.savedstate.SavedStateRegistryOwner) -> a
androidx.savedstate.SavedStateRegistry$SavedStateProvider -> androidx.savedstate.a$b:
    android.os.Bundle saveState() -> a
androidx.savedstate.SavedStateRegistryController -> androidx.savedstate.b:
    androidx.savedstate.SavedStateRegistryOwner mOwner -> a
    androidx.savedstate.SavedStateRegistry mRegistry -> b
    void <init>(androidx.savedstate.SavedStateRegistryOwner) -> <init>
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry() -> a
    void performRestore(android.os.Bundle) -> a
    void performSave(android.os.Bundle) -> b
    androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner) -> a
androidx.savedstate.SavedStateRegistryOwner -> androidx.savedstate.c:
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry() -> getSavedStateRegistry
androidx.versionedparcelable.CustomVersionedParcelable -> androidx.versionedparcelable.CustomVersionedParcelable:
    void <init>() -> <init>
    void onPreParceling(boolean) -> a
    void onPostParceling() -> c
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.ParcelImpl$1:
    void <init>() -> <init>
    androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel) -> a
    androidx.versionedparcelable.ParcelImpl[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.a:
    androidx.collection.ArrayMap mReadCache -> a
    androidx.collection.ArrayMap mWriteCache -> b
    androidx.collection.ArrayMap mParcelizerCache -> c
    void <init>(androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap) -> <init>
    boolean isStream() -> a
    void closeField() -> b
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> c
    void writeByteArray(byte[]) -> a
    void writeCharSequence(java.lang.CharSequence) -> a
    void writeInt(int) -> a
    void writeString(java.lang.String) -> a
    void writeParcelable(android.os.Parcelable) -> a
    void writeBoolean(boolean) -> a
    int readInt() -> d
    java.lang.String readString() -> e
    byte[] readByteArray() -> f
    java.lang.CharSequence readCharSequence() -> g
    android.os.Parcelable readParcelable() -> h
    boolean readBoolean() -> i
    boolean readField(int) -> b
    void setOutputField(int) -> c
    void setSerializationFlags(boolean,boolean) -> a
    void writeBoolean(boolean,int) -> a
    void writeByteArray(byte[],int) -> a
    void writeCharSequence(java.lang.CharSequence,int) -> a
    void writeInt(int,int) -> a
    void writeString(java.lang.String,int) -> a
    void writeParcelable(android.os.Parcelable,int) -> a
    boolean readBoolean(boolean,int) -> b
    int readInt(int,int) -> b
    java.lang.String readString(java.lang.String,int) -> b
    byte[] readByteArray(byte[],int) -> b
    android.os.Parcelable readParcelable(android.os.Parcelable,int) -> b
    java.lang.CharSequence readCharSequence(java.lang.CharSequence,int) -> b
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> a
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable) -> a
    void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable) -> b
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> b
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable() -> j
    androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel) -> a
    void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel) -> a
    java.lang.reflect.Method getReadMethod(java.lang.String) -> b
    java.lang.reflect.Method getWriteMethod(java.lang.Class) -> a
    java.lang.Class findParcelClass(java.lang.Class) -> b
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.b:
    android.util.SparseIntArray mPositionLookup -> d
    android.os.Parcel mParcel -> e
    int mOffset -> f
    int mEnd -> g
    java.lang.String mPrefix -> h
    int mCurrentField -> i
    int mNextRead -> j
    int mFieldId -> k
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcel,int,int,java.lang.String,androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap) -> <init>
    boolean readField(int) -> b
    void setOutputField(int) -> c
    void closeField() -> b
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> c
    void writeByteArray(byte[]) -> a
    void writeInt(int) -> a
    void writeString(java.lang.String) -> a
    void writeParcelable(android.os.Parcelable) -> a
    void writeBoolean(boolean) -> a
    void writeCharSequence(java.lang.CharSequence) -> a
    java.lang.CharSequence readCharSequence() -> g
    int readInt() -> d
    java.lang.String readString() -> e
    byte[] readByteArray() -> f
    android.os.Parcelable readParcelable() -> h
    boolean readBoolean() -> i
androidx.versionedparcelable.VersionedParcelable -> androidx.versionedparcelable.c:
io.flutter.BuildConfig -> io.flutter.BuildConfig:
    boolean DEBUG -> DEBUG
    boolean PROFILE -> PROFILE
    boolean RELEASE -> RELEASE
    boolean JIT_RELEASE -> JIT_RELEASE
    void <init>() -> <init>
io.flutter.FlutterInjector -> io.flutter.FlutterInjector:
    io.flutter.FlutterInjector instance -> instance
    boolean accessed -> accessed
    io.flutter.embedding.engine.loader.FlutterLoader flutterLoader -> flutterLoader
    io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager -> deferredComponentManager
    io.flutter.embedding.engine.FlutterJNI$Factory flutterJniFactory -> flutterJniFactory
    void setInstance(io.flutter.FlutterInjector) -> setInstance
    io.flutter.FlutterInjector instance() -> instance
    void reset() -> reset
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager,io.flutter.embedding.engine.FlutterJNI$Factory) -> <init>
    io.flutter.embedding.engine.loader.FlutterLoader flutterLoader() -> flutterLoader
    io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager() -> deferredComponentManager
    io.flutter.embedding.engine.FlutterJNI$Factory getFlutterJNIFactory() -> getFlutterJNIFactory
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager,io.flutter.embedding.engine.FlutterJNI$Factory,io.flutter.FlutterInjector$1) -> <init>
io.flutter.FlutterInjector$1 -> io.flutter.FlutterInjector$1:
io.flutter.FlutterInjector$Builder -> io.flutter.FlutterInjector$Builder:
    io.flutter.embedding.engine.loader.FlutterLoader flutterLoader -> flutterLoader
    io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager -> deferredComponentManager
    io.flutter.embedding.engine.FlutterJNI$Factory flutterJniFactory -> flutterJniFactory
    void <init>() -> <init>
    io.flutter.FlutterInjector$Builder setFlutterLoader(io.flutter.embedding.engine.loader.FlutterLoader) -> setFlutterLoader
    io.flutter.FlutterInjector$Builder setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager) -> setDeferredComponentManager
    io.flutter.FlutterInjector$Builder setFlutterJNIFactory(io.flutter.embedding.engine.FlutterJNI$Factory) -> setFlutterJNIFactory
    void fillDefaults() -> fillDefaults
    io.flutter.FlutterInjector build() -> build
io.flutter.Log -> io.flutter.Log:
    int logLevel -> logLevel
    int ASSERT -> ASSERT
    int DEBUG -> DEBUG
    int ERROR -> ERROR
    int INFO -> INFO
    int VERBOSE -> VERBOSE
    int WARN -> WARN
    void <init>() -> <init>
    void setLogLevel(int) -> setLogLevel
    void println(int,java.lang.String,java.lang.String) -> println
    void v(java.lang.String,java.lang.String) -> v
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void i(java.lang.String,java.lang.String) -> i
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void wtf(java.lang.String,java.lang.String) -> wtf
    void wtf(java.lang.String,java.lang.String,java.lang.Throwable) -> wtf
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivity -> io.flutter.app.FlutterActivity:
    java.lang.String TAG -> TAG
    io.flutter.app.FlutterActivityDelegate delegate -> delegate
    io.flutter.app.FlutterActivityEvents eventDelegate -> eventDelegate
    io.flutter.view.FlutterView$Provider viewProvider -> viewProvider
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> pluginRegistry
    void <init>() -> <init>
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> createFlutterView
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> createFlutterNativeView
    boolean retainFlutterNativeView() -> retainFlutterNativeView
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterActivityDelegate -> io.flutter.app.FlutterActivityDelegate:
    java.lang.String SPLASH_SCREEN_META_DATA_KEY -> SPLASH_SCREEN_META_DATA_KEY
    java.lang.String TAG -> TAG
    android.view.WindowManager$LayoutParams matchParent -> matchParent
    android.app.Activity activity -> activity
    io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory -> viewFactory
    io.flutter.view.FlutterView flutterView -> flutterView
    android.view.View launchView -> launchView
    void <init>(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory) -> <init>
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean isDebuggable() -> isDebuggable
    void onPause() -> onPause
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    void onPostResume() -> onPostResume
    void onDestroy() -> onDestroy
    boolean onBackPressed() -> onBackPressed
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    java.lang.String[] getArgsFromIntent(android.content.Intent) -> getArgsFromIntent
    boolean loadIntent(android.content.Intent) -> loadIntent
    void runBundle(java.lang.String) -> runBundle
    android.view.View createLaunchView() -> createLaunchView
    android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme() -> getLaunchScreenDrawableFromActivityTheme
    java.lang.Boolean showSplashScreenUntilFirstFrame() -> showSplashScreenUntilFirstFrame
    void addLaunchView() -> addLaunchView
    android.view.View access$000(io.flutter.app.FlutterActivityDelegate) -> access$000
    android.view.View access$002(io.flutter.app.FlutterActivityDelegate,android.view.View) -> access$002
    io.flutter.view.FlutterView access$100(io.flutter.app.FlutterActivityDelegate) -> access$100
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivityDelegate$1 -> io.flutter.app.FlutterActivityDelegate$1:
    io.flutter.app.FlutterActivityDelegate this$0 -> this$0
    void <init>(io.flutter.app.FlutterActivityDelegate) -> <init>
    void onFirstFrame() -> onFirstFrame
io.flutter.app.FlutterActivityDelegate$1$1 -> io.flutter.app.FlutterActivityDelegate$1$1:
    io.flutter.app.FlutterActivityDelegate$1 this$1 -> this$1
    void <init>(io.flutter.app.FlutterActivityDelegate$1) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
io.flutter.app.FlutterActivityDelegate$ViewFactory -> io.flutter.app.FlutterActivityDelegate$ViewFactory:
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> createFlutterView
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> createFlutterNativeView
    boolean retainFlutterNativeView() -> retainFlutterNativeView
io.flutter.app.FlutterActivityEvents -> io.flutter.app.FlutterActivityEvents:
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPause() -> onPause
    void onStart() -> onStart
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onDestroy() -> onDestroy
    void onStop() -> onStop
    boolean onBackPressed() -> onBackPressed
    void onUserLeaveHint() -> onUserLeaveHint
io.flutter.app.FlutterApplication -> io.flutter.app.FlutterApplication:
    android.app.Activity mCurrentActivity -> mCurrentActivity
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.app.Activity getCurrentActivity() -> getCurrentActivity
    void setCurrentActivity(android.app.Activity) -> setCurrentActivity
io.flutter.app.FlutterFragmentActivity -> io.flutter.app.FlutterFragmentActivity:
    io.flutter.app.FlutterActivityDelegate delegate -> delegate
    io.flutter.app.FlutterActivityEvents eventDelegate -> eventDelegate
    io.flutter.view.FlutterView$Provider viewProvider -> viewProvider
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> pluginRegistry
    void <init>() -> <init>
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> createFlutterView
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> createFlutterNativeView
    boolean retainFlutterNativeView() -> retainFlutterNativeView
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStart() -> onStart
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterPlayStoreSplitApplication -> io.flutter.app.FlutterPlayStoreSplitApplication:
    void <init>() -> <init>
    void onCreate() -> onCreate
io.flutter.app.FlutterPluginRegistry -> io.flutter.app.FlutterPluginRegistry:
    java.lang.String TAG -> TAG
    android.app.Activity mActivity -> mActivity
    android.content.Context mAppContext -> mAppContext
    io.flutter.view.FlutterNativeView mNativeView -> mNativeView
    io.flutter.view.FlutterView mFlutterView -> mFlutterView
    io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController -> mPlatformViewsController
    java.util.Map mPluginMap -> mPluginMap
    java.util.List mRequestPermissionsResultListeners -> mRequestPermissionsResultListeners
    java.util.List mActivityResultListeners -> mActivityResultListeners
    java.util.List mNewIntentListeners -> mNewIntentListeners
    java.util.List mUserLeaveHintListeners -> mUserLeaveHintListeners
    java.util.List mViewDestroyListeners -> mViewDestroyListeners
    void <init>(io.flutter.view.FlutterNativeView,android.content.Context) -> <init>
    void <init>(io.flutter.embedding.engine.FlutterEngine,android.content.Context) -> <init>
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    void attach(io.flutter.view.FlutterView,android.app.Activity) -> attach
    void detach() -> detach
    void onPreEngineRestart() -> onPreEngineRestart
    io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController() -> getPlatformViewsController
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> onViewDestroy
    void destroy() -> destroy
    android.app.Activity access$000(io.flutter.app.FlutterPluginRegistry) -> access$000
    android.content.Context access$100(io.flutter.app.FlutterPluginRegistry) -> access$100
    io.flutter.view.FlutterNativeView access$200(io.flutter.app.FlutterPluginRegistry) -> access$200
    io.flutter.view.FlutterView access$300(io.flutter.app.FlutterPluginRegistry) -> access$300
    io.flutter.plugin.platform.PlatformViewsController access$400(io.flutter.app.FlutterPluginRegistry) -> access$400
    java.util.Map access$500(io.flutter.app.FlutterPluginRegistry) -> access$500
    java.util.List access$600(io.flutter.app.FlutterPluginRegistry) -> access$600
    java.util.List access$700(io.flutter.app.FlutterPluginRegistry) -> access$700
    java.util.List access$800(io.flutter.app.FlutterPluginRegistry) -> access$800
    java.util.List access$900(io.flutter.app.FlutterPluginRegistry) -> access$900
    java.util.List access$1000(io.flutter.app.FlutterPluginRegistry) -> access$1000
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar -> io.flutter.app.FlutterPluginRegistry$FlutterRegistrar:
    java.lang.String pluginKey -> pluginKey
    io.flutter.app.FlutterPluginRegistry this$0 -> this$0
    void <init>(io.flutter.app.FlutterPluginRegistry,java.lang.String) -> <init>
    android.app.Activity activity() -> activity
    android.content.Context context() -> context
    android.content.Context activeContext() -> activeContext
    io.flutter.plugin.common.BinaryMessenger messenger() -> messenger
    io.flutter.view.TextureRegistry textures() -> textures
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> platformViewRegistry
    io.flutter.view.FlutterView view() -> view
    java.lang.String lookupKeyForAsset(java.lang.String) -> lookupKeyForAsset
    java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String) -> lookupKeyForAsset
    io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object) -> publish
    io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addNewIntentListener
    io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addUserLeaveHintListener
    io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener) -> addViewDestroyListener
io.flutter.embedding.android.AndroidTouchProcessor -> io.flutter.embedding.android.AndroidTouchProcessor:
    int POINTER_DATA_FIELD_COUNT -> POINTER_DATA_FIELD_COUNT
    int BYTES_PER_FIELD -> BYTES_PER_FIELD
    int POINTER_DATA_FLAG_BATCHED -> POINTER_DATA_FLAG_BATCHED
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> renderer
    io.flutter.embedding.android.MotionEventTracker motionEventTracker -> motionEventTracker
    int _POINTER_BUTTON_PRIMARY -> _POINTER_BUTTON_PRIMARY
    android.graphics.Matrix IDENTITY_TRANSFORM -> IDENTITY_TRANSFORM
    boolean trackMotionEvents -> trackMotionEvents
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTouchEvent(android.view.MotionEvent,android.graphics.Matrix) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void addPointerForIndex(android.view.MotionEvent,int,int,int,android.graphics.Matrix,java.nio.ByteBuffer) -> addPointerForIndex
    int getPointerChangeForAction(int) -> getPointerChangeForAction
    int getPointerDeviceTypeForToolType(int) -> getPointerDeviceTypeForToolType
    void <clinit>() -> <clinit>
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange -> io.flutter.embedding.android.AndroidTouchProcessor$PointerChange:
    int CANCEL -> CANCEL
    int ADD -> ADD
    int REMOVE -> REMOVE
    int HOVER -> HOVER
    int DOWN -> DOWN
    int MOVE -> MOVE
    int UP -> UP
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind -> io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind:
    int TOUCH -> TOUCH
    int MOUSE -> MOUSE
    int STYLUS -> STYLUS
    int INVERTED_STYLUS -> INVERTED_STYLUS
    int UNKNOWN -> UNKNOWN
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind -> io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind:
    int NONE -> NONE
    int SCROLL -> SCROLL
    int UNKNOWN -> UNKNOWN
io.flutter.embedding.android.DrawableSplashScreen -> io.flutter.embedding.android.DrawableSplashScreen:
    android.graphics.drawable.Drawable drawable -> drawable
    android.widget.ImageView$ScaleType scaleType -> scaleType
    long crossfadeDurationInMillis -> crossfadeDurationInMillis
    io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView splashView -> splashView
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void <init>(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,long) -> <init>
    android.view.View createSplashView(android.content.Context,android.os.Bundle) -> createSplashView
    void transitionToFlutter(java.lang.Runnable) -> transitionToFlutter
io.flutter.embedding.android.DrawableSplashScreen$1 -> io.flutter.embedding.android.DrawableSplashScreen$1:
    java.lang.Runnable val$onTransitionComplete -> val$onTransitionComplete
    io.flutter.embedding.android.DrawableSplashScreen this$0 -> this$0
    void <init>(io.flutter.embedding.android.DrawableSplashScreen,java.lang.Runnable) -> <init>
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView -> io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setSplashDrawable(android.graphics.drawable.Drawable) -> setSplashDrawable
    void setSplashDrawable(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType) -> setSplashDrawable
io.flutter.embedding.android.ExclusiveAppComponent -> io.flutter.embedding.android.ExclusiveAppComponent:
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    java.lang.Object getAppComponent() -> getAppComponent
io.flutter.embedding.android.FlutterActivity -> io.flutter.embedding.android.FlutterActivity:
    java.lang.String TAG -> TAG
    int FLUTTER_VIEW_ID -> FLUTTER_VIEW_ID
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate delegate -> delegate
    androidx.lifecycle.LifecycleRegistry lifecycle -> lifecycle
    android.content.Intent createDefaultIntent(android.content.Context) -> createDefaultIntent
    io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder withNewEngine() -> withNewEngine
    io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder withCachedEngine(java.lang.String) -> withCachedEngine
    void <init>() -> <init>
    void setDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate) -> setDelegate
    void onCreate(android.os.Bundle) -> onCreate
    void switchLaunchThemeForNormalTheme() -> switchLaunchThemeForNormalTheme
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> provideSplashScreen
    android.graphics.drawable.Drawable getSplashScreenFromManifest() -> getSplashScreenFromManifest
    void configureWindowForTransparency() -> configureWindowForTransparency
    android.view.View createFlutterView() -> createFlutterView
    void configureStatusBarForFullscreenFlutterExperience() -> configureStatusBarForFullscreenFlutterExperience
    void onStart() -> onStart
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void release() -> release
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    void onDestroy() -> onDestroy
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onBackPressed() -> onBackPressed
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    android.content.Context getContext() -> getContext
    android.app.Activity getActivity() -> getActivity
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs() -> getFlutterShellArgs
    java.lang.String getCachedEngineId() -> getCachedEngineId
    boolean shouldDestroyEngineWithHost() -> shouldDestroyEngineWithHost
    java.lang.String getDartEntrypointFunctionName() -> getDartEntrypointFunctionName
    java.lang.String getInitialRoute() -> getInitialRoute
    java.lang.String getAppBundlePath() -> getAppBundlePath
    boolean isDebuggable() -> isDebuggable
    io.flutter.embedding.android.RenderMode getRenderMode() -> getRenderMode
    io.flutter.embedding.android.TransparencyMode getTransparencyMode() -> getTransparencyMode
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode getBackgroundMode() -> getBackgroundMode
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> provideFlutterEngine
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    android.os.Bundle getMetaData() -> getMetaData
    io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine) -> providePlatformPlugin
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> configureFlutterEngine
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> cleanUpFlutterEngine
    boolean shouldAttachEngineToActivity() -> shouldAttachEngineToActivity
    boolean shouldHandleDeeplinking() -> shouldHandleDeeplinking
    void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView) -> onFlutterSurfaceViewCreated
    void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView) -> onFlutterTextureViewCreated
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
    boolean shouldRestoreAndSaveState() -> shouldRestoreAndSaveState
    boolean popSystemNavigator() -> popSystemNavigator
    boolean stillAttachedForEvent(java.lang.String) -> stillAttachedForEvent
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder -> io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder:
    java.lang.Class activityClass -> activityClass
    java.lang.String cachedEngineId -> cachedEngineId
    boolean destroyEngineWithActivity -> destroyEngineWithActivity
    java.lang.String backgroundMode -> backgroundMode
    void <init>(java.lang.Class,java.lang.String) -> <init>
    io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder destroyEngineWithActivity(boolean) -> destroyEngineWithActivity
    io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode) -> backgroundMode
    android.content.Intent build(android.content.Context) -> build
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder -> io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder:
    java.lang.Class activityClass -> activityClass
    java.lang.String initialRoute -> initialRoute
    java.lang.String backgroundMode -> backgroundMode
    void <init>(java.lang.Class) -> <init>
    io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder initialRoute(java.lang.String) -> initialRoute
    io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode) -> backgroundMode
    android.content.Intent build(android.content.Context) -> build
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate -> io.flutter.embedding.android.FlutterActivityAndFragmentDelegate:
    java.lang.String TAG -> TAG
    java.lang.String FRAMEWORK_RESTORATION_BUNDLE_KEY -> FRAMEWORK_RESTORATION_BUNDLE_KEY
    java.lang.String PLUGINS_RESTORATION_BUNDLE_KEY -> PLUGINS_RESTORATION_BUNDLE_KEY
    int FLUTTER_SPLASH_VIEW_FALLBACK_ID -> FLUTTER_SPLASH_VIEW_FALLBACK_ID
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host host -> host
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    io.flutter.embedding.android.FlutterView flutterView -> flutterView
    io.flutter.plugin.platform.PlatformPlugin platformPlugin -> platformPlugin
    android.view.ViewTreeObserver$OnPreDrawListener activePreDrawListener -> activePreDrawListener
    boolean isFlutterEngineFromHost -> isFlutterEngineFromHost
    boolean isFlutterUiDisplayed -> isFlutterUiDisplayed
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> flutterUiDisplayListener
    void <init>(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host) -> <init>
    void release() -> release
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    boolean isFlutterEngineFromHost() -> isFlutterEngineFromHost
    void onAttach(android.content.Context) -> onAttach
    android.app.Activity getAppComponent() -> getAppComponent
    void setupFlutterEngine() -> setupFlutterEngine
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle,int,boolean) -> onCreateView
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onStart() -> onStart
    void doInitialFlutterViewRun() -> doInitialFlutterViewRun
    java.lang.String maybeGetInitialRouteFromIntent(android.content.Intent) -> maybeGetInitialRouteFromIntent
    void delayFirstAndroidViewDraw(io.flutter.embedding.android.FlutterView) -> delayFirstAndroidViewDraw
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroyView() -> onDestroyView
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    void onDetach() -> onDetach
    void onBackPressed() -> onBackPressed
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void ensureAlive() -> ensureAlive
    java.lang.Object getAppComponent() -> getAppComponent
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host access$000(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate) -> access$000
    boolean access$102(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,boolean) -> access$102
    boolean access$100(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate) -> access$100
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1 -> io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1:
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2 -> io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2:
    io.flutter.embedding.android.FlutterView val$flutterView -> val$flutterView
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,io.flutter.embedding.android.FlutterView) -> <init>
    boolean onPreDraw() -> onPreDraw
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host -> io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host:
    android.content.Context getContext() -> getContext
    boolean shouldHandleDeeplinking() -> shouldHandleDeeplinking
    android.app.Activity getActivity() -> getActivity
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
    io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs() -> getFlutterShellArgs
    java.lang.String getCachedEngineId() -> getCachedEngineId
    boolean shouldDestroyEngineWithHost() -> shouldDestroyEngineWithHost
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    java.lang.String getDartEntrypointFunctionName() -> getDartEntrypointFunctionName
    java.lang.String getAppBundlePath() -> getAppBundlePath
    java.lang.String getInitialRoute() -> getInitialRoute
    io.flutter.embedding.android.RenderMode getRenderMode() -> getRenderMode
    io.flutter.embedding.android.TransparencyMode getTransparencyMode() -> getTransparencyMode
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> provideSplashScreen
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> provideFlutterEngine
    io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine) -> providePlatformPlugin
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> configureFlutterEngine
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> cleanUpFlutterEngine
    boolean shouldAttachEngineToActivity() -> shouldAttachEngineToActivity
    void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView) -> onFlutterSurfaceViewCreated
    void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView) -> onFlutterTextureViewCreated
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
    boolean shouldRestoreAndSaveState() -> shouldRestoreAndSaveState
io.flutter.embedding.android.FlutterActivityLaunchConfigs -> io.flutter.embedding.android.FlutterActivityLaunchConfigs:
    java.lang.String DART_ENTRYPOINT_META_DATA_KEY -> DART_ENTRYPOINT_META_DATA_KEY
    java.lang.String INITIAL_ROUTE_META_DATA_KEY -> INITIAL_ROUTE_META_DATA_KEY
    java.lang.String SPLASH_SCREEN_META_DATA_KEY -> SPLASH_SCREEN_META_DATA_KEY
    java.lang.String NORMAL_THEME_META_DATA_KEY -> NORMAL_THEME_META_DATA_KEY
    java.lang.String HANDLE_DEEPLINKING_META_DATA_KEY -> HANDLE_DEEPLINKING_META_DATA_KEY
    java.lang.String EXTRA_INITIAL_ROUTE -> EXTRA_INITIAL_ROUTE
    java.lang.String EXTRA_BACKGROUND_MODE -> EXTRA_BACKGROUND_MODE
    java.lang.String EXTRA_CACHED_ENGINE_ID -> EXTRA_CACHED_ENGINE_ID
    java.lang.String EXTRA_DESTROY_ENGINE_WITH_ACTIVITY -> EXTRA_DESTROY_ENGINE_WITH_ACTIVITY
    java.lang.String EXTRA_ENABLE_STATE_RESTORATION -> EXTRA_ENABLE_STATE_RESTORATION
    java.lang.String DEFAULT_DART_ENTRYPOINT -> DEFAULT_DART_ENTRYPOINT
    java.lang.String DEFAULT_INITIAL_ROUTE -> DEFAULT_INITIAL_ROUTE
    java.lang.String DEFAULT_BACKGROUND_MODE -> DEFAULT_BACKGROUND_MODE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode -> io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode:
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode opaque -> opaque
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode transparent -> transparent
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values() -> values
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterEngineConfigurator -> io.flutter.embedding.android.FlutterEngineConfigurator:
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> configureFlutterEngine
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> cleanUpFlutterEngine
io.flutter.embedding.android.FlutterEngineProvider -> io.flutter.embedding.android.FlutterEngineProvider:
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> provideFlutterEngine
io.flutter.embedding.android.FlutterFragment -> io.flutter.embedding.android.FlutterFragment:
    int FLUTTER_VIEW_ID -> FLUTTER_VIEW_ID
    java.lang.String TAG -> TAG
    java.lang.String ARG_DART_ENTRYPOINT -> ARG_DART_ENTRYPOINT
    java.lang.String ARG_INITIAL_ROUTE -> ARG_INITIAL_ROUTE
    java.lang.String ARG_HANDLE_DEEPLINKING -> ARG_HANDLE_DEEPLINKING
    java.lang.String ARG_APP_BUNDLE_PATH -> ARG_APP_BUNDLE_PATH
    java.lang.String ARG_SHOULD_DELAY_FIRST_ANDROID_VIEW_DRAW -> ARG_SHOULD_DELAY_FIRST_ANDROID_VIEW_DRAW
    java.lang.String ARG_FLUTTER_INITIALIZATION_ARGS -> ARG_FLUTTER_INITIALIZATION_ARGS
    java.lang.String ARG_FLUTTERVIEW_RENDER_MODE -> ARG_FLUTTERVIEW_RENDER_MODE
    java.lang.String ARG_FLUTTERVIEW_TRANSPARENCY_MODE -> ARG_FLUTTERVIEW_TRANSPARENCY_MODE
    java.lang.String ARG_SHOULD_ATTACH_ENGINE_TO_ACTIVITY -> ARG_SHOULD_ATTACH_ENGINE_TO_ACTIVITY
    java.lang.String ARG_CACHED_ENGINE_ID -> ARG_CACHED_ENGINE_ID
    java.lang.String ARG_DESTROY_ENGINE_WITH_FRAGMENT -> ARG_DESTROY_ENGINE_WITH_FRAGMENT
    java.lang.String ARG_ENABLE_STATE_RESTORATION -> ARG_ENABLE_STATE_RESTORATION
    java.lang.String ARG_SHOULD_AUTOMATICALLY_HANDLE_ON_BACK_PRESSED -> ARG_SHOULD_AUTOMATICALLY_HANDLE_ON_BACK_PRESSED
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate delegate -> delegate
    androidx.activity.OnBackPressedCallback onBackPressedCallback -> onBackPressedCallback
    io.flutter.embedding.android.FlutterFragment createDefault() -> createDefault
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder withNewEngine() -> withNewEngine
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder withCachedEngine(java.lang.String) -> withCachedEngine
    void <init>() -> <init>
    void setDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate) -> setDelegate
    void onAttach(android.content.Context) -> onAttach
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onStart() -> onStart
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroyView() -> onDestroyView
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    void onDetach() -> onDetach
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onBackPressed() -> onBackPressed
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs() -> getFlutterShellArgs
    java.lang.String getCachedEngineId() -> getCachedEngineId
    boolean isFlutterEngineInjected() -> isFlutterEngineInjected
    boolean shouldDestroyEngineWithHost() -> shouldDestroyEngineWithHost
    java.lang.String getDartEntrypointFunctionName() -> getDartEntrypointFunctionName
    java.lang.String getAppBundlePath() -> getAppBundlePath
    java.lang.String getInitialRoute() -> getInitialRoute
    io.flutter.embedding.android.RenderMode getRenderMode() -> getRenderMode
    io.flutter.embedding.android.TransparencyMode getTransparencyMode() -> getTransparencyMode
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> provideSplashScreen
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> provideFlutterEngine
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine) -> providePlatformPlugin
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> configureFlutterEngine
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> cleanUpFlutterEngine
    boolean shouldAttachEngineToActivity() -> shouldAttachEngineToActivity
    boolean shouldHandleDeeplinking() -> shouldHandleDeeplinking
    void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView) -> onFlutterSurfaceViewCreated
    void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView) -> onFlutterTextureViewCreated
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
    boolean shouldRestoreAndSaveState() -> shouldRestoreAndSaveState
    boolean popSystemNavigator() -> popSystemNavigator
    boolean shouldDelayFirstAndroidViewDraw() -> shouldDelayFirstAndroidViewDraw
    boolean stillAttachedForEvent(java.lang.String) -> stillAttachedForEvent
    android.app.Activity getActivity() -> getActivity
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterFragment$1 -> io.flutter.embedding.android.FlutterFragment$1:
    io.flutter.embedding.android.FlutterFragment this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterFragment,boolean) -> <init>
    void handleOnBackPressed() -> handleOnBackPressed
io.flutter.embedding.android.FlutterFragment$ActivityCallThrough -> io.flutter.embedding.android.FlutterFragment$ActivityCallThrough:
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder -> io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder:
    java.lang.Class fragmentClass -> fragmentClass
    java.lang.String engineId -> engineId
    boolean destroyEngineWithFragment -> destroyEngineWithFragment
    boolean handleDeeplinking -> handleDeeplinking
    io.flutter.embedding.android.RenderMode renderMode -> renderMode
    io.flutter.embedding.android.TransparencyMode transparencyMode -> transparencyMode
    boolean shouldAttachEngineToActivity -> shouldAttachEngineToActivity
    boolean shouldAutomaticallyHandleOnBackPressed -> shouldAutomaticallyHandleOnBackPressed
    boolean shouldDelayFirstAndroidViewDraw -> shouldDelayFirstAndroidViewDraw
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Class,java.lang.String) -> <init>
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder destroyEngineWithFragment(boolean) -> destroyEngineWithFragment
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder renderMode(io.flutter.embedding.android.RenderMode) -> renderMode
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder transparencyMode(io.flutter.embedding.android.TransparencyMode) -> transparencyMode
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder handleDeeplinking(java.lang.Boolean) -> handleDeeplinking
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder shouldAttachEngineToActivity(boolean) -> shouldAttachEngineToActivity
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder shouldAutomaticallyHandleOnBackPressed(boolean) -> shouldAutomaticallyHandleOnBackPressed
    io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder shouldDelayFirstAndroidViewDraw(boolean) -> shouldDelayFirstAndroidViewDraw
    android.os.Bundle createArgs() -> createArgs
    io.flutter.embedding.android.FlutterFragment build() -> build
    void <init>(java.lang.String,io.flutter.embedding.android.FlutterFragment$1) -> <init>
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder -> io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder:
    java.lang.Class fragmentClass -> fragmentClass
    java.lang.String dartEntrypoint -> dartEntrypoint
    java.lang.String initialRoute -> initialRoute
    boolean handleDeeplinking -> handleDeeplinking
    java.lang.String appBundlePath -> appBundlePath
    io.flutter.embedding.engine.FlutterShellArgs shellArgs -> shellArgs
    io.flutter.embedding.android.RenderMode renderMode -> renderMode
    io.flutter.embedding.android.TransparencyMode transparencyMode -> transparencyMode
    boolean shouldAttachEngineToActivity -> shouldAttachEngineToActivity
    boolean shouldAutomaticallyHandleOnBackPressed -> shouldAutomaticallyHandleOnBackPressed
    boolean shouldDelayFirstAndroidViewDraw -> shouldDelayFirstAndroidViewDraw
    void <init>() -> <init>
    void <init>(java.lang.Class) -> <init>
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder dartEntrypoint(java.lang.String) -> dartEntrypoint
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder initialRoute(java.lang.String) -> initialRoute
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder handleDeeplinking(java.lang.Boolean) -> handleDeeplinking
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder appBundlePath(java.lang.String) -> appBundlePath
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder flutterShellArgs(io.flutter.embedding.engine.FlutterShellArgs) -> flutterShellArgs
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder renderMode(io.flutter.embedding.android.RenderMode) -> renderMode
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder transparencyMode(io.flutter.embedding.android.TransparencyMode) -> transparencyMode
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder shouldAttachEngineToActivity(boolean) -> shouldAttachEngineToActivity
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder shouldAutomaticallyHandleOnBackPressed(boolean) -> shouldAutomaticallyHandleOnBackPressed
    io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder shouldDelayFirstAndroidViewDraw(boolean) -> shouldDelayFirstAndroidViewDraw
    android.os.Bundle createArgs() -> createArgs
    io.flutter.embedding.android.FlutterFragment build() -> build
io.flutter.embedding.android.FlutterFragmentActivity -> io.flutter.embedding.android.FlutterFragmentActivity:
    java.lang.String TAG -> TAG
    java.lang.String TAG_FLUTTER_FRAGMENT -> TAG_FLUTTER_FRAGMENT
    int FRAGMENT_CONTAINER_ID -> FRAGMENT_CONTAINER_ID
    io.flutter.embedding.android.FlutterFragment flutterFragment -> flutterFragment
    void <init>() -> <init>
    android.content.Intent createDefaultIntent(android.content.Context) -> createDefaultIntent
    io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder withNewEngine() -> withNewEngine
    io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder withCachedEngine(java.lang.String) -> withCachedEngine
    void onCreate(android.os.Bundle) -> onCreate
    void switchLaunchThemeForNormalTheme() -> switchLaunchThemeForNormalTheme
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> provideSplashScreen
    android.graphics.drawable.Drawable getSplashScreenFromManifest() -> getSplashScreenFromManifest
    void configureWindowForTransparency() -> configureWindowForTransparency
    android.view.View createFragmentContainer() -> createFragmentContainer
    io.flutter.embedding.android.FlutterFragment retrieveExistingFlutterFragmentIfPossible() -> retrieveExistingFlutterFragmentIfPossible
    void ensureFlutterFragmentCreated() -> ensureFlutterFragmentCreated
    io.flutter.embedding.android.FlutterFragment createFlutterFragment() -> createFlutterFragment
    void configureStatusBarForFullscreenFlutterExperience() -> configureStatusBarForFullscreenFlutterExperience
    void onPostResume() -> onPostResume
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onBackPressed() -> onBackPressed
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    boolean shouldDestroyEngineWithHost() -> shouldDestroyEngineWithHost
    boolean shouldAttachEngineToActivity() -> shouldAttachEngineToActivity
    boolean shouldHandleDeeplinking() -> shouldHandleDeeplinking
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> provideFlutterEngine
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> configureFlutterEngine
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> cleanUpFlutterEngine
    java.lang.String getAppBundlePath() -> getAppBundlePath
    android.os.Bundle getMetaData() -> getMetaData
    java.lang.String getDartEntrypointFunctionName() -> getDartEntrypointFunctionName
    java.lang.String getInitialRoute() -> getInitialRoute
    java.lang.String getCachedEngineId() -> getCachedEngineId
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode getBackgroundMode() -> getBackgroundMode
    io.flutter.embedding.android.RenderMode getRenderMode() -> getRenderMode
    boolean isDebuggable() -> isDebuggable
    android.widget.FrameLayout provideRootLayout(android.content.Context) -> provideRootLayout
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder -> io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder:
    java.lang.Class activityClass -> activityClass
    java.lang.String cachedEngineId -> cachedEngineId
    boolean destroyEngineWithActivity -> destroyEngineWithActivity
    java.lang.String backgroundMode -> backgroundMode
    void <init>(java.lang.Class,java.lang.String) -> <init>
    io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder destroyEngineWithActivity(boolean) -> destroyEngineWithActivity
    io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode) -> backgroundMode
    android.content.Intent build(android.content.Context) -> build
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder -> io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder:
    java.lang.Class activityClass -> activityClass
    java.lang.String initialRoute -> initialRoute
    java.lang.String backgroundMode -> backgroundMode
    void <init>(java.lang.Class) -> <init>
    io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder initialRoute(java.lang.String) -> initialRoute
    io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode) -> backgroundMode
    android.content.Intent build(android.content.Context) -> build
io.flutter.embedding.android.FlutterImageView -> io.flutter.embedding.android.FlutterImageView:
    android.media.ImageReader imageReader -> imageReader
    android.media.Image currentImage -> currentImage
    android.graphics.Bitmap currentBitmap -> currentBitmap
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    io.flutter.embedding.android.FlutterImageView$SurfaceKind kind -> kind
    boolean isAttachedToFlutterRenderer -> isAttachedToFlutterRenderer
    void <init>(android.content.Context,int,int,io.flutter.embedding.android.FlutterImageView$SurfaceKind) -> <init>
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.media.ImageReader,io.flutter.embedding.android.FlutterImageView$SurfaceKind) -> <init>
    void init() -> init
    android.media.ImageReader createImageReader(int,int) -> createImageReader
    android.view.Surface getSurface() -> getSurface
    io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer() -> getAttachedRenderer
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void pause() -> pause
    boolean acquireLatestImage() -> acquireLatestImage
    void resizeIfNeeded(int,int) -> resizeIfNeeded
    void onDraw(android.graphics.Canvas) -> onDraw
    void closeCurrentImage() -> closeCurrentImage
    void updateCurrentBitmap() -> updateCurrentBitmap
    void onSizeChanged(int,int,int,int) -> onSizeChanged
io.flutter.embedding.android.FlutterImageView$1 -> io.flutter.embedding.android.FlutterImageView$1:
    int[] $SwitchMap$io$flutter$embedding$android$FlutterImageView$SurfaceKind -> $SwitchMap$io$flutter$embedding$android$FlutterImageView$SurfaceKind
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterImageView$SurfaceKind -> io.flutter.embedding.android.FlutterImageView$SurfaceKind:
    io.flutter.embedding.android.FlutterImageView$SurfaceKind background -> background
    io.flutter.embedding.android.FlutterImageView$SurfaceKind overlay -> overlay
    io.flutter.embedding.android.FlutterImageView$SurfaceKind[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values() -> values
    io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterSplashView -> io.flutter.embedding.android.FlutterSplashView:
    java.lang.String TAG -> TAG
    io.flutter.embedding.android.SplashScreen splashScreen -> splashScreen
    io.flutter.embedding.android.FlutterView flutterView -> flutterView
    android.view.View splashScreenView -> splashScreenView
    android.os.Bundle splashScreenState -> splashScreenState
    java.lang.String transitioningIsolateId -> transitioningIsolateId
    java.lang.String previousCompletedSplashIsolate -> previousCompletedSplashIsolate
    io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener flutterEngineAttachmentListener -> flutterEngineAttachmentListener
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> flutterUiDisplayListener
    java.lang.Runnable onTransitionComplete -> onTransitionComplete
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void displayFlutterViewWithSplash(io.flutter.embedding.android.FlutterView,io.flutter.embedding.android.SplashScreen) -> displayFlutterViewWithSplash
    boolean isSplashScreenNeededNow() -> isSplashScreenNeededNow
    boolean isSplashScreenTransitionNeededNow() -> isSplashScreenTransitionNeededNow
    boolean wasPreviousSplashTransitionInterrupted() -> wasPreviousSplashTransitionInterrupted
    boolean hasSplashCompleted() -> hasSplashCompleted
    void transitionToFlutter() -> transitionToFlutter
    io.flutter.embedding.android.FlutterView access$000(io.flutter.embedding.android.FlutterSplashView) -> access$000
    io.flutter.embedding.android.SplashScreen access$100(io.flutter.embedding.android.FlutterSplashView) -> access$100
    void access$200(io.flutter.embedding.android.FlutterSplashView) -> access$200
    android.view.View access$300(io.flutter.embedding.android.FlutterSplashView) -> access$300
    java.lang.String access$402(io.flutter.embedding.android.FlutterSplashView,java.lang.String) -> access$402
    java.lang.String access$500(io.flutter.embedding.android.FlutterSplashView) -> access$500
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterSplashView$1 -> io.flutter.embedding.android.FlutterSplashView$1:
    io.flutter.embedding.android.FlutterSplashView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterSplashView) -> <init>
    void onFlutterEngineAttachedToFlutterView(io.flutter.embedding.engine.FlutterEngine) -> onFlutterEngineAttachedToFlutterView
    void onFlutterEngineDetachedFromFlutterView() -> onFlutterEngineDetachedFromFlutterView
io.flutter.embedding.android.FlutterSplashView$2 -> io.flutter.embedding.android.FlutterSplashView$2:
    io.flutter.embedding.android.FlutterSplashView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterSplashView) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.android.FlutterSplashView$3 -> io.flutter.embedding.android.FlutterSplashView$3:
    io.flutter.embedding.android.FlutterSplashView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterSplashView) -> <init>
    void run() -> run
io.flutter.embedding.android.FlutterSplashView$SavedState -> io.flutter.embedding.android.FlutterSplashView$SavedState:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String previousCompletedSplashIsolate -> previousCompletedSplashIsolate
    android.os.Bundle splashScreenState -> splashScreenState
    void <init>(android.os.Parcelable) -> <init>
    void <init>(android.os.Parcel) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String) -> access$602
    android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle) -> access$702
    java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState) -> access$600
    android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState) -> access$700
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterSplashView$SavedState$1 -> io.flutter.embedding.android.FlutterSplashView$SavedState$1:
    void <init>() -> <init>
    io.flutter.embedding.android.FlutterSplashView$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    io.flutter.embedding.android.FlutterSplashView$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
io.flutter.embedding.android.FlutterSurfaceView -> io.flutter.embedding.android.FlutterSurfaceView:
    java.lang.String TAG -> TAG
    boolean renderTransparently -> renderTransparently
    boolean isSurfaceAvailableForRendering -> isSurfaceAvailableForRendering
    boolean isAttachedToFlutterRenderer -> isAttachedToFlutterRenderer
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    android.view.SurfaceHolder$Callback surfaceCallback -> surfaceCallback
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> flutterUiDisplayListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,boolean) -> <init>
    void init() -> init
    boolean gatherTransparentRegion(android.graphics.Region) -> gatherTransparentRegion
    io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer() -> getAttachedRenderer
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void pause() -> pause
    void connectSurfaceToRenderer() -> connectSurfaceToRenderer
    void changeSurfaceSize(int,int) -> changeSurfaceSize
    void disconnectSurfaceFromRenderer() -> disconnectSurfaceFromRenderer
    boolean access$002(io.flutter.embedding.android.FlutterSurfaceView,boolean) -> access$002
    boolean access$100(io.flutter.embedding.android.FlutterSurfaceView) -> access$100
    void access$200(io.flutter.embedding.android.FlutterSurfaceView) -> access$200
    void access$300(io.flutter.embedding.android.FlutterSurfaceView,int,int) -> access$300
    void access$400(io.flutter.embedding.android.FlutterSurfaceView) -> access$400
    io.flutter.embedding.engine.renderer.FlutterRenderer access$500(io.flutter.embedding.android.FlutterSurfaceView) -> access$500
io.flutter.embedding.android.FlutterSurfaceView$1 -> io.flutter.embedding.android.FlutterSurfaceView$1:
    io.flutter.embedding.android.FlutterSurfaceView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterSurfaceView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.embedding.android.FlutterSurfaceView$2 -> io.flutter.embedding.android.FlutterSurfaceView$2:
    io.flutter.embedding.android.FlutterSurfaceView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterSurfaceView) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.android.FlutterTextureView -> io.flutter.embedding.android.FlutterTextureView:
    java.lang.String TAG -> TAG
    boolean isSurfaceAvailableForRendering -> isSurfaceAvailableForRendering
    boolean isAttachedToFlutterRenderer -> isAttachedToFlutterRenderer
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    android.view.Surface renderSurface -> renderSurface
    android.view.TextureView$SurfaceTextureListener surfaceTextureListener -> surfaceTextureListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init() -> init
    io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer() -> getAttachedRenderer
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void pause() -> pause
    void connectSurfaceToRenderer() -> connectSurfaceToRenderer
    void changeSurfaceSize(int,int) -> changeSurfaceSize
    void disconnectSurfaceFromRenderer() -> disconnectSurfaceFromRenderer
    boolean access$002(io.flutter.embedding.android.FlutterTextureView,boolean) -> access$002
    boolean access$100(io.flutter.embedding.android.FlutterTextureView) -> access$100
    void access$200(io.flutter.embedding.android.FlutterTextureView) -> access$200
    void access$300(io.flutter.embedding.android.FlutterTextureView,int,int) -> access$300
    void access$400(io.flutter.embedding.android.FlutterTextureView) -> access$400
io.flutter.embedding.android.FlutterTextureView$1 -> io.flutter.embedding.android.FlutterTextureView$1:
    io.flutter.embedding.android.FlutterTextureView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterTextureView) -> <init>
    void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int) -> onSurfaceTextureAvailable
    void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int) -> onSurfaceTextureSizeChanged
    void onSurfaceTextureUpdated(android.graphics.SurfaceTexture) -> onSurfaceTextureUpdated
    boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture) -> onSurfaceTextureDestroyed
io.flutter.embedding.android.FlutterView -> io.flutter.embedding.android.FlutterView:
    java.lang.String TAG -> TAG
    io.flutter.embedding.android.FlutterSurfaceView flutterSurfaceView -> flutterSurfaceView
    io.flutter.embedding.android.FlutterTextureView flutterTextureView -> flutterTextureView
    io.flutter.embedding.android.FlutterImageView flutterImageView -> flutterImageView
    io.flutter.embedding.engine.renderer.RenderSurface renderSurface -> renderSurface
    io.flutter.embedding.engine.renderer.RenderSurface previousRenderSurface -> previousRenderSurface
    java.util.Set flutterUiDisplayListeners -> flutterUiDisplayListeners
    boolean isFlutterUiDisplayed -> isFlutterUiDisplayed
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    java.util.Set flutterEngineAttachmentListeners -> flutterEngineAttachmentListeners
    io.flutter.plugin.mouse.MouseCursorPlugin mouseCursorPlugin -> mouseCursorPlugin
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> textInputPlugin
    io.flutter.plugin.localization.LocalizationPlugin localizationPlugin -> localizationPlugin
    io.flutter.embedding.android.KeyboardManager keyboardManager -> keyboardManager
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> androidTouchProcessor
    io.flutter.view.AccessibilityBridge accessibilityBridge -> accessibilityBridge
    io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics viewportMetrics -> viewportMetrics
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> onAccessibilityChangeListener
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> flutterUiDisplayListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterView$RenderMode) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterView$TransparencyMode) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterSurfaceView) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterTextureView) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterImageView) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.android.FlutterView$RenderMode,io.flutter.embedding.android.FlutterView$TransparencyMode) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterSurfaceView) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterTextureView) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterImageView) -> <init>
    void init() -> init
    boolean hasRenderedFirstFrame() -> hasRenderedFirstFrame
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> addOnFirstFrameRenderedListener
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> removeOnFirstFrameRenderedListener
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    io.flutter.embedding.android.FlutterView$ZeroSides calculateShouldZeroSides() -> calculateShouldZeroSides
    int guessBottomKeyboardInset(android.view.WindowInsets) -> guessBottomKeyboardInset
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean checkInputConnectionProxy(android.view.View) -> checkInputConnectionProxy
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    android.view.View findViewByAccessibilityIdTraversal(int) -> findViewByAccessibilityIdTraversal
    android.view.View findViewByAccessibilityIdRootedAtCurrentView(int,android.view.View) -> findViewByAccessibilityIdRootedAtCurrentView
    void resetWillNotDraw(boolean,boolean) -> resetWillNotDraw
    android.view.PointerIcon getSystemPointerIcon(int) -> getSystemPointerIcon
    void attachToFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> attachToFlutterEngine
    void detachFromFlutterEngine() -> detachFromFlutterEngine
    io.flutter.embedding.android.FlutterImageView createImageView() -> createImageView
    void convertToImageView() -> convertToImageView
    void revertImageView(java.lang.Runnable) -> revertImageView
    void attachOverlaySurfaceToRender(io.flutter.embedding.android.FlutterImageView) -> attachOverlaySurfaceToRender
    boolean acquireLatestImageViewFrame() -> acquireLatestImageViewFrame
    boolean isAttachedToFlutterEngine() -> isAttachedToFlutterEngine
    io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine() -> getAttachedFlutterEngine
    void addFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener) -> addFlutterEngineAttachmentListener
    void removeFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener) -> removeFlutterEngineAttachmentListener
    void sendUserSettingsToFlutter() -> sendUserSettingsToFlutter
    void sendViewportMetricsToFlutter() -> sendViewportMetricsToFlutter
    void onProvideAutofillVirtualStructure(android.view.ViewStructure,int) -> onProvideAutofillVirtualStructure
    void autofill(android.util.SparseArray) -> autofill
    void access$000(io.flutter.embedding.android.FlutterView,boolean,boolean) -> access$000
    boolean access$102(io.flutter.embedding.android.FlutterView,boolean) -> access$102
    java.util.Set access$200(io.flutter.embedding.android.FlutterView) -> access$200
    io.flutter.embedding.engine.renderer.RenderSurface access$300(io.flutter.embedding.android.FlutterView) -> access$300
    io.flutter.embedding.android.FlutterImageView access$400(io.flutter.embedding.android.FlutterView) -> access$400
io.flutter.embedding.android.FlutterView$1 -> io.flutter.embedding.android.FlutterView$1:
    io.flutter.embedding.android.FlutterView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterView) -> <init>
    void onAccessibilityChanged(boolean,boolean) -> onAccessibilityChanged
io.flutter.embedding.android.FlutterView$2 -> io.flutter.embedding.android.FlutterView$2:
    io.flutter.embedding.android.FlutterView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterView) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.android.FlutterView$3 -> io.flutter.embedding.android.FlutterView$3:
    io.flutter.embedding.engine.renderer.FlutterRenderer val$renderer -> val$renderer
    java.lang.Runnable val$onDone -> val$onDone
    io.flutter.embedding.android.FlutterView this$0 -> this$0
    void <init>(io.flutter.embedding.android.FlutterView,io.flutter.embedding.engine.renderer.FlutterRenderer,java.lang.Runnable) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener -> io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener:
    void onFlutterEngineAttachedToFlutterView(io.flutter.embedding.engine.FlutterEngine) -> onFlutterEngineAttachedToFlutterView
    void onFlutterEngineDetachedFromFlutterView() -> onFlutterEngineDetachedFromFlutterView
io.flutter.embedding.android.FlutterView$RenderMode -> io.flutter.embedding.android.FlutterView$RenderMode:
    io.flutter.embedding.android.FlutterView$RenderMode surface -> surface
    io.flutter.embedding.android.FlutterView$RenderMode texture -> texture
    io.flutter.embedding.android.FlutterView$RenderMode image -> image
    io.flutter.embedding.android.FlutterView$RenderMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterView$RenderMode[] values() -> values
    io.flutter.embedding.android.FlutterView$RenderMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterView$TransparencyMode -> io.flutter.embedding.android.FlutterView$TransparencyMode:
    io.flutter.embedding.android.FlutterView$TransparencyMode opaque -> opaque
    io.flutter.embedding.android.FlutterView$TransparencyMode transparent -> transparent
    io.flutter.embedding.android.FlutterView$TransparencyMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterView$TransparencyMode[] values() -> values
    io.flutter.embedding.android.FlutterView$TransparencyMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.FlutterView$ZeroSides -> io.flutter.embedding.android.FlutterView$ZeroSides:
    io.flutter.embedding.android.FlutterView$ZeroSides NONE -> NONE
    io.flutter.embedding.android.FlutterView$ZeroSides LEFT -> LEFT
    io.flutter.embedding.android.FlutterView$ZeroSides RIGHT -> RIGHT
    io.flutter.embedding.android.FlutterView$ZeroSides BOTH -> BOTH
    io.flutter.embedding.android.FlutterView$ZeroSides[] $VALUES -> $VALUES
    io.flutter.embedding.android.FlutterView$ZeroSides[] values() -> values
    io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.KeyChannelResponder -> io.flutter.embedding.android.KeyChannelResponder:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> keyEventChannel
    int combiningCharacter -> combiningCharacter
    void <init>(io.flutter.embedding.engine.systemchannels.KeyEventChannel) -> <init>
    java.lang.Character applyCombiningCharacterToBaseCharacter(int) -> applyCombiningCharacterToBaseCharacter
    void handleEvent(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback) -> handleEvent
    void lambda$handleEvent$0(io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback,boolean) -> lambda$handleEvent$0
io.flutter.embedding.android.KeyboardManager -> io.flutter.embedding.android.KeyboardManager:
    java.lang.String TAG -> TAG
    io.flutter.embedding.android.KeyboardManager$Responder[] responders -> responders
    java.util.HashSet redispatchedEvents -> redispatchedEvents
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> textInputPlugin
    android.view.View view -> view
    void <init>(android.view.View,io.flutter.plugin.editing.TextInputPlugin,io.flutter.embedding.android.KeyboardManager$Responder[]) -> <init>
    boolean handleEvent(android.view.KeyEvent) -> handleEvent
    void destroy() -> destroy
    void onUnhandled(android.view.KeyEvent) -> onUnhandled
    void access$000(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent) -> access$000
io.flutter.embedding.android.KeyboardManager$1 -> io.flutter.embedding.android.KeyboardManager$1:
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder -> io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder:
    android.view.KeyEvent keyEvent -> keyEvent
    int unrepliedCount -> unrepliedCount
    boolean isEventHandled -> isEventHandled
    io.flutter.embedding.android.KeyboardManager this$0 -> this$0
    void <init>(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent) -> <init>
    io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback buildCallback() -> buildCallback
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback -> io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback:
    boolean isCalled -> isCalled
    io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder this$1 -> this$1
    void <init>(io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder) -> <init>
    void onKeyEventHandled(java.lang.Boolean) -> onKeyEventHandled
    void <init>(io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder,io.flutter.embedding.android.KeyboardManager$1) -> <init>
io.flutter.embedding.android.KeyboardManager$Responder -> io.flutter.embedding.android.KeyboardManager$Responder:
    void handleEvent(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback) -> handleEvent
io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback -> io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback:
    void onKeyEventHandled(java.lang.Boolean) -> onKeyEventHandled
io.flutter.embedding.android.MotionEventTracker -> io.flutter.embedding.android.MotionEventTracker:
    android.util.LongSparseArray eventById -> eventById
    java.util.PriorityQueue unusedEvents -> unusedEvents
    io.flutter.embedding.android.MotionEventTracker INSTANCE -> INSTANCE
    io.flutter.embedding.android.MotionEventTracker getInstance() -> getInstance
    void <init>() -> <init>
    io.flutter.embedding.android.MotionEventTracker$MotionEventId track(android.view.MotionEvent) -> track
    android.view.MotionEvent pop(io.flutter.embedding.android.MotionEventTracker$MotionEventId) -> pop
io.flutter.embedding.android.MotionEventTracker$MotionEventId -> io.flutter.embedding.android.MotionEventTracker$MotionEventId:
    java.util.concurrent.atomic.AtomicLong ID_COUNTER -> ID_COUNTER
    long id -> id
    void <init>(long) -> <init>
    io.flutter.embedding.android.MotionEventTracker$MotionEventId from(long) -> from
    io.flutter.embedding.android.MotionEventTracker$MotionEventId createUnique() -> createUnique
    long getId() -> getId
    long access$000(io.flutter.embedding.android.MotionEventTracker$MotionEventId) -> access$000
    void <clinit>() -> <clinit>
io.flutter.embedding.android.RenderMode -> io.flutter.embedding.android.RenderMode:
    io.flutter.embedding.android.RenderMode surface -> surface
    io.flutter.embedding.android.RenderMode texture -> texture
    io.flutter.embedding.android.RenderMode image -> image
    io.flutter.embedding.android.RenderMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.RenderMode[] values() -> values
    io.flutter.embedding.android.RenderMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.android.SplashScreen -> io.flutter.embedding.android.SplashScreen:
    android.view.View createSplashView(android.content.Context,android.os.Bundle) -> createSplashView
    void transitionToFlutter(java.lang.Runnable) -> transitionToFlutter
    boolean doesSplashViewRememberItsTransition() -> doesSplashViewRememberItsTransition
    android.os.Bundle saveSplashScreenState() -> saveSplashScreenState
io.flutter.embedding.android.SplashScreenProvider -> io.flutter.embedding.android.SplashScreenProvider:
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> provideSplashScreen
io.flutter.embedding.android.TransparencyMode -> io.flutter.embedding.android.TransparencyMode:
    io.flutter.embedding.android.TransparencyMode opaque -> opaque
    io.flutter.embedding.android.TransparencyMode transparent -> transparent
    io.flutter.embedding.android.TransparencyMode[] $VALUES -> $VALUES
    io.flutter.embedding.android.TransparencyMode[] values() -> values
    io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.FlutterEngine -> io.flutter.embedding.engine.FlutterEngine:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> renderer
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> dartExecutor
    io.flutter.embedding.engine.FlutterEngineConnectionRegistry pluginRegistry -> pluginRegistry
    io.flutter.plugin.localization.LocalizationPlugin localizationPlugin -> localizationPlugin
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> accessibilityChannel
    io.flutter.embedding.engine.systemchannels.DeferredComponentChannel deferredComponentChannel -> deferredComponentChannel
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> keyEventChannel
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> lifecycleChannel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> localizationChannel
    io.flutter.embedding.engine.systemchannels.MouseCursorChannel mouseCursorChannel -> mouseCursorChannel
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> navigationChannel
    io.flutter.embedding.engine.systemchannels.RestorationChannel restorationChannel -> restorationChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> platformChannel
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> settingsChannel
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> systemChannel
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> textInputChannel
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> platformViewsController
    java.util.Set engineLifecycleListeners -> engineLifecycleListeners
    io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener engineLifecycleListener -> engineLifecycleListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,java.lang.String[]) -> <init>
    void <init>(android.content.Context,java.lang.String[],boolean) -> <init>
    void <init>(android.content.Context,java.lang.String[],boolean,boolean) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,java.lang.String[],boolean) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.PlatformViewsController,java.lang.String[],boolean) -> <init>
    void <init>(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.PlatformViewsController,java.lang.String[],boolean,boolean) -> <init>
    void attachToJni() -> attachToJni
    boolean isAttachedToJni() -> isAttachedToJni
    io.flutter.embedding.engine.FlutterEngine spawn(android.content.Context,io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint) -> spawn
    void destroy() -> destroy
    void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> addEngineLifecycleListener
    void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> removeEngineLifecycleListener
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    io.flutter.embedding.engine.renderer.FlutterRenderer getRenderer() -> getRenderer
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel getAccessibilityChannel() -> getAccessibilityChannel
    io.flutter.embedding.engine.systemchannels.KeyEventChannel getKeyEventChannel() -> getKeyEventChannel
    io.flutter.embedding.engine.systemchannels.LifecycleChannel getLifecycleChannel() -> getLifecycleChannel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel getLocalizationChannel() -> getLocalizationChannel
    io.flutter.embedding.engine.systemchannels.NavigationChannel getNavigationChannel() -> getNavigationChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel getPlatformChannel() -> getPlatformChannel
    io.flutter.embedding.engine.systemchannels.RestorationChannel getRestorationChannel() -> getRestorationChannel
    io.flutter.embedding.engine.systemchannels.SettingsChannel getSettingsChannel() -> getSettingsChannel
    io.flutter.embedding.engine.systemchannels.DeferredComponentChannel getDeferredComponentChannel() -> getDeferredComponentChannel
    io.flutter.embedding.engine.systemchannels.SystemChannel getSystemChannel() -> getSystemChannel
    io.flutter.embedding.engine.systemchannels.MouseCursorChannel getMouseCursorChannel() -> getMouseCursorChannel
    io.flutter.embedding.engine.systemchannels.TextInputChannel getTextInputChannel() -> getTextInputChannel
    io.flutter.embedding.engine.plugins.PluginRegistry getPlugins() -> getPlugins
    io.flutter.plugin.localization.LocalizationPlugin getLocalizationPlugin() -> getLocalizationPlugin
    io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController() -> getPlatformViewsController
    io.flutter.embedding.engine.plugins.activity.ActivityControlSurface getActivityControlSurface() -> getActivityControlSurface
    io.flutter.embedding.engine.plugins.service.ServiceControlSurface getServiceControlSurface() -> getServiceControlSurface
    io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface getBroadcastReceiverControlSurface() -> getBroadcastReceiverControlSurface
    io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface getContentProviderControlSurface() -> getContentProviderControlSurface
    java.util.Set access$000(io.flutter.embedding.engine.FlutterEngine) -> access$000
    io.flutter.plugin.platform.PlatformViewsController access$100(io.flutter.embedding.engine.FlutterEngine) -> access$100
    io.flutter.embedding.engine.systemchannels.RestorationChannel access$200(io.flutter.embedding.engine.FlutterEngine) -> access$200
io.flutter.embedding.engine.FlutterEngine$1 -> io.flutter.embedding.engine.FlutterEngine$1:
    io.flutter.embedding.engine.FlutterEngine this$0 -> this$0
    void <init>(io.flutter.embedding.engine.FlutterEngine) -> <init>
    void onPreEngineRestart() -> onPreEngineRestart
    void onEngineWillDestroy() -> onEngineWillDestroy
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener -> io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener:
    void onPreEngineRestart() -> onPreEngineRestart
    void onEngineWillDestroy() -> onEngineWillDestroy
io.flutter.embedding.engine.FlutterEngineCache -> io.flutter.embedding.engine.FlutterEngineCache:
    io.flutter.embedding.engine.FlutterEngineCache instance -> instance
    java.util.Map cachedEngines -> cachedEngines
    io.flutter.embedding.engine.FlutterEngineCache getInstance() -> getInstance
    void <init>() -> <init>
    boolean contains(java.lang.String) -> contains
    io.flutter.embedding.engine.FlutterEngine get(java.lang.String) -> get
    void put(java.lang.String,io.flutter.embedding.engine.FlutterEngine) -> put
    void remove(java.lang.String) -> remove
    void clear() -> clear
io.flutter.embedding.engine.FlutterEngineConnectionRegistry -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry:
    java.lang.String TAG -> TAG
    java.util.Map plugins -> plugins
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding -> pluginBinding
    java.util.Map activityAwarePlugins -> activityAwarePlugins
    android.app.Activity activity -> activity
    io.flutter.embedding.android.ExclusiveAppComponent exclusiveActivity -> exclusiveActivity
    io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding activityPluginBinding -> activityPluginBinding
    boolean isWaitingForActivityReattachment -> isWaitingForActivityReattachment
    java.util.Map serviceAwarePlugins -> serviceAwarePlugins
    android.app.Service service -> service
    io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding servicePluginBinding -> servicePluginBinding
    java.util.Map broadcastReceiverAwarePlugins -> broadcastReceiverAwarePlugins
    android.content.BroadcastReceiver broadcastReceiver -> broadcastReceiver
    io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding broadcastReceiverPluginBinding -> broadcastReceiverPluginBinding
    java.util.Map contentProviderAwarePlugins -> contentProviderAwarePlugins
    android.content.ContentProvider contentProvider -> contentProvider
    io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding contentProviderPluginBinding -> contentProviderPluginBinding
    void <init>(android.content.Context,io.flutter.embedding.engine.FlutterEngine,io.flutter.embedding.engine.loader.FlutterLoader) -> <init>
    void destroy() -> destroy
    void add(io.flutter.embedding.engine.plugins.FlutterPlugin) -> add
    void add(java.util.Set) -> add
    boolean has(java.lang.Class) -> has
    io.flutter.embedding.engine.plugins.FlutterPlugin get(java.lang.Class) -> get
    void remove(java.lang.Class) -> remove
    void remove(java.util.Set) -> remove
    void removeAll() -> removeAll
    void detachFromAppComponent() -> detachFromAppComponent
    boolean isAttachedToActivity() -> isAttachedToActivity
    android.app.Activity attachedActivity() -> attachedActivity
    void attachToActivity(android.app.Activity,androidx.lifecycle.Lifecycle) -> attachToActivity
    void attachToActivity(io.flutter.embedding.android.ExclusiveAppComponent,androidx.lifecycle.Lifecycle) -> attachToActivity
    void attachToActivityInternal(android.app.Activity,androidx.lifecycle.Lifecycle) -> attachToActivityInternal
    void detachFromActivityForConfigChanges() -> detachFromActivityForConfigChanges
    void detachFromActivity() -> detachFromActivity
    void detachFromActivityInternal() -> detachFromActivityInternal
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    boolean isAttachedToService() -> isAttachedToService
    void attachToService(android.app.Service,androidx.lifecycle.Lifecycle,boolean) -> attachToService
    void detachFromService() -> detachFromService
    void onMoveToForeground() -> onMoveToForeground
    void onMoveToBackground() -> onMoveToBackground
    boolean isAttachedToBroadcastReceiver() -> isAttachedToBroadcastReceiver
    void attachToBroadcastReceiver(android.content.BroadcastReceiver,androidx.lifecycle.Lifecycle) -> attachToBroadcastReceiver
    void detachFromBroadcastReceiver() -> detachFromBroadcastReceiver
    boolean isAttachedToContentProvider() -> isAttachedToContentProvider
    void attachToContentProvider(android.content.ContentProvider,androidx.lifecycle.Lifecycle) -> attachToContentProvider
    void detachFromContentProvider() -> detachFromContentProvider
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$1 -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry$1:
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets:
    io.flutter.embedding.engine.loader.FlutterLoader flutterLoader -> flutterLoader
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader) -> <init>
    java.lang.String getAssetFilePathByName(java.lang.String) -> getAssetFilePathByName
    java.lang.String getAssetFilePathByName(java.lang.String,java.lang.String) -> getAssetFilePathByName
    java.lang.String getAssetFilePathBySubpath(java.lang.String) -> getAssetFilePathBySubpath
    java.lang.String getAssetFilePathBySubpath(java.lang.String,java.lang.String) -> getAssetFilePathBySubpath
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterEngineConnectionRegistry$1) -> <init>
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding:
    android.app.Activity activity -> activity
    io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference hiddenLifecycleReference -> hiddenLifecycleReference
    java.util.Set onRequestPermissionsResultListeners -> onRequestPermissionsResultListeners
    java.util.Set onActivityResultListeners -> onActivityResultListeners
    java.util.Set onNewIntentListeners -> onNewIntentListeners
    java.util.Set onUserLeaveHintListeners -> onUserLeaveHintListeners
    java.util.Set onSaveInstanceStateListeners -> onSaveInstanceStateListeners
    void <init>(android.app.Activity,androidx.lifecycle.Lifecycle) -> <init>
    android.app.Activity getActivity() -> getActivity
    java.lang.Object getLifecycle() -> getLifecycle
    void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    void removeRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> removeRequestPermissionsResultListener
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    void removeActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> removeActivityResultListener
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addOnNewIntentListener
    void removeOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> removeOnNewIntentListener
    void onNewIntent(android.content.Intent) -> onNewIntent
    void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addOnUserLeaveHintListener
    void removeOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> removeOnUserLeaveHintListener
    void addOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener) -> addOnSaveStateListener
    void removeOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener) -> removeOnSaveStateListener
    void onUserLeaveHint() -> onUserLeaveHint
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding:
    android.content.BroadcastReceiver broadcastReceiver -> broadcastReceiver
    void <init>(android.content.BroadcastReceiver) -> <init>
    android.content.BroadcastReceiver getBroadcastReceiver() -> getBroadcastReceiver
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding:
    android.content.ContentProvider contentProvider -> contentProvider
    void <init>(android.content.ContentProvider) -> <init>
    android.content.ContentProvider getContentProvider() -> getContentProvider
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding -> io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding:
    android.app.Service service -> service
    io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference hiddenLifecycleReference -> hiddenLifecycleReference
    java.util.Set onModeChangeListeners -> onModeChangeListeners
    void <init>(android.app.Service,androidx.lifecycle.Lifecycle) -> <init>
    android.app.Service getService() -> getService
    java.lang.Object getLifecycle() -> getLifecycle
    void addOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener) -> addOnModeChangeListener
    void removeOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener) -> removeOnModeChangeListener
    void onMoveToForeground() -> onMoveToForeground
    void onMoveToBackground() -> onMoveToBackground
io.flutter.embedding.engine.FlutterEngineGroup -> io.flutter.embedding.engine.FlutterEngineGroup:
    java.util.List activeEngines -> activeEngines
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,java.lang.String[]) -> <init>
    io.flutter.embedding.engine.FlutterEngine createAndRunDefaultEngine(android.content.Context) -> createAndRunDefaultEngine
    io.flutter.embedding.engine.FlutterEngine createAndRunEngine(android.content.Context,io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint) -> createAndRunEngine
    io.flutter.embedding.engine.FlutterEngine createEngine(android.content.Context) -> createEngine
io.flutter.embedding.engine.FlutterEngineGroup$1 -> io.flutter.embedding.engine.FlutterEngineGroup$1:
    io.flutter.embedding.engine.FlutterEngine val$engineToCleanUpOnDestroy -> val$engineToCleanUpOnDestroy
    io.flutter.embedding.engine.FlutterEngineGroup this$0 -> this$0
    void <init>(io.flutter.embedding.engine.FlutterEngineGroup,io.flutter.embedding.engine.FlutterEngine) -> <init>
    void onPreEngineRestart() -> onPreEngineRestart
    void onEngineWillDestroy() -> onEngineWillDestroy
io.flutter.embedding.engine.FlutterJNI -> io.flutter.embedding.engine.FlutterJNI:
    java.lang.String TAG -> TAG
    boolean loadLibraryCalled -> loadLibraryCalled
    boolean prefetchDefaultFontManagerCalled -> prefetchDefaultFontManagerCalled
    boolean initCalled -> initCalled
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> asyncWaitForVsyncDelegate
    float refreshRateFPS -> refreshRateFPS
    java.lang.String observatoryUri -> observatoryUri
    boolean setRefreshRateFPSCalled -> setRefreshRateFPSCalled
    java.lang.Long nativeShellHolderId -> nativeShellHolderId
    io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate -> accessibilityDelegate
    io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler -> platformMessageHandler
    io.flutter.plugin.localization.LocalizationPlugin localizationPlugin -> localizationPlugin
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> platformViewsController
    io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager -> deferredComponentManager
    java.util.Set engineLifecycleListeners -> engineLifecycleListeners
    java.util.Set flutterUiDisplayListeners -> flutterUiDisplayListeners
    android.os.Looper mainLooper -> mainLooper
    void loadLibrary() -> loadLibrary
    void prefetchDefaultFontManager() -> prefetchDefaultFontManager
    void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long) -> init
    void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long) -> nativeInit
    void nativePrefetchDefaultFontManager() -> nativePrefetchDefaultFontManager
    boolean nativeGetIsSoftwareRenderingEnabled() -> nativeGetIsSoftwareRenderingEnabled
    boolean getIsSoftwareRenderingEnabled() -> getIsSoftwareRenderingEnabled
    java.lang.String getObservatoryUri() -> getObservatoryUri
    void setRefreshRateFPS(float) -> setRefreshRateFPS
    void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate) -> setAsyncWaitForVsyncDelegate
    void asyncWaitForVsync(long) -> asyncWaitForVsync
    void nativeOnVsync(long,long,long) -> nativeOnVsync
    io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long) -> nativeLookupCallbackInformation
    boolean nativeFlutterTextUtilsIsEmoji(int) -> nativeFlutterTextUtilsIsEmoji
    boolean nativeFlutterTextUtilsIsEmojiModifier(int) -> nativeFlutterTextUtilsIsEmojiModifier
    boolean nativeFlutterTextUtilsIsEmojiModifierBase(int) -> nativeFlutterTextUtilsIsEmojiModifierBase
    boolean nativeFlutterTextUtilsIsVariationSelector(int) -> nativeFlutterTextUtilsIsVariationSelector
    boolean nativeFlutterTextUtilsIsRegionalIndicator(int) -> nativeFlutterTextUtilsIsRegionalIndicator
    void <init>() -> <init>
    boolean isAttached() -> isAttached
    void attachToNative(boolean) -> attachToNative
    long performNativeAttach(io.flutter.embedding.engine.FlutterJNI,boolean) -> performNativeAttach
    long nativeAttach(io.flutter.embedding.engine.FlutterJNI,boolean) -> nativeAttach
    io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String) -> spawn
    io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String) -> nativeSpawn
    void detachFromNativeAndReleaseResources() -> detachFromNativeAndReleaseResources
    void nativeDestroy(long) -> nativeDestroy
    void ensureNotAttachedToNative() -> ensureNotAttachedToNative
    void ensureAttachedToNative() -> ensureAttachedToNative
    void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> addIsDisplayingFlutterUiListener
    void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> removeIsDisplayingFlutterUiListener
    void nativeImageHeaderCallback(long,int,int) -> nativeImageHeaderCallback
    android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long) -> decodeImage
    void onFirstFrame() -> onFirstFrame
    void onRenderingStopped() -> onRenderingStopped
    void onSurfaceCreated(android.view.Surface) -> onSurfaceCreated
    void nativeSurfaceCreated(long,android.view.Surface) -> nativeSurfaceCreated
    void onSurfaceWindowChanged(android.view.Surface) -> onSurfaceWindowChanged
    void nativeSurfaceWindowChanged(long,android.view.Surface) -> nativeSurfaceWindowChanged
    void onSurfaceChanged(int,int) -> onSurfaceChanged
    void nativeSurfaceChanged(long,int,int) -> nativeSurfaceChanged
    void onSurfaceDestroyed() -> onSurfaceDestroyed
    void nativeSurfaceDestroyed(long) -> nativeSurfaceDestroyed
    void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> setViewportMetrics
    void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> nativeSetViewportMetrics
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> dispatchPointerDataPacket
    void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int) -> nativeDispatchPointerDataPacket
    void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController) -> setPlatformViewsController
    void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate) -> setAccessibilityDelegate
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[]) -> updateSemantics
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int) -> dispatchSemanticsAction
    void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int) -> nativeDispatchSemanticsAction
    void setSemanticsEnabled(boolean) -> setSemanticsEnabled
    void nativeSetSemanticsEnabled(long,boolean) -> nativeSetSemanticsEnabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void nativeSetAccessibilityFeatures(long,int) -> nativeSetAccessibilityFeatures
    void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper) -> registerTexture
    void nativeRegisterTexture(long,long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper) -> nativeRegisterTexture
    void markTextureFrameAvailable(long) -> markTextureFrameAvailable
    void nativeMarkTextureFrameAvailable(long,long) -> nativeMarkTextureFrameAvailable
    void unregisterTexture(long) -> unregisterTexture
    void nativeUnregisterTexture(long,long) -> nativeUnregisterTexture
    void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> runBundleAndSnapshotFromLibrary
    void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> nativeRunBundleAndSnapshotFromLibrary
    void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler) -> setPlatformMessageHandler
    void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int) -> handlePlatformMessage
    void handlePlatformMessageResponse(int,java.nio.ByteBuffer) -> handlePlatformMessageResponse
    void dispatchEmptyPlatformMessage(java.lang.String,int) -> dispatchEmptyPlatformMessage
    void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int) -> nativeDispatchEmptyPlatformMessage
    void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int) -> dispatchPlatformMessage
    void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int) -> nativeDispatchPlatformMessage
    void invokePlatformMessageEmptyResponseCallback(int) -> invokePlatformMessageEmptyResponseCallback
    void nativeInvokePlatformMessageEmptyResponseCallback(long,int) -> nativeInvokePlatformMessageEmptyResponseCallback
    void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int) -> invokePlatformMessageResponseCallback
    void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int) -> nativeInvokePlatformMessageResponseCallback
    void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> addEngineLifecycleListener
    void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> removeEngineLifecycleListener
    void onPreEngineRestart() -> onPreEngineRestart
    void onDisplayOverlaySurface(int,int,int,int,int) -> onDisplayOverlaySurface
    void onBeginFrame() -> onBeginFrame
    void onEndFrame() -> onEndFrame
    io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface() -> createOverlaySurface
    void destroyOverlaySurfaces() -> destroyOverlaySurfaces
    void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin) -> setLocalizationPlugin
    java.lang.String[] computePlatformResolvedLocale(java.lang.String[]) -> computePlatformResolvedLocale
    void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager) -> setDeferredComponentManager
    void requestDartDeferredLibrary(int) -> requestDartDeferredLibrary
    void loadDartDeferredLibrary(int,java.lang.String[]) -> loadDartDeferredLibrary
    void nativeLoadDartDeferredLibrary(long,int,java.lang.String[]) -> nativeLoadDartDeferredLibrary
    void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String) -> updateJavaAssetManager
    void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String) -> nativeUpdateJavaAssetManager
    void deferredComponentInstallFailure(int,java.lang.String,boolean) -> deferredComponentInstallFailure
    void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean) -> nativeDeferredComponentInstallFailure
    void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack) -> onDisplayPlatformView
    android.graphics.Bitmap getBitmap() -> getBitmap
    android.graphics.Bitmap nativeGetBitmap(long) -> nativeGetBitmap
    void notifyLowMemoryWarning() -> notifyLowMemoryWarning
    void nativeNotifyLowMemoryWarning(long) -> nativeNotifyLowMemoryWarning
    void ensureRunningOnMainThread() -> ensureRunningOnMainThread
    void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source) -> lambda$decodeImage$0
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate -> io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate:
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[]) -> updateSemantics
io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate -> io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate:
    void asyncWaitForVsync(long) -> asyncWaitForVsync
io.flutter.embedding.engine.FlutterJNI$Factory -> io.flutter.embedding.engine.FlutterJNI$Factory:
    void <init>() -> <init>
    io.flutter.embedding.engine.FlutterJNI provideFlutterJNI() -> provideFlutterJNI
io.flutter.embedding.engine.FlutterOverlaySurface -> io.flutter.embedding.engine.FlutterOverlaySurface:
    android.view.Surface surface -> surface
    int id -> id
    void <init>(int,android.view.Surface) -> <init>
    int getId() -> getId
    android.view.Surface getSurface() -> getSurface
io.flutter.embedding.engine.FlutterShellArgs -> io.flutter.embedding.engine.FlutterShellArgs:
    java.lang.String ARG_KEY_TRACE_STARTUP -> ARG_KEY_TRACE_STARTUP
    java.lang.String ARG_TRACE_STARTUP -> ARG_TRACE_STARTUP
    java.lang.String ARG_KEY_START_PAUSED -> ARG_KEY_START_PAUSED
    java.lang.String ARG_START_PAUSED -> ARG_START_PAUSED
    java.lang.String ARG_KEY_DISABLE_SERVICE_AUTH_CODES -> ARG_KEY_DISABLE_SERVICE_AUTH_CODES
    java.lang.String ARG_DISABLE_SERVICE_AUTH_CODES -> ARG_DISABLE_SERVICE_AUTH_CODES
    java.lang.String ARG_KEY_ENDLESS_TRACE_BUFFER -> ARG_KEY_ENDLESS_TRACE_BUFFER
    java.lang.String ARG_ENDLESS_TRACE_BUFFER -> ARG_ENDLESS_TRACE_BUFFER
    java.lang.String ARG_KEY_USE_TEST_FONTS -> ARG_KEY_USE_TEST_FONTS
    java.lang.String ARG_USE_TEST_FONTS -> ARG_USE_TEST_FONTS
    java.lang.String ARG_KEY_ENABLE_DART_PROFILING -> ARG_KEY_ENABLE_DART_PROFILING
    java.lang.String ARG_ENABLE_DART_PROFILING -> ARG_ENABLE_DART_PROFILING
    java.lang.String ARG_KEY_ENABLE_SOFTWARE_RENDERING -> ARG_KEY_ENABLE_SOFTWARE_RENDERING
    java.lang.String ARG_ENABLE_SOFTWARE_RENDERING -> ARG_ENABLE_SOFTWARE_RENDERING
    java.lang.String ARG_KEY_SKIA_DETERMINISTIC_RENDERING -> ARG_KEY_SKIA_DETERMINISTIC_RENDERING
    java.lang.String ARG_SKIA_DETERMINISTIC_RENDERING -> ARG_SKIA_DETERMINISTIC_RENDERING
    java.lang.String ARG_KEY_TRACE_SKIA -> ARG_KEY_TRACE_SKIA
    java.lang.String ARG_TRACE_SKIA -> ARG_TRACE_SKIA
    java.lang.String ARG_KEY_TRACE_SKIA_ALLOWLIST -> ARG_KEY_TRACE_SKIA_ALLOWLIST
    java.lang.String ARG_TRACE_SKIA_ALLOWLIST -> ARG_TRACE_SKIA_ALLOWLIST
    java.lang.String ARG_KEY_TRACE_SYSTRACE -> ARG_KEY_TRACE_SYSTRACE
    java.lang.String ARG_TRACE_SYSTRACE -> ARG_TRACE_SYSTRACE
    java.lang.String ARG_KEY_DUMP_SHADER_SKP_ON_SHADER_COMPILATION -> ARG_KEY_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
    java.lang.String ARG_DUMP_SHADER_SKP_ON_SHADER_COMPILATION -> ARG_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
    java.lang.String ARG_KEY_CACHE_SKSL -> ARG_KEY_CACHE_SKSL
    java.lang.String ARG_CACHE_SKSL -> ARG_CACHE_SKSL
    java.lang.String ARG_KEY_PURGE_PERSISTENT_CACHE -> ARG_KEY_PURGE_PERSISTENT_CACHE
    java.lang.String ARG_PURGE_PERSISTENT_CACHE -> ARG_PURGE_PERSISTENT_CACHE
    java.lang.String ARG_KEY_VERBOSE_LOGGING -> ARG_KEY_VERBOSE_LOGGING
    java.lang.String ARG_VERBOSE_LOGGING -> ARG_VERBOSE_LOGGING
    java.lang.String ARG_KEY_OBSERVATORY_PORT -> ARG_KEY_OBSERVATORY_PORT
    java.lang.String ARG_OBSERVATORY_PORT -> ARG_OBSERVATORY_PORT
    java.lang.String ARG_KEY_DART_FLAGS -> ARG_KEY_DART_FLAGS
    java.lang.String ARG_DART_FLAGS -> ARG_DART_FLAGS
    java.util.Set args -> args
    io.flutter.embedding.engine.FlutterShellArgs fromIntent(android.content.Intent) -> fromIntent
    void <init>(java.lang.String[]) -> <init>
    void <init>(java.util.List) -> <init>
    void <init>(java.util.Set) -> <init>
    void add(java.lang.String) -> add
    void remove(java.lang.String) -> remove
    java.lang.String[] toArray() -> toArray
io.flutter.embedding.engine.dart.DartExecutor -> io.flutter.embedding.engine.dart.DartExecutor:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    android.content.res.AssetManager assetManager -> assetManager
    io.flutter.embedding.engine.dart.DartMessenger dartMessenger -> dartMessenger
    io.flutter.plugin.common.BinaryMessenger binaryMessenger -> binaryMessenger
    boolean isApplicationRunning -> isApplicationRunning
    java.lang.String isolateServiceId -> isolateServiceId
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener isolateServiceIdListener -> isolateServiceIdListener
    io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler isolateChannelMessageHandler -> isolateChannelMessageHandler
    void <init>(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager) -> <init>
    void onAttachedToJNI() -> onAttachedToJNI
    void onDetachedFromJNI() -> onDetachedFromJNI
    boolean isExecutingDart() -> isExecutingDart
    void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint) -> executeDartEntrypoint
    void executeDartCallback(io.flutter.embedding.engine.dart.DartExecutor$DartCallback) -> executeDartCallback
    io.flutter.plugin.common.BinaryMessenger getBinaryMessenger() -> getBinaryMessenger
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    int getPendingChannelResponseCount() -> getPendingChannelResponseCount
    java.lang.String getIsolateServiceId() -> getIsolateServiceId
    void setIsolateServiceIdListener(io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener) -> setIsolateServiceIdListener
    void notifyLowMemoryWarning() -> notifyLowMemoryWarning
    java.lang.String access$002(io.flutter.embedding.engine.dart.DartExecutor,java.lang.String) -> access$002
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener access$100(io.flutter.embedding.engine.dart.DartExecutor) -> access$100
    java.lang.String access$000(io.flutter.embedding.engine.dart.DartExecutor) -> access$000
io.flutter.embedding.engine.dart.DartExecutor$1 -> io.flutter.embedding.engine.dart.DartExecutor$1:
    io.flutter.embedding.engine.dart.DartExecutor this$0 -> this$0
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
io.flutter.embedding.engine.dart.DartExecutor$DartCallback -> io.flutter.embedding.engine.dart.DartExecutor$DartCallback:
    android.content.res.AssetManager androidAssetManager -> androidAssetManager
    java.lang.String pathToBundle -> pathToBundle
    io.flutter.view.FlutterCallbackInformation callbackHandle -> callbackHandle
    void <init>(android.content.res.AssetManager,java.lang.String,io.flutter.view.FlutterCallbackInformation) -> <init>
    java.lang.String toString() -> toString
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint -> io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint:
    java.lang.String pathToBundle -> pathToBundle
    java.lang.String dartEntrypointLibrary -> dartEntrypointLibrary
    java.lang.String dartEntrypointFunctionName -> dartEntrypointFunctionName
    io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint createDefault() -> createDefault
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger -> io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger:
    io.flutter.embedding.engine.dart.DartMessenger messenger -> messenger
    void <init>(io.flutter.embedding.engine.dart.DartMessenger) -> <init>
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    void <init>(io.flutter.embedding.engine.dart.DartMessenger,io.flutter.embedding.engine.dart.DartExecutor$1) -> <init>
io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener -> io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener:
    void onIsolateServiceIdAvailable(java.lang.String) -> onIsolateServiceIdAvailable
io.flutter.embedding.engine.dart.DartMessenger -> io.flutter.embedding.engine.dart.DartMessenger:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    java.util.Map messageHandlers -> messageHandlers
    java.util.Map pendingReplies -> pendingReplies
    int nextReplyId -> nextReplyId
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void handleMessageFromDart(java.lang.String,java.nio.ByteBuffer,int) -> handleMessageFromDart
    void handlePlatformMessageResponse(int,java.nio.ByteBuffer) -> handlePlatformMessageResponse
    int getPendingChannelResponseCount() -> getPendingChannelResponseCount
    void handleError(java.lang.Error) -> handleError
io.flutter.embedding.engine.dart.DartMessenger$Reply -> io.flutter.embedding.engine.dart.DartMessenger$Reply:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    int replyId -> replyId
    java.util.concurrent.atomic.AtomicBoolean done -> done
    void <init>(io.flutter.embedding.engine.FlutterJNI,int) -> <init>
    void reply(java.nio.ByteBuffer) -> reply
io.flutter.embedding.engine.dart.PlatformMessageHandler -> io.flutter.embedding.engine.dart.PlatformMessageHandler:
    void handleMessageFromDart(java.lang.String,java.nio.ByteBuffer,int) -> handleMessageFromDart
    void handlePlatformMessageResponse(int,java.nio.ByteBuffer) -> handlePlatformMessageResponse
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager -> io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager:
    void setJNI(io.flutter.embedding.engine.FlutterJNI) -> setJNI
    void setDeferredComponentChannel(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel) -> setDeferredComponentChannel
    void installDeferredComponent(int,java.lang.String) -> installDeferredComponent
    java.lang.String getDeferredComponentInstallState(int,java.lang.String) -> getDeferredComponentInstallState
    void loadAssets(int,java.lang.String) -> loadAssets
    void loadDartLibrary(int,java.lang.String) -> loadDartLibrary
    boolean uninstallDeferredComponent(int,java.lang.String) -> uninstallDeferredComponent
    void destroy() -> destroy
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager -> io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager:
    java.lang.String TAG -> TAG
    java.lang.String MAPPING_KEY -> MAPPING_KEY
    com.google.android.play.core.splitinstall.SplitInstallManager splitInstallManager -> splitInstallManager
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    io.flutter.embedding.engine.systemchannels.DeferredComponentChannel channel -> channel
    android.content.Context context -> context
    io.flutter.embedding.engine.loader.FlutterApplicationInfo flutterApplicationInfo -> flutterApplicationInfo
    android.util.SparseArray sessionIdToName -> sessionIdToName
    android.util.SparseIntArray sessionIdToLoadingUnitId -> sessionIdToLoadingUnitId
    android.util.SparseArray sessionIdToState -> sessionIdToState
    java.util.Map nameToSessionId -> nameToSessionId
    android.util.SparseArray loadingUnitIdToComponentNames -> loadingUnitIdToComponentNames
    android.util.SparseArray loadingUnitIdToSharedLibraryNames -> loadingUnitIdToSharedLibraryNames
    io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener listener -> listener
    void <init>(android.content.Context,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void setJNI(io.flutter.embedding.engine.FlutterJNI) -> setJNI
    boolean verifyJNI() -> verifyJNI
    void setDeferredComponentChannel(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel) -> setDeferredComponentChannel
    android.content.pm.ApplicationInfo getApplicationInfo() -> getApplicationInfo
    void initLoadingUnitMappingToComponentNames() -> initLoadingUnitMappingToComponentNames
    void installDeferredComponent(int,java.lang.String) -> installDeferredComponent
    java.lang.String getDeferredComponentInstallState(int,java.lang.String) -> getDeferredComponentInstallState
    void loadAssets(int,java.lang.String) -> loadAssets
    void loadDartLibrary(int,java.lang.String) -> loadDartLibrary
    boolean uninstallDeferredComponent(int,java.lang.String) -> uninstallDeferredComponent
    void destroy() -> destroy
    void lambda$installDeferredComponent$1(int,java.lang.String,java.lang.Exception) -> lambda$installDeferredComponent$1
    void lambda$installDeferredComponent$0(java.lang.String,int,java.lang.Integer) -> lambda$installDeferredComponent$0
    android.util.SparseArray access$000(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager) -> access$000
    android.util.SparseIntArray access$100(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager) -> access$100
    io.flutter.embedding.engine.FlutterJNI access$200(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager) -> access$200
    io.flutter.embedding.engine.systemchannels.DeferredComponentChannel access$300(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager) -> access$300
    android.util.SparseArray access$400(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager) -> access$400
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$1 -> io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$1:
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener -> io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener:
    io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager this$0 -> this$0
    void <init>(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager) -> <init>
    void onStateUpdate(com.google.android.play.core.splitinstall.SplitInstallSessionState) -> onStateUpdate
    void onStateUpdate(java.lang.Object) -> onStateUpdate
    void <init>(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager,io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$1) -> <init>
io.flutter.embedding.engine.loader.ApplicationInfoLoader -> io.flutter.embedding.engine.loader.ApplicationInfoLoader:
    java.lang.String PUBLIC_AOT_SHARED_LIBRARY_NAME -> PUBLIC_AOT_SHARED_LIBRARY_NAME
    java.lang.String PUBLIC_VM_SNAPSHOT_DATA_KEY -> PUBLIC_VM_SNAPSHOT_DATA_KEY
    java.lang.String PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY -> PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY
    java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY -> PUBLIC_FLUTTER_ASSETS_DIR_KEY
    java.lang.String NETWORK_POLICY_METADATA_KEY -> NETWORK_POLICY_METADATA_KEY
    java.lang.String PUBLIC_AUTOMATICALLY_REGISTER_PLUGINS_METADATA_KEY -> PUBLIC_AUTOMATICALLY_REGISTER_PLUGINS_METADATA_KEY
    void <init>() -> <init>
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) -> getApplicationInfo
    java.lang.String getString(android.os.Bundle,java.lang.String) -> getString
    boolean getBoolean(android.os.Bundle,java.lang.String,boolean) -> getBoolean
    java.lang.String getNetworkPolicy(android.content.pm.ApplicationInfo,android.content.Context) -> getNetworkPolicy
    void parseDomainConfig(android.content.res.XmlResourceParser,org.json.JSONArray,boolean) -> parseDomainConfig
    void skipTag(android.content.res.XmlResourceParser) -> skipTag
    void parseDomain(android.content.res.XmlResourceParser,org.json.JSONArray,boolean) -> parseDomain
    io.flutter.embedding.engine.loader.FlutterApplicationInfo load(android.content.Context) -> load
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.loader.FlutterApplicationInfo -> io.flutter.embedding.engine.loader.FlutterApplicationInfo:
    java.lang.String DEFAULT_AOT_SHARED_LIBRARY_NAME -> DEFAULT_AOT_SHARED_LIBRARY_NAME
    java.lang.String DEFAULT_VM_SNAPSHOT_DATA -> DEFAULT_VM_SNAPSHOT_DATA
    java.lang.String DEFAULT_ISOLATE_SNAPSHOT_DATA -> DEFAULT_ISOLATE_SNAPSHOT_DATA
    java.lang.String DEFAULT_FLUTTER_ASSETS_DIR -> DEFAULT_FLUTTER_ASSETS_DIR
    java.lang.String aotSharedLibraryName -> aotSharedLibraryName
    java.lang.String vmSnapshotData -> vmSnapshotData
    java.lang.String isolateSnapshotData -> isolateSnapshotData
    java.lang.String flutterAssetsDir -> flutterAssetsDir
    java.lang.String domainNetworkPolicy -> domainNetworkPolicy
    java.lang.String nativeLibraryDir -> nativeLibraryDir
    boolean automaticallyRegisterPlugins -> automaticallyRegisterPlugins
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> <init>
io.flutter.embedding.engine.loader.FlutterLoader -> io.flutter.embedding.engine.loader.FlutterLoader:
    java.lang.String TAG -> TAG
    java.lang.String OLD_GEN_HEAP_SIZE_META_DATA_KEY -> OLD_GEN_HEAP_SIZE_META_DATA_KEY
    java.lang.String ENABLE_SKPARAGRAPH_META_DATA_KEY -> ENABLE_SKPARAGRAPH_META_DATA_KEY
    java.lang.String AOT_SHARED_LIBRARY_NAME -> AOT_SHARED_LIBRARY_NAME
    java.lang.String SNAPSHOT_ASSET_PATH_KEY -> SNAPSHOT_ASSET_PATH_KEY
    java.lang.String VM_SNAPSHOT_DATA_KEY -> VM_SNAPSHOT_DATA_KEY
    java.lang.String ISOLATE_SNAPSHOT_DATA_KEY -> ISOLATE_SNAPSHOT_DATA_KEY
    java.lang.String FLUTTER_ASSETS_DIR_KEY -> FLUTTER_ASSETS_DIR_KEY
    java.lang.String AUTOMATICALLY_REGISTER_PLUGINS_KEY -> AUTOMATICALLY_REGISTER_PLUGINS_KEY
    java.lang.String DEFAULT_LIBRARY -> DEFAULT_LIBRARY
    java.lang.String DEFAULT_KERNEL_BLOB -> DEFAULT_KERNEL_BLOB
    io.flutter.embedding.engine.loader.FlutterLoader instance -> instance
    boolean initialized -> initialized
    io.flutter.embedding.engine.loader.FlutterLoader$Settings settings -> settings
    long initStartTimestampMillis -> initStartTimestampMillis
    io.flutter.embedding.engine.loader.FlutterApplicationInfo flutterApplicationInfo -> flutterApplicationInfo
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    java.util.concurrent.Future initResultFuture -> initResultFuture
    io.flutter.embedding.engine.loader.FlutterLoader getInstance() -> getInstance
    void <init>() -> <init>
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void startInitialization(android.content.Context) -> startInitialization
    void startInitialization(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader$Settings) -> startInitialization
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> ensureInitializationComplete
    void ensureInitializationCompleteAsync(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable) -> ensureInitializationCompleteAsync
    boolean initialized() -> initialized
    io.flutter.embedding.engine.loader.ResourceExtractor initResources(android.content.Context) -> initResources
    java.lang.String findAppBundlePath() -> findAppBundlePath
    java.lang.String getLookupKeyForAsset(java.lang.String) -> getLookupKeyForAsset
    java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String) -> getLookupKeyForAsset
    boolean automaticallyRegisterPlugins() -> automaticallyRegisterPlugins
    java.lang.String fullAssetPathFrom(java.lang.String) -> fullAssetPathFrom
    io.flutter.embedding.engine.loader.ResourceExtractor access$000(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context) -> access$000
    io.flutter.embedding.engine.FlutterJNI access$100(io.flutter.embedding.engine.loader.FlutterLoader) -> access$100
io.flutter.embedding.engine.loader.FlutterLoader$1 -> io.flutter.embedding.engine.loader.FlutterLoader$1:
    android.content.Context val$appContext -> val$appContext
    io.flutter.embedding.engine.loader.FlutterLoader this$0 -> this$0
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context) -> <init>
    io.flutter.embedding.engine.loader.FlutterLoader$InitResult call() -> call
    java.lang.Object call() -> call
io.flutter.embedding.engine.loader.FlutterLoader$1$1 -> io.flutter.embedding.engine.loader.FlutterLoader$1$1:
    io.flutter.embedding.engine.loader.FlutterLoader$1 this$1 -> this$1
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader$1) -> <init>
    void run() -> run
io.flutter.embedding.engine.loader.FlutterLoader$2 -> io.flutter.embedding.engine.loader.FlutterLoader$2:
    android.content.Context val$applicationContext -> val$applicationContext
    java.lang.String[] val$args -> val$args
    android.os.Handler val$callbackHandler -> val$callbackHandler
    java.lang.Runnable val$callback -> val$callback
    io.flutter.embedding.engine.loader.FlutterLoader this$0 -> this$0
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable) -> <init>
    void run() -> run
io.flutter.embedding.engine.loader.FlutterLoader$2$1 -> io.flutter.embedding.engine.loader.FlutterLoader$2$1:
    io.flutter.embedding.engine.loader.FlutterLoader$2 this$1 -> this$1
    void <init>(io.flutter.embedding.engine.loader.FlutterLoader$2) -> <init>
    void run() -> run
io.flutter.embedding.engine.loader.FlutterLoader$InitResult -> io.flutter.embedding.engine.loader.FlutterLoader$InitResult:
    java.lang.String appStoragePath -> appStoragePath
    java.lang.String engineCachesPath -> engineCachesPath
    java.lang.String dataDirPath -> dataDirPath
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,io.flutter.embedding.engine.loader.FlutterLoader$1) -> <init>
io.flutter.embedding.engine.loader.FlutterLoader$Settings -> io.flutter.embedding.engine.loader.FlutterLoader$Settings:
    java.lang.String logTag -> logTag
    void <init>() -> <init>
    java.lang.String getLogTag() -> getLogTag
    void setLogTag(java.lang.String) -> setLogTag
io.flutter.embedding.engine.loader.ResourceExtractor -> io.flutter.embedding.engine.loader.ResourceExtractor:
    java.lang.String TAG -> TAG
    java.lang.String TIMESTAMP_PREFIX -> TIMESTAMP_PREFIX
    java.lang.String[] SUPPORTED_ABIS -> SUPPORTED_ABIS
    java.lang.String mDataDirPath -> mDataDirPath
    java.lang.String mPackageName -> mPackageName
    android.content.pm.PackageManager mPackageManager -> mPackageManager
    android.content.res.AssetManager mAssetManager -> mAssetManager
    java.util.HashSet mResources -> mResources
    io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask mExtractTask -> mExtractTask
    long getVersionCode(android.content.pm.PackageInfo) -> getVersionCode
    void <init>(java.lang.String,java.lang.String,android.content.pm.PackageManager,android.content.res.AssetManager) -> <init>
    io.flutter.embedding.engine.loader.ResourceExtractor addResource(java.lang.String) -> addResource
    io.flutter.embedding.engine.loader.ResourceExtractor addResources(java.util.Collection) -> addResources
    io.flutter.embedding.engine.loader.ResourceExtractor start() -> start
    void waitForCompletion() -> waitForCompletion
    java.lang.String[] getExistingTimestamps(java.io.File) -> getExistingTimestamps
    void deleteFiles(java.lang.String,java.util.HashSet) -> deleteFiles
    java.lang.String checkTimestamp(java.io.File,android.content.pm.PackageManager,java.lang.String) -> checkTimestamp
    void copy(java.io.InputStream,java.io.OutputStream) -> copy
    java.lang.String[] getSupportedAbis() -> getSupportedAbis
    java.lang.String access$000(java.io.File,android.content.pm.PackageManager,java.lang.String) -> access$000
    void access$100(java.lang.String,java.util.HashSet) -> access$100
    void access$200(java.io.InputStream,java.io.OutputStream) -> access$200
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.loader.ResourceExtractor$1 -> io.flutter.embedding.engine.loader.ResourceExtractor$1:
    void <init>() -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask -> io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask:
    java.lang.String mDataDirPath -> mDataDirPath
    java.util.HashSet mResources -> mResources
    android.content.res.AssetManager mAssetManager -> mAssetManager
    java.lang.String mPackageName -> mPackageName
    android.content.pm.PackageManager mPackageManager -> mPackageManager
    void <init>(java.lang.String,java.util.HashSet,java.lang.String,android.content.pm.PackageManager,android.content.res.AssetManager) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> doInBackground
    boolean extractAPK(java.io.File) -> extractAPK
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView -> io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView:
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack mutatorsStack -> mutatorsStack
    float screenDensity -> screenDensity
    int left -> left
    int top -> top
    int prevLeft -> prevLeft
    int prevTop -> prevTop
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> androidTouchProcessor
    android.view.ViewTreeObserver$OnGlobalFocusChangeListener activeFocusListener -> activeFocusListener
    void <init>(android.content.Context,float,io.flutter.embedding.android.AndroidTouchProcessor) -> <init>
    void <init>(android.content.Context) -> <init>
    boolean childHasFocus(android.view.View) -> childHasFocus
    void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener) -> setOnDescendantFocusChangeListener
    void unsetOnDescendantFocusChangeListener() -> unsetOnDescendantFocusChangeListener
    void readyToDisplay(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,int,int,int,int) -> readyToDisplay
    void draw(android.graphics.Canvas) -> draw
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    android.graphics.Matrix getPlatformViewMatrix() -> getPlatformViewMatrix
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1 -> io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1:
    android.view.View$OnFocusChangeListener val$userFocusListener -> val$userFocusListener
    android.view.View val$mutatorView -> val$mutatorView
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView this$0 -> this$0
    void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView,android.view.View$OnFocusChangeListener,android.view.View) -> <init>
    void onGlobalFocusChanged(android.view.View,android.view.View) -> onGlobalFocusChanged
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack -> io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack:
    java.util.List mutators -> mutators
    java.util.List finalClippingPaths -> finalClippingPaths
    android.graphics.Matrix finalMatrix -> finalMatrix
    void <init>() -> <init>
    void pushTransform(float[]) -> pushTransform
    void pushClipRect(int,int,int,int) -> pushClipRect
    void pushClipRRect(int,int,int,int,float[]) -> pushClipRRect
    java.util.List getMutators() -> getMutators
    java.util.List getFinalClippingPaths() -> getFinalClippingPaths
    android.graphics.Matrix getFinalMatrix() -> getFinalMatrix
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator -> io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator:
    android.graphics.Matrix matrix -> matrix
    android.graphics.Rect rect -> rect
    android.graphics.Path path -> path
    float[] radiis -> radiis
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType type -> type
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack this$0 -> this$0
    void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect) -> <init>
    void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect,float[]) -> <init>
    void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Path) -> <init>
    void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Matrix) -> <init>
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType getType() -> getType
    android.graphics.Rect getRect() -> getRect
    android.graphics.Path getPath() -> getPath
    android.graphics.Matrix getMatrix() -> getMatrix
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType -> io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType:
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_RECT -> CLIP_RECT
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_RRECT -> CLIP_RRECT
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_PATH -> CLIP_PATH
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType TRANSFORM -> TRANSFORM
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType OPACITY -> OPACITY
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values() -> values
    io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.plugins.FlutterPlugin -> io.flutter.embedding.engine.plugins.FlutterPlugin:
    void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> onAttachedToEngine
    void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> onDetachedFromEngine
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets -> io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets:
    java.lang.String getAssetFilePathByName(java.lang.String) -> getAssetFilePathByName
    java.lang.String getAssetFilePathByName(java.lang.String,java.lang.String) -> getAssetFilePathByName
    java.lang.String getAssetFilePathBySubpath(java.lang.String) -> getAssetFilePathBySubpath
    java.lang.String getAssetFilePathBySubpath(java.lang.String,java.lang.String) -> getAssetFilePathBySubpath
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding -> io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding:
    android.content.Context applicationContext -> applicationContext
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    io.flutter.plugin.common.BinaryMessenger binaryMessenger -> binaryMessenger
    io.flutter.view.TextureRegistry textureRegistry -> textureRegistry
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry -> platformViewRegistry
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets flutterAssets -> flutterAssets
    void <init>(android.content.Context,io.flutter.embedding.engine.FlutterEngine,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry,io.flutter.plugin.platform.PlatformViewRegistry,io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets) -> <init>
    android.content.Context getApplicationContext() -> getApplicationContext
    io.flutter.embedding.engine.FlutterEngine getFlutterEngine() -> getFlutterEngine
    io.flutter.plugin.common.BinaryMessenger getBinaryMessenger() -> getBinaryMessenger
    io.flutter.view.TextureRegistry getTextureRegistry() -> getTextureRegistry
    io.flutter.plugin.platform.PlatformViewRegistry getPlatformViewRegistry() -> getPlatformViewRegistry
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets getFlutterAssets() -> getFlutterAssets
io.flutter.embedding.engine.plugins.PluginRegistry -> io.flutter.embedding.engine.plugins.PluginRegistry:
    void add(io.flutter.embedding.engine.plugins.FlutterPlugin) -> add
    void add(java.util.Set) -> add
    boolean has(java.lang.Class) -> has
    io.flutter.embedding.engine.plugins.FlutterPlugin get(java.lang.Class) -> get
    void remove(java.lang.Class) -> remove
    void remove(java.util.Set) -> remove
    void removeAll() -> removeAll
io.flutter.embedding.engine.plugins.activity.ActivityAware -> io.flutter.embedding.engine.plugins.activity.ActivityAware:
    void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> onAttachedToActivity
    void onDetachedFromActivityForConfigChanges() -> onDetachedFromActivityForConfigChanges
    void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> onReattachedToActivityForConfigChanges
    void onDetachedFromActivity() -> onDetachedFromActivity
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface -> io.flutter.embedding.engine.plugins.activity.ActivityControlSurface:
    void attachToActivity(android.app.Activity,androidx.lifecycle.Lifecycle) -> attachToActivity
    void attachToActivity(io.flutter.embedding.android.ExclusiveAppComponent,androidx.lifecycle.Lifecycle) -> attachToActivity
    void detachFromActivityForConfigChanges() -> detachFromActivityForConfigChanges
    void detachFromActivity() -> detachFromActivity
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding -> io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding:
    android.app.Activity getActivity() -> getActivity
    java.lang.Object getLifecycle() -> getLifecycle
    void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    void removeRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> removeRequestPermissionsResultListener
    void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    void removeActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> removeActivityResultListener
    void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addOnNewIntentListener
    void removeOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> removeOnNewIntentListener
    void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addOnUserLeaveHintListener
    void removeOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> removeOnUserLeaveHintListener
    void addOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener) -> addOnSaveStateListener
    void removeOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener) -> removeOnSaveStateListener
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener -> io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener:
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverAware -> io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverAware:
    void onAttachedToBroadcastReceiver(io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding) -> onAttachedToBroadcastReceiver
    void onDetachedFromBroadcastReceiver() -> onDetachedFromBroadcastReceiver
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface -> io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface:
    void attachToBroadcastReceiver(android.content.BroadcastReceiver,androidx.lifecycle.Lifecycle) -> attachToBroadcastReceiver
    void detachFromBroadcastReceiver() -> detachFromBroadcastReceiver
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding -> io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding:
    android.content.BroadcastReceiver getBroadcastReceiver() -> getBroadcastReceiver
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderAware -> io.flutter.embedding.engine.plugins.contentprovider.ContentProviderAware:
    void onAttachedToContentProvider(io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding) -> onAttachedToContentProvider
    void onDetachedFromContentProvider() -> onDetachedFromContentProvider
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface -> io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface:
    void attachToContentProvider(android.content.ContentProvider,androidx.lifecycle.Lifecycle) -> attachToContentProvider
    void detachFromContentProvider() -> detachFromContentProvider
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding -> io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding:
    android.content.ContentProvider getContentProvider() -> getContentProvider
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference -> io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference:
    androidx.lifecycle.Lifecycle lifecycle -> lifecycle
    void <init>(androidx.lifecycle.Lifecycle) -> <init>
    androidx.lifecycle.Lifecycle getLifecycle() -> getLifecycle
io.flutter.embedding.engine.plugins.service.ServiceAware -> io.flutter.embedding.engine.plugins.service.ServiceAware:
    void onAttachedToService(io.flutter.embedding.engine.plugins.service.ServicePluginBinding) -> onAttachedToService
    void onDetachedFromService() -> onDetachedFromService
io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener -> io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener:
    void onMoveToForeground() -> onMoveToForeground
    void onMoveToBackground() -> onMoveToBackground
io.flutter.embedding.engine.plugins.service.ServiceControlSurface -> io.flutter.embedding.engine.plugins.service.ServiceControlSurface:
    void attachToService(android.app.Service,androidx.lifecycle.Lifecycle,boolean) -> attachToService
    void detachFromService() -> detachFromService
    void onMoveToForeground() -> onMoveToForeground
    void onMoveToBackground() -> onMoveToBackground
io.flutter.embedding.engine.plugins.service.ServicePluginBinding -> io.flutter.embedding.engine.plugins.service.ServicePluginBinding:
    android.app.Service getService() -> getService
    java.lang.Object getLifecycle() -> getLifecycle
    void addOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener) -> addOnModeChangeListener
    void removeOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener) -> removeOnModeChangeListener
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry -> io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> flutterEngine
    java.util.Map pluginMap -> pluginMap
    io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate shimRegistrarAggregate -> shimRegistrarAggregate
    void <init>(io.flutter.embedding.engine.FlutterEngine) -> <init>
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1 -> io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1:
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate -> io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate:
    java.util.Set shimRegistrars -> shimRegistrars
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding -> flutterPluginBinding
    io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding -> activityPluginBinding
    void <init>() -> <init>
    void addPlugin(io.flutter.embedding.engine.plugins.shim.ShimRegistrar) -> addPlugin
    void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> onAttachedToEngine
    void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> onDetachedFromEngine
    void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> onAttachedToActivity
    void onDetachedFromActivityForConfigChanges() -> onDetachedFromActivityForConfigChanges
    void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> onReattachedToActivityForConfigChanges
    void onDetachedFromActivity() -> onDetachedFromActivity
    void <init>(io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1) -> <init>
io.flutter.embedding.engine.plugins.shim.ShimRegistrar -> io.flutter.embedding.engine.plugins.shim.ShimRegistrar:
    java.lang.String TAG -> TAG
    java.util.Map globalRegistrarMap -> globalRegistrarMap
    java.lang.String pluginId -> pluginId
    java.util.Set viewDestroyListeners -> viewDestroyListeners
    java.util.Set requestPermissionsResultListeners -> requestPermissionsResultListeners
    java.util.Set activityResultListeners -> activityResultListeners
    java.util.Set newIntentListeners -> newIntentListeners
    java.util.Set userLeaveHintListeners -> userLeaveHintListeners
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding -> pluginBinding
    io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding -> activityPluginBinding
    void <init>(java.lang.String,java.util.Map) -> <init>
    android.app.Activity activity() -> activity
    android.content.Context context() -> context
    android.content.Context activeContext() -> activeContext
    io.flutter.plugin.common.BinaryMessenger messenger() -> messenger
    io.flutter.view.TextureRegistry textures() -> textures
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> platformViewRegistry
    io.flutter.view.FlutterView view() -> view
    java.lang.String lookupKeyForAsset(java.lang.String) -> lookupKeyForAsset
    java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String) -> lookupKeyForAsset
    io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object) -> publish
    io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addNewIntentListener
    io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addUserLeaveHintListener
    io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener) -> addViewDestroyListener
    void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> onAttachedToEngine
    void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> onDetachedFromEngine
    void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> onAttachedToActivity
    void onDetachedFromActivityForConfigChanges() -> onDetachedFromActivityForConfigChanges
    void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> onReattachedToActivityForConfigChanges
    void onDetachedFromActivity() -> onDetachedFromActivity
    void addExistingListenersToActivityPluginBinding() -> addExistingListenersToActivityPluginBinding
io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister -> io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    void registerGeneratedPlugins(io.flutter.embedding.engine.FlutterEngine) -> registerGeneratedPlugins
io.flutter.embedding.engine.renderer.FlutterRenderer -> io.flutter.embedding.engine.renderer.FlutterRenderer:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    java.util.concurrent.atomic.AtomicLong nextTextureId -> nextTextureId
    android.view.Surface surface -> surface
    boolean isDisplayingFlutterUi -> isDisplayingFlutterUi
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> flutterUiDisplayListener
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    boolean isDisplayingFlutterUi() -> isDisplayingFlutterUi
    void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> addIsDisplayingFlutterUiListener
    void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> removeIsDisplayingFlutterUiListener
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> createSurfaceTexture
    void startRenderingToSurface(android.view.Surface) -> startRenderingToSurface
    void swapSurface(android.view.Surface) -> swapSurface
    void surfaceChanged(int,int) -> surfaceChanged
    void stopRenderingToSurface() -> stopRenderingToSurface
    void setViewportMetrics(io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics) -> setViewportMetrics
    android.graphics.Bitmap getBitmap() -> getBitmap
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> dispatchPointerDataPacket
    void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper) -> registerTexture
    void markTextureFrameAvailable(long) -> markTextureFrameAvailable
    void unregisterTexture(long) -> unregisterTexture
    boolean isSoftwareRenderingEnabled() -> isSoftwareRenderingEnabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void setSemanticsEnabled(boolean) -> setSemanticsEnabled
    void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int) -> dispatchSemanticsAction
    boolean access$002(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean) -> access$002
    io.flutter.embedding.engine.FlutterJNI access$200(io.flutter.embedding.engine.renderer.FlutterRenderer) -> access$200
    void access$400(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> access$400
    void access$500(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> access$500
io.flutter.embedding.engine.renderer.FlutterRenderer$1 -> io.flutter.embedding.engine.renderer.FlutterRenderer$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> this$0
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry -> io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry:
    long id -> id
    io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper -> textureWrapper
    boolean released -> released
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> onFrameListener
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> this$0
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture) -> <init>
    io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper() -> textureWrapper
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    long id() -> id
    void release() -> release
    boolean access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> access$100
    long access$300(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> access$300
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1 -> io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1 -> this$1
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics -> io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics:
    int unsetValue -> unsetValue
    float devicePixelRatio -> devicePixelRatio
    int width -> width
    int height -> height
    int viewPaddingTop -> viewPaddingTop
    int viewPaddingRight -> viewPaddingRight
    int viewPaddingBottom -> viewPaddingBottom
    int viewPaddingLeft -> viewPaddingLeft
    int viewInsetTop -> viewInsetTop
    int viewInsetRight -> viewInsetRight
    int viewInsetBottom -> viewInsetBottom
    int viewInsetLeft -> viewInsetLeft
    int systemGestureInsetTop -> systemGestureInsetTop
    int systemGestureInsetRight -> systemGestureInsetRight
    int systemGestureInsetBottom -> systemGestureInsetBottom
    int systemGestureInsetLeft -> systemGestureInsetLeft
    int physicalTouchSlop -> physicalTouchSlop
    void <init>() -> <init>
    boolean validate() -> validate
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener -> io.flutter.embedding.engine.renderer.FlutterUiDisplayListener:
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.embedding.engine.renderer.RenderSurface -> io.flutter.embedding.engine.renderer.RenderSurface:
    io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer() -> getAttachedRenderer
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToRenderer
    void detachFromRenderer() -> detachFromRenderer
    void pause() -> pause
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper -> io.flutter.embedding.engine.renderer.SurfaceTextureWrapper:
    android.graphics.SurfaceTexture surfaceTexture -> surfaceTexture
    boolean released -> released
    void <init>(android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    void updateTexImage() -> updateTexImage
    void release() -> release
    void attachToGLContext(int) -> attachToGLContext
    void detachFromGLContext() -> detachFromGLContext
    void getTransformMatrix(float[]) -> getTransformMatrix
io.flutter.embedding.engine.systemchannels.AccessibilityChannel -> io.flutter.embedding.engine.systemchannels.AccessibilityChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler -> handler
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler -> parsingMessageHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void onAndroidAccessibilityEnabled() -> onAndroidAccessibilityEnabled
    void onAndroidAccessibilityDisabled() -> onAndroidAccessibilityDisabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> dispatchSemanticsAction
    void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler) -> setAccessibilityMessageHandler
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> access$000
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1 -> io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1:
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> <init>
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> onMessage
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler -> io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler:
    void announce(java.lang.String) -> announce
    void onTap(int) -> onTap
    void onLongPress(int) -> onLongPress
    void onTooltip(java.lang.String) -> onTooltip
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel -> io.flutter.embedding.engine.systemchannels.DeferredComponentChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager -> deferredComponentManager
    java.util.Map componentNameToResults -> componentNameToResults
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler -> parsingMethodHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager) -> setDeferredComponentManager
    void completeInstallSuccess(java.lang.String) -> completeInstallSuccess
    void completeInstallError(java.lang.String,java.lang.String) -> completeInstallError
    io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager access$000(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel) -> access$000
    java.util.Map access$100(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel) -> access$100
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1 -> io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1:
    io.flutter.embedding.engine.systemchannels.DeferredComponentChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.KeyEventChannel -> io.flutter.embedding.engine.systemchannels.KeyEventChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.plugin.common.BinaryMessenger) -> <init>
    void sendFlutterKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,boolean,io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler) -> sendFlutterKeyEvent
    java.util.Map encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,boolean) -> encodeKeyEvent
    io.flutter.plugin.common.BasicMessageChannel$Reply createReplyHandler(io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler) -> createReplyHandler
    void lambda$createReplyHandler$0(io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler,java.lang.Object) -> lambda$createReplyHandler$0
io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler -> io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler:
    void onFrameworkResponse(boolean) -> onFrameworkResponse
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent -> io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent:
    android.view.KeyEvent event -> event
    java.lang.Character complexCharacter -> complexCharacter
    void <init>(android.view.KeyEvent) -> <init>
    void <init>(android.view.KeyEvent,java.lang.Character) -> <init>
io.flutter.embedding.engine.systemchannels.LifecycleChannel -> io.flutter.embedding.engine.systemchannels.LifecycleChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void appIsInactive() -> appIsInactive
    void appIsResumed() -> appIsResumed
    void appIsPaused() -> appIsPaused
    void appIsDetached() -> appIsDetached
io.flutter.embedding.engine.systemchannels.LocalizationChannel -> io.flutter.embedding.engine.systemchannels.LocalizationChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler localizationMessageHandler -> localizationMessageHandler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> handler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setLocalizationMessageHandler(io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler) -> setLocalizationMessageHandler
    void sendLocales(java.util.List) -> sendLocales
    io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler access$000(io.flutter.embedding.engine.systemchannels.LocalizationChannel) -> access$000
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1 -> io.flutter.embedding.engine.systemchannels.LocalizationChannel$1:
    io.flutter.embedding.engine.systemchannels.LocalizationChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.LocalizationChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler -> io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler:
    java.lang.String getStringResource(java.lang.String,java.lang.String) -> getStringResource
io.flutter.embedding.engine.systemchannels.MouseCursorChannel -> io.flutter.embedding.engine.systemchannels.MouseCursorChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler mouseCursorMethodHandler -> mouseCursorMethodHandler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler -> parsingMethodCallHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setMethodHandler(io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler) -> setMethodHandler
    void synthesizeMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> synthesizeMethodCall
    io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler access$000(io.flutter.embedding.engine.systemchannels.MouseCursorChannel) -> access$000
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1 -> io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1:
    io.flutter.embedding.engine.systemchannels.MouseCursorChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.MouseCursorChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler -> io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler:
    void activateSystemCursor(java.lang.String) -> activateSystemCursor
io.flutter.embedding.engine.systemchannels.NavigationChannel -> io.flutter.embedding.engine.systemchannels.NavigationChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void pushRoute(java.lang.String) -> pushRoute
    void popRoute() -> popRoute
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> setMethodCallHandler
io.flutter.embedding.engine.systemchannels.PlatformChannel -> io.flutter.embedding.engine.systemchannels.PlatformChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler -> platformMessageHandler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler -> parsingMethodCallHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler) -> setPlatformMessageHandler
    void systemChromeChanged(boolean) -> systemChromeChanged
    int decodeOrientations(org.json.JSONArray) -> decodeOrientations
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject) -> decodeAppSwitcherDescription
    java.util.List decodeSystemUiOverlays(org.json.JSONArray) -> decodeSystemUiOverlays
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode decodeSystemUiMode(java.lang.String) -> decodeSystemUiMode
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject) -> decodeSystemChromeStyle
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> access$000
    int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> access$100
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> access$200
    java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> access$300
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,java.lang.String) -> access$400
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$500(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> access$500
io.flutter.embedding.engine.systemchannels.PlatformChannel$1 -> io.flutter.embedding.engine.systemchannels.PlatformChannel$1:
    io.flutter.embedding.engine.systemchannels.PlatformChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.PlatformChannel$2 -> io.flutter.embedding.engine.systemchannels.PlatformChannel$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiMode -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiMode
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription -> io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription:
    int color -> color
    java.lang.String label -> label
    void <init>(int,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness -> io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT -> LIGHT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK -> DARK
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat -> io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT -> PLAIN_TEXT
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation -> io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP -> PORTRAIT_UP
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN -> PORTRAIT_DOWN
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT -> LANDSCAPE_LEFT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT -> LANDSCAPE_RIGHT
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType -> io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD -> STANDARD
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT -> LIGHT_IMPACT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT -> MEDIUM_IMPACT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT -> HEAVY_IMPACT
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK -> SELECTION_CLICK
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler -> io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler:
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> playSystemSound
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> vibrateHapticFeedback
    void setPreferredOrientations(int) -> setPreferredOrientations
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> setApplicationSwitcherDescription
    void showSystemOverlays(java.util.List) -> showSystemOverlays
    void showSystemUiMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode) -> showSystemUiMode
    void setSystemUiChangeListener() -> setSystemUiChangeListener
    void restoreSystemUiOverlays() -> restoreSystemUiOverlays
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> setSystemUiOverlayStyle
    void popSystemNavigator() -> popSystemNavigator
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> getClipboardData
    void setClipboardData(java.lang.String) -> setClipboardData
    boolean clipboardHasStrings() -> clipboardHasStrings
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK -> CLICK
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType ALERT -> ALERT
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle:
    java.lang.Integer statusBarColor -> statusBarColor
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness -> statusBarIconBrightness
    boolean systemStatusBarContrastEnforced -> systemStatusBarContrastEnforced
    java.lang.Integer systemNavigationBarColor -> systemNavigationBarColor
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness -> systemNavigationBarIconBrightness
    java.lang.Integer systemNavigationBarDividerColor -> systemNavigationBarDividerColor
    boolean systemNavigationBarContrastEnforced -> systemNavigationBarContrastEnforced
    void <init>(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,boolean,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,boolean) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode LEAN_BACK -> LEAN_BACK
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode IMMERSIVE -> IMMERSIVE
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode IMMERSIVE_STICKY -> IMMERSIVE_STICKY
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode EDGE_TO_EDGE -> EDGE_TO_EDGE
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay -> io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS -> TOP_OVERLAYS
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS -> BOTTOM_OVERLAYS
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler handler -> handler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingHandler -> parsingHandler
    void invokeViewFocused(int) -> invokeViewFocused
    java.lang.String detailedExceptionString(java.lang.Exception) -> detailedExceptionString
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformViewsHandler(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler) -> setPlatformViewsHandler
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> access$000
    java.lang.String access$100(java.lang.Exception) -> access$100
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1:
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
    void create(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> create
    void dispose(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> dispose
    void resize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> resize
    void touch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> touch
    void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> setDirection
    void clearFocus(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> clearFocus
    void synchronizeToNativeViewHierarchy(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> synchronizeToNativeViewHierarchy
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1 -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 this$1 -> this$1
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void run() -> run
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest:
    int viewId -> viewId
    java.lang.String viewType -> viewType
    double logicalWidth -> logicalWidth
    double logicalHeight -> logicalHeight
    int direction -> direction
    java.nio.ByteBuffer params -> params
    void <init>(int,java.lang.String,double,double,int,java.nio.ByteBuffer) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest:
    int viewId -> viewId
    double newLogicalWidth -> newLogicalWidth
    double newLogicalHeight -> newLogicalHeight
    void <init>(int,double,double) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch:
    int viewId -> viewId
    java.lang.Number downTime -> downTime
    java.lang.Number eventTime -> eventTime
    int action -> action
    int pointerCount -> pointerCount
    java.lang.Object rawPointerPropertiesList -> rawPointerPropertiesList
    java.lang.Object rawPointerCoords -> rawPointerCoords
    int metaState -> metaState
    int buttonState -> buttonState
    float xPrecision -> xPrecision
    float yPrecision -> yPrecision
    int deviceId -> deviceId
    int edgeFlags -> edgeFlags
    int source -> source
    int flags -> flags
    long motionEventId -> motionEventId
    void <init>(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int,long) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler -> io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler:
    void createAndroidViewForPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> createAndroidViewForPlatformView
    void disposeAndroidViewForPlatformView(int) -> disposeAndroidViewForPlatformView
    long createVirtualDisplayForPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> createVirtualDisplayForPlatformView
    void disposeVirtualDisplayForPlatformView(int) -> disposeVirtualDisplayForPlatformView
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> resizePlatformView
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> onTouch
    void setDirection(int,int) -> setDirection
    void clearFocus(int) -> clearFocus
    void synchronizeToNativeViewHierarchy(boolean) -> synchronizeToNativeViewHierarchy
io.flutter.embedding.engine.systemchannels.RestorationChannel -> io.flutter.embedding.engine.systemchannels.RestorationChannel:
    java.lang.String TAG -> TAG
    boolean waitForRestorationData -> waitForRestorationData
    byte[] restorationData -> restorationData
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.plugin.common.MethodChannel$Result pendingFrameworkRestorationChannelRequest -> pendingFrameworkRestorationChannelRequest
    boolean engineHasProvidedData -> engineHasProvidedData
    boolean frameworkHasRequestedData -> frameworkHasRequestedData
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> handler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor,boolean) -> <init>
    void <init>(io.flutter.plugin.common.MethodChannel,boolean) -> <init>
    byte[] getRestorationData() -> getRestorationData
    void setRestorationData(byte[]) -> setRestorationData
    void clearData() -> clearData
    java.util.Map packageData(byte[]) -> packageData
    byte[] access$002(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[]) -> access$002
    boolean access$102(io.flutter.embedding.engine.systemchannels.RestorationChannel,boolean) -> access$102
    boolean access$200(io.flutter.embedding.engine.systemchannels.RestorationChannel) -> access$200
    byte[] access$000(io.flutter.embedding.engine.systemchannels.RestorationChannel) -> access$000
    java.util.Map access$300(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[]) -> access$300
    io.flutter.plugin.common.MethodChannel$Result access$402(io.flutter.embedding.engine.systemchannels.RestorationChannel,io.flutter.plugin.common.MethodChannel$Result) -> access$402
io.flutter.embedding.engine.systemchannels.RestorationChannel$1 -> io.flutter.embedding.engine.systemchannels.RestorationChannel$1:
    byte[] val$data -> val$data
    io.flutter.embedding.engine.systemchannels.RestorationChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[]) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.embedding.engine.systemchannels.RestorationChannel$2 -> io.flutter.embedding.engine.systemchannels.RestorationChannel$2:
    io.flutter.embedding.engine.systemchannels.RestorationChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.RestorationChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.SettingsChannel -> io.flutter.embedding.engine.systemchannels.SettingsChannel:
    java.lang.String TAG -> TAG
    java.lang.String CHANNEL_NAME -> CHANNEL_NAME
    java.lang.String TEXT_SCALE_FACTOR -> TEXT_SCALE_FACTOR
    java.lang.String ALWAYS_USE_24_HOUR_FORMAT -> ALWAYS_USE_24_HOUR_FORMAT
    java.lang.String PLATFORM_BRIGHTNESS -> PLATFORM_BRIGHTNESS
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage() -> startMessage
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder -> io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder:
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    java.util.Map message -> message
    void <init>(io.flutter.plugin.common.BasicMessageChannel) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float) -> setTextScaleFactor
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean) -> setUse24HourFormat
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness) -> setPlatformBrightness
    void send() -> send
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness -> io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness:
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light -> light
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark -> dark
    java.lang.String name -> name
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.SystemChannel -> io.flutter.embedding.engine.systemchannels.SystemChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BasicMessageChannel channel -> channel
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendMemoryPressureWarning() -> sendMemoryPressureWarning
io.flutter.embedding.engine.systemchannels.TextInputChannel -> io.flutter.embedding.engine.systemchannels.TextInputChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.MethodChannel channel -> channel
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler -> textInputMethodHandler
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler -> parsingMethodHandler
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void requestExistingInputState() -> requestExistingInputState
    java.util.HashMap createEditingStateJSON(java.lang.String,int,int,int,int) -> createEditingStateJSON
    void updateEditingState(int,java.lang.String,int,int,int,int) -> updateEditingState
    void updateEditingStateWithTag(int,java.util.HashMap) -> updateEditingStateWithTag
    void newline(int) -> newline
    void go(int) -> go
    void search(int) -> search
    void send(int) -> send
    void done(int) -> done
    void next(int) -> next
    void previous(int) -> previous
    void unspecifiedAction(int) -> unspecifiedAction
    void performPrivateCommand(int,java.lang.String,android.os.Bundle) -> performPrivateCommand
    void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler) -> setTextInputMethodHandler
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> access$000
io.flutter.embedding.engine.systemchannels.TextInputChannel$1 -> io.flutter.embedding.engine.systemchannels.TextInputChannel$1:
    io.flutter.embedding.engine.systemchannels.TextInputChannel this$0 -> this$0
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration -> io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration:
    boolean obscureText -> obscureText
    boolean autocorrect -> autocorrect
    boolean enableSuggestions -> enableSuggestions
    boolean enableIMEPersonalizedLearning -> enableIMEPersonalizedLearning
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization -> textCapitalization
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType -> inputType
    java.lang.Integer inputAction -> inputAction
    java.lang.String actionLabel -> actionLabel
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill autofill -> autofill
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration[] fields -> fields
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject) -> fromJson
    java.lang.Integer inputActionFromTextInputAction(java.lang.String) -> inputActionFromTextInputAction
    void <init>(boolean,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration[]) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill -> io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill:
    java.lang.String uniqueIdentifier -> uniqueIdentifier
    java.lang.String[] hints -> hints
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState editState -> editState
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill fromJson(org.json.JSONObject) -> fromJson
    java.lang.String translateAutofillHint(java.lang.String) -> translateAutofillHint
    void <init>(java.lang.String,java.lang.String[],io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType -> io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type -> type
    boolean isSigned -> isSigned
    boolean isDecimal -> isDecimal
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject) -> fromJson
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS -> CHARACTERS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS -> WORDS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES -> SENTENCES
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE -> NONE
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState:
    java.lang.String text -> text
    int selectionStart -> selectionStart
    int selectionEnd -> selectionEnd
    int composingStart -> composingStart
    int composingEnd -> composingEnd
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject) -> fromJson
    void <init>(java.lang.String,int,int,int,int) -> <init>
    boolean hasSelection() -> hasSelection
    boolean hasComposing() -> hasComposing
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler:
    void show() -> show
    void hide() -> hide
    void requestAutofill() -> requestAutofill
    void finishAutofillContext(boolean) -> finishAutofillContext
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> setClient
    void setPlatformViewClient(int,boolean) -> setPlatformViewClient
    void setEditableSizeAndTransform(double,double,double[]) -> setEditableSizeAndTransform
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setEditingState
    void clearClient() -> clearClient
    void sendAppPrivateCommand(java.lang.String,android.os.Bundle) -> sendAppPrivateCommand
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType -> io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT -> TEXT
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME -> DATETIME
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NAME -> NAME
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType POSTAL_ADDRESS -> POSTAL_ADDRESS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER -> NUMBER
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE -> PHONE
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE -> MULTILINE
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS -> EMAIL_ADDRESS
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL -> URL
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType VISIBLE_PASSWORD -> VISIBLE_PASSWORD
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NONE -> NONE
    java.lang.String encodedName -> encodedName
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES -> $VALUES
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String) -> fromValue
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.common.ActivityLifecycleListener -> io.flutter.plugin.common.ActivityLifecycleListener:
    void onPostResume() -> onPostResume
io.flutter.plugin.common.BasicMessageChannel -> io.flutter.plugin.common.BasicMessageChannel:
    java.lang.String TAG -> TAG
    java.lang.String CHANNEL_BUFFERS_CHANNEL -> CHANNEL_BUFFERS_CHANNEL
    io.flutter.plugin.common.BinaryMessenger messenger -> messenger
    java.lang.String name -> name
    io.flutter.plugin.common.MessageCodec codec -> codec
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec) -> <init>
    void send(java.lang.Object) -> send
    void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> send
    void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> setMessageHandler
    void resizeChannelBuffer(int) -> resizeChannelBuffer
    void resizeChannelBuffer(io.flutter.plugin.common.BinaryMessenger,java.lang.String,int) -> resizeChannelBuffer
    io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel) -> access$200
    java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel) -> access$300
io.flutter.plugin.common.BasicMessageChannel$1 -> io.flutter.plugin.common.BasicMessageChannel$1:
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler -> io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler:
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler -> handler
    io.flutter.plugin.common.BasicMessageChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1 -> io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback -> val$callback
    io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1 -> this$1
    void <init>(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void reply(java.lang.Object) -> reply
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler -> io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler:
    io.flutter.plugin.common.BasicMessageChannel$Reply callback -> callback
    io.flutter.plugin.common.BasicMessageChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply) -> <init>
    void reply(java.nio.ByteBuffer) -> reply
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$MessageHandler -> io.flutter.plugin.common.BasicMessageChannel$MessageHandler:
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> onMessage
io.flutter.plugin.common.BasicMessageChannel$Reply -> io.flutter.plugin.common.BasicMessageChannel$Reply:
    void reply(java.lang.Object) -> reply
io.flutter.plugin.common.BinaryCodec -> io.flutter.plugin.common.BinaryCodec:
    io.flutter.plugin.common.BinaryCodec INSTANCE -> INSTANCE
    io.flutter.plugin.common.BinaryCodec INSTANCE_DIRECT -> INSTANCE_DIRECT
    boolean returnsDirectByteBufferFromDecoding -> returnsDirectByteBufferFromDecoding
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    java.nio.ByteBuffer encodeMessage(java.nio.ByteBuffer) -> encodeMessage
    java.nio.ByteBuffer decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    void <clinit>() -> <clinit>
io.flutter.plugin.common.BinaryMessenger -> io.flutter.plugin.common.BinaryMessenger:
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler -> io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler:
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
io.flutter.plugin.common.BinaryMessenger$BinaryReply -> io.flutter.plugin.common.BinaryMessenger$BinaryReply:
    void reply(java.nio.ByteBuffer) -> reply
io.flutter.plugin.common.ErrorLogResult -> io.flutter.plugin.common.ErrorLogResult:
    java.lang.String tag -> tag
    int level -> level
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.EventChannel -> io.flutter.plugin.common.EventChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BinaryMessenger messenger -> messenger
    java.lang.String name -> name
    io.flutter.plugin.common.MethodCodec codec -> codec
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void setStreamHandler(io.flutter.plugin.common.EventChannel$StreamHandler) -> setStreamHandler
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.EventChannel) -> access$000
    java.lang.String access$200(io.flutter.plugin.common.EventChannel) -> access$200
    io.flutter.plugin.common.BinaryMessenger access$400(io.flutter.plugin.common.EventChannel) -> access$400
io.flutter.plugin.common.EventChannel$1 -> io.flutter.plugin.common.EventChannel$1:
io.flutter.plugin.common.EventChannel$EventSink -> io.flutter.plugin.common.EventChannel$EventSink:
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler -> io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler:
    io.flutter.plugin.common.EventChannel$StreamHandler handler -> handler
    java.util.concurrent.atomic.AtomicReference activeSink -> activeSink
    io.flutter.plugin.common.EventChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.EventChannel,io.flutter.plugin.common.EventChannel$StreamHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
    void onListen(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onListen
    void onCancel(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onCancel
    java.util.concurrent.atomic.AtomicReference access$300(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler) -> access$300
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation -> io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation:
    java.util.concurrent.atomic.AtomicBoolean hasEnded -> hasEnded
    io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler this$1 -> this$1
    void <init>(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
    void <init>(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler,io.flutter.plugin.common.EventChannel$1) -> <init>
io.flutter.plugin.common.EventChannel$StreamHandler -> io.flutter.plugin.common.EventChannel$StreamHandler:
    void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink) -> onListen
    void onCancel(java.lang.Object) -> onCancel
io.flutter.plugin.common.FlutterException -> io.flutter.plugin.common.FlutterException:
    java.lang.String TAG -> TAG
    java.lang.String code -> code
    java.lang.Object details -> details
    void <init>(java.lang.String,java.lang.String,java.lang.Object) -> <init>
io.flutter.plugin.common.JSONMessageCodec -> io.flutter.plugin.common.JSONMessageCodec:
    io.flutter.plugin.common.JSONMessageCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONMethodCodec -> io.flutter.plugin.common.JSONMethodCodec:
    io.flutter.plugin.common.JSONMethodCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> encodeMethodCall
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> decodeMethodCall
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> encodeSuccessEnvelope
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> encodeErrorEnvelope
    java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String) -> encodeErrorEnvelopeWithStacktrace
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> decodeEnvelope
    java.lang.Object unwrapNull(java.lang.Object) -> unwrapNull
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONUtil -> io.flutter.plugin.common.JSONUtil:
    void <init>() -> <init>
    java.lang.Object unwrap(java.lang.Object) -> unwrap
    java.lang.Object wrap(java.lang.Object) -> wrap
io.flutter.plugin.common.MessageCodec -> io.flutter.plugin.common.MessageCodec:
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
io.flutter.plugin.common.MethodCall -> io.flutter.plugin.common.MethodCall:
    java.lang.String method -> method
    java.lang.Object arguments -> arguments
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.Object arguments() -> arguments
    java.lang.Object argument(java.lang.String) -> argument
    boolean hasArgument(java.lang.String) -> hasArgument
io.flutter.plugin.common.MethodChannel -> io.flutter.plugin.common.MethodChannel:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.BinaryMessenger messenger -> messenger
    java.lang.String name -> name
    io.flutter.plugin.common.MethodCodec codec -> codec
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void invokeMethod(java.lang.String,java.lang.Object) -> invokeMethod
    void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result) -> invokeMethod
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> setMethodCallHandler
    void resizeChannelBuffer(int) -> resizeChannelBuffer
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel) -> access$000
    java.lang.String access$100(io.flutter.plugin.common.MethodChannel) -> access$100
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler -> io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> handler
    io.flutter.plugin.common.MethodChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> onMessage
    java.lang.String getStackTrace(java.lang.Exception) -> getStackTrace
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1 -> io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply -> val$reply
    io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1 -> this$1
    void <init>(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.MethodChannel$IncomingResultHandler -> io.flutter.plugin.common.MethodChannel$IncomingResultHandler:
    io.flutter.plugin.common.MethodChannel$Result callback -> callback
    io.flutter.plugin.common.MethodChannel this$0 -> this$0
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void reply(java.nio.ByteBuffer) -> reply
io.flutter.plugin.common.MethodChannel$MethodCallHandler -> io.flutter.plugin.common.MethodChannel$MethodCallHandler:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.plugin.common.MethodChannel$Result -> io.flutter.plugin.common.MethodChannel$Result:
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.MethodCodec -> io.flutter.plugin.common.MethodCodec:
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> encodeMethodCall
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> decodeMethodCall
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> encodeSuccessEnvelope
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> encodeErrorEnvelope
    java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String) -> encodeErrorEnvelopeWithStacktrace
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> decodeEnvelope
io.flutter.plugin.common.PluginRegistry -> io.flutter.plugin.common.PluginRegistry:
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> registrarFor
    boolean hasPlugin(java.lang.String) -> hasPlugin
    java.lang.Object valuePublishedByPlugin(java.lang.String) -> valuePublishedByPlugin
io.flutter.plugin.common.PluginRegistry$ActivityResultListener -> io.flutter.plugin.common.PluginRegistry$ActivityResultListener:
    boolean onActivityResult(int,int,android.content.Intent) -> onActivityResult
io.flutter.plugin.common.PluginRegistry$NewIntentListener -> io.flutter.plugin.common.PluginRegistry$NewIntentListener:
    boolean onNewIntent(android.content.Intent) -> onNewIntent
io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback -> io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback:
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> registerWith
io.flutter.plugin.common.PluginRegistry$Registrar -> io.flutter.plugin.common.PluginRegistry$Registrar:
    android.app.Activity activity() -> activity
    android.content.Context context() -> context
    android.content.Context activeContext() -> activeContext
    io.flutter.plugin.common.BinaryMessenger messenger() -> messenger
    io.flutter.view.TextureRegistry textures() -> textures
    io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry() -> platformViewRegistry
    io.flutter.view.FlutterView view() -> view
    java.lang.String lookupKeyForAsset(java.lang.String) -> lookupKeyForAsset
    java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String) -> lookupKeyForAsset
    io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object) -> publish
    io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> addRequestPermissionsResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> addActivityResultListener
    io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> addNewIntentListener
    io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> addUserLeaveHintListener
    io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener) -> addViewDestroyListener
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener -> io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener:
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener -> io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener:
    void onUserLeaveHint() -> onUserLeaveHint
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener -> io.flutter.plugin.common.PluginRegistry$ViewDestroyListener:
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> onViewDestroy
io.flutter.plugin.common.StandardMessageCodec -> io.flutter.plugin.common.StandardMessageCodec:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.StandardMessageCodec INSTANCE -> INSTANCE
    boolean LITTLE_ENDIAN -> LITTLE_ENDIAN
    java.nio.charset.Charset UTF8 -> UTF8
    byte NULL -> NULL
    byte TRUE -> TRUE
    byte FALSE -> FALSE
    byte INT -> INT
    byte LONG -> LONG
    byte BIGINT -> BIGINT
    byte DOUBLE -> DOUBLE
    byte STRING -> STRING
    byte BYTE_ARRAY -> BYTE_ARRAY
    byte INT_ARRAY -> INT_ARRAY
    byte LONG_ARRAY -> LONG_ARRAY
    byte DOUBLE_ARRAY -> DOUBLE_ARRAY
    byte LIST -> LIST
    byte MAP -> MAP
    byte FLOAT_ARRAY -> FLOAT_ARRAY
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    void writeSize(java.io.ByteArrayOutputStream,int) -> writeSize
    void writeChar(java.io.ByteArrayOutputStream,int) -> writeChar
    void writeInt(java.io.ByteArrayOutputStream,int) -> writeInt
    void writeLong(java.io.ByteArrayOutputStream,long) -> writeLong
    void writeFloat(java.io.ByteArrayOutputStream,float) -> writeFloat
    void writeDouble(java.io.ByteArrayOutputStream,double) -> writeDouble
    void writeBytes(java.io.ByteArrayOutputStream,byte[]) -> writeBytes
    void writeAlignment(java.io.ByteArrayOutputStream,int) -> writeAlignment
    void writeValue(java.io.ByteArrayOutputStream,java.lang.Object) -> writeValue
    int readSize(java.nio.ByteBuffer) -> readSize
    byte[] readBytes(java.nio.ByteBuffer) -> readBytes
    void readAlignment(java.nio.ByteBuffer,int) -> readAlignment
    java.lang.Object readValue(java.nio.ByteBuffer) -> readValue
    java.lang.Object readValueOfType(byte,java.nio.ByteBuffer) -> readValueOfType
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream -> io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream:
    void <init>() -> <init>
    byte[] buffer() -> buffer
io.flutter.plugin.common.StandardMethodCodec -> io.flutter.plugin.common.StandardMethodCodec:
    io.flutter.plugin.common.StandardMethodCodec INSTANCE -> INSTANCE
    io.flutter.plugin.common.StandardMessageCodec messageCodec -> messageCodec
    void <init>(io.flutter.plugin.common.StandardMessageCodec) -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> encodeMethodCall
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> decodeMethodCall
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> encodeSuccessEnvelope
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> encodeErrorEnvelope
    java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String) -> encodeErrorEnvelopeWithStacktrace
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> decodeEnvelope
    java.lang.String getStackTrace(java.lang.Throwable) -> getStackTrace
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StringCodec -> io.flutter.plugin.common.StringCodec:
    java.nio.charset.Charset UTF8 -> UTF8
    io.flutter.plugin.common.StringCodec INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.String) -> encodeMessage
    java.lang.String decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> decodeMessage
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> encodeMessage
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.FlutterTextUtils -> io.flutter.plugin.editing.FlutterTextUtils:
    int LINE_FEED -> LINE_FEED
    int CARRIAGE_RETURN -> CARRIAGE_RETURN
    int COMBINING_ENCLOSING_KEYCAP -> COMBINING_ENCLOSING_KEYCAP
    int CANCEL_TAG -> CANCEL_TAG
    int ZERO_WIDTH_JOINER -> ZERO_WIDTH_JOINER
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> flutterJNI
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    boolean isEmoji(int) -> isEmoji
    boolean isEmojiModifier(int) -> isEmojiModifier
    boolean isEmojiModifierBase(int) -> isEmojiModifierBase
    boolean isVariationSelector(int) -> isVariationSelector
    boolean isRegionalIndicatorSymbol(int) -> isRegionalIndicatorSymbol
    boolean isTagSpecChar(int) -> isTagSpecChar
    boolean isKeycapBase(int) -> isKeycapBase
    int getOffsetBefore(java.lang.CharSequence,int) -> getOffsetBefore
    int getOffsetAfter(java.lang.CharSequence,int) -> getOffsetAfter
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback -> io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback:
    int overlayInsetTypes -> overlayInsetTypes
    int deferredInsetTypes -> deferredInsetTypes
    android.view.View view -> view
    android.view.WindowInsets lastWindowInsets -> lastWindowInsets
    io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback -> animationCallback
    io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener -> insetsListener
    boolean animating -> animating
    boolean needsSave -> needsSave
    void <init>(android.view.View,int,int) -> <init>
    void install() -> install
    void remove() -> remove
    android.view.View$OnApplyWindowInsetsListener getInsetsListener() -> getInsetsListener
    android.view.WindowInsetsAnimation$Callback getAnimationCallback() -> getAnimationCallback
    int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> access$100
    boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean) -> access$202
    boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean) -> access$302
    boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> access$200
    boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> access$300
    android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> access$400
    int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> access$500
    android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> access$600
    android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View) -> access$602
    android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets) -> access$402
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$1 -> io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$1:
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback -> io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback:
    io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0 -> this$0
    void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> <init>
    void onPrepare(android.view.WindowInsetsAnimation) -> onPrepare
    android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List) -> onProgress
    void onEnd(android.view.WindowInsetsAnimation) -> onEnd
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener -> io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener:
    io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0 -> this$0
    void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback) -> <init>
    android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets) -> onApplyWindowInsets
    void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$1) -> <init>
io.flutter.plugin.editing.InputConnectionAdaptor -> io.flutter.plugin.editing.InputConnectionAdaptor:
    java.lang.String TAG -> TAG
    android.view.View mFlutterView -> mFlutterView
    int mClient -> mClient
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> textInputChannel
    io.flutter.plugin.editing.ListenableEditingState mEditable -> mEditable
    android.view.inputmethod.EditorInfo mEditorInfo -> mEditorInfo
    android.view.inputmethod.ExtractedTextRequest mExtractRequest -> mExtractRequest
    boolean mMonitorCursorUpdate -> mMonitorCursorUpdate
    android.view.inputmethod.CursorAnchorInfo$Builder mCursorAnchorInfoBuilder -> mCursorAnchorInfoBuilder
    android.view.inputmethod.ExtractedText mExtractedText -> mExtractedText
    android.view.inputmethod.InputMethodManager mImm -> mImm
    android.text.Layout mLayout -> mLayout
    io.flutter.plugin.editing.FlutterTextUtils flutterTextUtils -> flutterTextUtils
    io.flutter.embedding.android.KeyboardManager keyboardManager -> keyboardManager
    int batchEditNestDepth -> batchEditNestDepth
    void <init>(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.embedding.android.KeyboardManager,io.flutter.plugin.editing.ListenableEditingState,android.view.inputmethod.EditorInfo,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void <init>(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.embedding.android.KeyboardManager,io.flutter.plugin.editing.ListenableEditingState,android.view.inputmethod.EditorInfo) -> <init>
    android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest) -> getExtractedText
    android.view.inputmethod.CursorAnchorInfo getCursorAnchorInfo() -> getCursorAnchorInfo
    android.text.Editable getEditable() -> getEditable
    boolean beginBatchEdit() -> beginBatchEdit
    boolean endBatchEdit() -> endBatchEdit
    boolean commitText(java.lang.CharSequence,int) -> commitText
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    boolean deleteSurroundingTextInCodePoints(int,int) -> deleteSurroundingTextInCodePoints
    boolean setComposingRegion(int,int) -> setComposingRegion
    boolean setComposingText(java.lang.CharSequence,int) -> setComposingText
    boolean finishComposingText() -> finishComposingText
    android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int) -> getExtractedText
    boolean requestCursorUpdates(int) -> requestCursorUpdates
    boolean clearMetaKeyStates(int) -> clearMetaKeyStates
    void closeConnection() -> closeConnection
    boolean setSelection(int,int) -> setSelection
    int clampIndexToEditable(int,android.text.Editable) -> clampIndexToEditable
    boolean sendKeyEvent(android.view.KeyEvent) -> sendKeyEvent
    boolean handleKeyEvent(android.view.KeyEvent) -> handleKeyEvent
    boolean handleHorizontalMovement(boolean,boolean) -> handleHorizontalMovement
    boolean handleVerticalMovement(boolean,boolean) -> handleVerticalMovement
    boolean performContextMenuAction(int) -> performContextMenuAction
    boolean doPerformContextMenuAction(int) -> doPerformContextMenuAction
    boolean performPrivateCommand(java.lang.String,android.os.Bundle) -> performPrivateCommand
    boolean performEditorAction(int) -> performEditorAction
    void didChangeEditingState(boolean,boolean,boolean) -> didChangeEditingState
io.flutter.plugin.editing.ListenableEditingState -> io.flutter.plugin.editing.ListenableEditingState:
    java.lang.String TAG -> TAG
    int mBatchEditNestDepth -> mBatchEditNestDepth
    int mChangeNotificationDepth -> mChangeNotificationDepth
    java.util.ArrayList mListeners -> mListeners
    java.util.ArrayList mPendingListeners -> mPendingListeners
    java.lang.String mToStringCache -> mToStringCache
    java.lang.String mTextWhenBeginBatchEdit -> mTextWhenBeginBatchEdit
    int mSelectionStartWhenBeginBatchEdit -> mSelectionStartWhenBeginBatchEdit
    int mSelectionEndWhenBeginBatchEdit -> mSelectionEndWhenBeginBatchEdit
    int mComposingStartWhenBeginBatchEdit -> mComposingStartWhenBeginBatchEdit
    int mComposingEndWhenBeginBatchEdit -> mComposingEndWhenBeginBatchEdit
    android.view.inputmethod.BaseInputConnection mDummyConnection -> mDummyConnection
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState,android.view.View) -> <init>
    void beginBatchEdit() -> beginBatchEdit
    void endBatchEdit() -> endBatchEdit
    void setComposingRange(int,int) -> setComposingRange
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setEditingState
    void addEditingStateListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher) -> addEditingStateListener
    void removeEditingStateListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher) -> removeEditingStateListener
    android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int) -> replace
    void notifyListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher,boolean,boolean,boolean) -> notifyListener
    void notifyListenersIfNeeded(boolean,boolean,boolean) -> notifyListenersIfNeeded
    int getSelectionStart() -> getSelectionStart
    int getSelectionEnd() -> getSelectionEnd
    int getComposingStart() -> getComposingStart
    int getComposingEnd() -> getComposingEnd
    java.lang.String toString() -> toString
    android.text.Editable replace(int,int,java.lang.CharSequence,int,int) -> replace
io.flutter.plugin.editing.ListenableEditingState$1 -> io.flutter.plugin.editing.ListenableEditingState$1:
    android.text.Editable val$self -> val$self
    io.flutter.plugin.editing.ListenableEditingState this$0 -> this$0
    void <init>(io.flutter.plugin.editing.ListenableEditingState,android.view.View,boolean,android.text.Editable) -> <init>
    android.text.Editable getEditable() -> getEditable
io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher -> io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher:
    void didChangeEditingState(boolean,boolean,boolean) -> didChangeEditingState
io.flutter.plugin.editing.TextInputPlugin -> io.flutter.plugin.editing.TextInputPlugin:
    java.lang.String TAG -> TAG
    android.view.View mView -> mView
    android.view.inputmethod.InputMethodManager mImm -> mImm
    android.view.autofill.AutofillManager afm -> afm
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> textInputChannel
    io.flutter.plugin.editing.TextInputPlugin$InputTarget inputTarget -> inputTarget
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration -> configuration
    android.util.SparseArray mAutofillConfigurations -> mAutofillConfigurations
    io.flutter.plugin.editing.ListenableEditingState mEditable -> mEditable
    boolean mRestartInputPending -> mRestartInputPending
    android.view.inputmethod.InputConnection lastInputConnection -> lastInputConnection
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> platformViewsController
    android.graphics.Rect lastClientRect -> lastClientRect
    io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback imeSyncCallback -> imeSyncCallback
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState mLastKnownFrameworkTextEditingState -> mLastKnownFrameworkTextEditingState
    boolean isInputConnectionLocked -> isInputConnectionLocked
    void <init>(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.plugin.platform.PlatformViewsController) -> <init>
    android.view.inputmethod.InputMethodManager getInputMethodManager() -> getInputMethodManager
    android.text.Editable getEditable() -> getEditable
    io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback getImeSyncCallback() -> getImeSyncCallback
    void lockPlatformViewInputConnection() -> lockPlatformViewInputConnection
    void unlockPlatformViewInputConnection() -> unlockPlatformViewInputConnection
    void destroy() -> destroy
    int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization) -> inputTypeFromTextInputType
    android.view.inputmethod.InputConnection createInputConnection(android.view.View,io.flutter.embedding.android.KeyboardManager,android.view.inputmethod.EditorInfo) -> createInputConnection
    android.view.inputmethod.InputConnection getLastInputConnection() -> getLastInputConnection
    void clearPlatformViewClient(int) -> clearPlatformViewClient
    void sendTextInputAppPrivateCommand(java.lang.String,android.os.Bundle) -> sendTextInputAppPrivateCommand
    boolean canShowTextInput() -> canShowTextInput
    void showTextInput(android.view.View) -> showTextInput
    void hideTextInput(android.view.View) -> hideTextInput
    void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> setTextInputClient
    void setPlatformViewTextInputClient(int,boolean) -> setPlatformViewTextInputClient
    boolean composingChanged(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> composingChanged
    void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setTextInputEditingState
    void saveEditableSizeAndTransform(double,double,double[]) -> saveEditableSizeAndTransform
    void clearTextInputClient() -> clearTextInputClient
    boolean handleKeyEvent(android.view.KeyEvent) -> handleKeyEvent
    void didChangeEditingState(boolean,boolean,boolean) -> didChangeEditingState
    boolean needsAutofill() -> needsAutofill
    void notifyViewEntered() -> notifyViewEntered
    void notifyViewExited() -> notifyViewExited
    void notifyValueChanged(java.lang.String) -> notifyValueChanged
    void updateAutofillConfigurationIfNeeded(io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> updateAutofillConfigurationIfNeeded
    void onProvideAutofillVirtualStructure(android.view.ViewStructure,int) -> onProvideAutofillVirtualStructure
    void autofill(android.util.SparseArray) -> autofill
    android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin) -> access$000
    io.flutter.plugin.editing.TextInputPlugin$InputTarget access$100(io.flutter.plugin.editing.TextInputPlugin) -> access$100
    void access$200(io.flutter.plugin.editing.TextInputPlugin) -> access$200
    void access$300(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> access$300
    void access$400(io.flutter.plugin.editing.TextInputPlugin) -> access$400
    android.view.autofill.AutofillManager access$500(io.flutter.plugin.editing.TextInputPlugin) -> access$500
    void access$600(io.flutter.plugin.editing.TextInputPlugin,int,boolean) -> access$600
    void access$700(io.flutter.plugin.editing.TextInputPlugin,double,double,double[]) -> access$700
io.flutter.plugin.editing.TextInputPlugin$1 -> io.flutter.plugin.editing.TextInputPlugin$1:
    io.flutter.plugin.editing.TextInputPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void show() -> show
    void hide() -> hide
    void requestAutofill() -> requestAutofill
    void finishAutofillContext(boolean) -> finishAutofillContext
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> setClient
    void setPlatformViewClient(int,boolean) -> setPlatformViewClient
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> setEditingState
    void setEditableSizeAndTransform(double,double,double[]) -> setEditableSizeAndTransform
    void clearClient() -> clearClient
    void sendAppPrivateCommand(java.lang.String,android.os.Bundle) -> sendAppPrivateCommand
io.flutter.plugin.editing.TextInputPlugin$2 -> io.flutter.plugin.editing.TextInputPlugin$2:
    boolean val$isAffine -> val$isAffine
    double[] val$matrix -> val$matrix
    double[] val$minMax -> val$minMax
    io.flutter.plugin.editing.TextInputPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.editing.TextInputPlugin,boolean,double[],double[]) -> <init>
    void inspect(double,double) -> inspect
io.flutter.plugin.editing.TextInputPlugin$InputTarget -> io.flutter.plugin.editing.TextInputPlugin$InputTarget:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type type -> type
    int id -> id
    void <init>(io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type,int) -> <init>
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type -> io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type NO_TARGET -> NO_TARGET
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type FRAMEWORK_CLIENT -> FRAMEWORK_CLIENT
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type VD_PLATFORM_VIEW -> VD_PLATFORM_VIEW
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type HC_PLATFORM_VIEW -> HC_PLATFORM_VIEW
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $VALUES -> $VALUES
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values() -> values
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.TextInputPlugin$MinMax -> io.flutter.plugin.editing.TextInputPlugin$MinMax:
    void inspect(double,double) -> inspect
io.flutter.plugin.localization.LocalizationPlugin -> io.flutter.plugin.localization.LocalizationPlugin:
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> localizationChannel
    android.content.Context context -> context
    io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler localizationMessageHandler -> localizationMessageHandler
    void <init>(android.content.Context,io.flutter.embedding.engine.systemchannels.LocalizationChannel) -> <init>
    java.util.Locale resolveNativeLocale(java.util.List) -> resolveNativeLocale
    void sendLocalesToFlutter(android.content.res.Configuration) -> sendLocalesToFlutter
    java.util.Locale localeFromString(java.lang.String) -> localeFromString
    android.content.Context access$000(io.flutter.plugin.localization.LocalizationPlugin) -> access$000
io.flutter.plugin.localization.LocalizationPlugin$1 -> io.flutter.plugin.localization.LocalizationPlugin$1:
    io.flutter.plugin.localization.LocalizationPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.localization.LocalizationPlugin) -> <init>
    java.lang.String getStringResource(java.lang.String,java.lang.String) -> getStringResource
io.flutter.plugin.mouse.MouseCursorPlugin -> io.flutter.plugin.mouse.MouseCursorPlugin:
    io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate mView -> mView
    io.flutter.embedding.engine.systemchannels.MouseCursorChannel mouseCursorChannel -> mouseCursorChannel
    java.util.HashMap systemCursorConstants -> systemCursorConstants
    void <init>(io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate,io.flutter.embedding.engine.systemchannels.MouseCursorChannel) -> <init>
    android.view.PointerIcon resolveSystemCursor(java.lang.String) -> resolveSystemCursor
    void destroy() -> destroy
    android.view.PointerIcon access$000(io.flutter.plugin.mouse.MouseCursorPlugin,java.lang.String) -> access$000
    io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate access$100(io.flutter.plugin.mouse.MouseCursorPlugin) -> access$100
io.flutter.plugin.mouse.MouseCursorPlugin$1 -> io.flutter.plugin.mouse.MouseCursorPlugin$1:
    io.flutter.plugin.mouse.MouseCursorPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.mouse.MouseCursorPlugin) -> <init>
    void activateSystemCursor(java.lang.String) -> activateSystemCursor
io.flutter.plugin.mouse.MouseCursorPlugin$2 -> io.flutter.plugin.mouse.MouseCursorPlugin$2:
    long serialVersionUID -> serialVersionUID
    io.flutter.plugin.mouse.MouseCursorPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.mouse.MouseCursorPlugin) -> <init>
io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate -> io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate:
    android.view.PointerIcon getSystemPointerIcon(int) -> getSystemPointerIcon
    void setPointerIcon(android.view.PointerIcon) -> setPointerIcon
io.flutter.plugin.platform.AccessibilityEventsDelegate -> io.flutter.plugin.platform.AccessibilityEventsDelegate:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> accessibilityBridge
    void <init>() -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
    void setAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> setAccessibilityBridge
io.flutter.plugin.platform.PlatformPlugin -> io.flutter.plugin.platform.PlatformPlugin:
    int DEFAULT_SYSTEM_UI -> DEFAULT_SYSTEM_UI
    android.app.Activity activity -> activity
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> platformChannel
    io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate platformPluginDelegate -> platformPluginDelegate
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme -> currentTheme
    int mEnabledOverlays -> mEnabledOverlays
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler -> mPlatformMessageHandler
    void <init>(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void <init>(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel,io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate) -> <init>
    void destroy() -> destroy
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> playSystemSound
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> vibrateHapticFeedback
    void setSystemChromePreferredOrientations(int) -> setSystemChromePreferredOrientations
    void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> setSystemChromeApplicationSwitcherDescription
    void setSystemChromeChangeListener() -> setSystemChromeChangeListener
    void setSystemChromeEnabledSystemUIMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode) -> setSystemChromeEnabledSystemUIMode
    void setSystemChromeEnabledSystemUIOverlays(java.util.List) -> setSystemChromeEnabledSystemUIOverlays
    void updateSystemUiOverlays() -> updateSystemUiOverlays
    void restoreSystemChromeSystemUIOverlays() -> restoreSystemChromeSystemUIOverlays
    void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> setSystemChromeSystemUIOverlayStyle
    void popSystemNavigator() -> popSystemNavigator
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> getClipboardData
    void setClipboardData(java.lang.String) -> setClipboardData
    boolean clipboardHasStrings() -> clipboardHasStrings
    void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> access$000
    void access$100(io.flutter.plugin.platform.PlatformPlugin,int) -> access$100
    void access$200(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> access$200
    void access$300(io.flutter.plugin.platform.PlatformPlugin,java.util.List) -> access$300
    void access$400(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode) -> access$400
    void access$500(io.flutter.plugin.platform.PlatformPlugin) -> access$500
    void access$600(io.flutter.plugin.platform.PlatformPlugin) -> access$600
    void access$700(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> access$700
    void access$800(io.flutter.plugin.platform.PlatformPlugin) -> access$800
    java.lang.CharSequence access$900(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> access$900
    void access$1000(io.flutter.plugin.platform.PlatformPlugin,java.lang.String) -> access$1000
    boolean access$1100(io.flutter.plugin.platform.PlatformPlugin) -> access$1100
    io.flutter.embedding.engine.systemchannels.PlatformChannel access$1200(io.flutter.plugin.platform.PlatformPlugin) -> access$1200
io.flutter.plugin.platform.PlatformPlugin$1 -> io.flutter.plugin.platform.PlatformPlugin$1:
    io.flutter.plugin.platform.PlatformPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> playSystemSound
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> vibrateHapticFeedback
    void setPreferredOrientations(int) -> setPreferredOrientations
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> setApplicationSwitcherDescription
    void showSystemOverlays(java.util.List) -> showSystemOverlays
    void showSystemUiMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode) -> showSystemUiMode
    void setSystemUiChangeListener() -> setSystemUiChangeListener
    void restoreSystemUiOverlays() -> restoreSystemUiOverlays
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> setSystemUiOverlayStyle
    void popSystemNavigator() -> popSystemNavigator
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> getClipboardData
    void setClipboardData(java.lang.String) -> setClipboardData
    boolean clipboardHasStrings() -> clipboardHasStrings
io.flutter.plugin.platform.PlatformPlugin$2 -> io.flutter.plugin.platform.PlatformPlugin$2:
    io.flutter.plugin.platform.PlatformPlugin this$0 -> this$0
    void <init>(io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void onSystemUiVisibilityChange(int) -> onSystemUiVisibilityChange
io.flutter.plugin.platform.PlatformPlugin$3 -> io.flutter.plugin.platform.PlatformPlugin$3:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness -> $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness
    void <clinit>() -> <clinit>
io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate -> io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate:
    boolean popSystemNavigator() -> popSystemNavigator
io.flutter.plugin.platform.PlatformView -> io.flutter.plugin.platform.PlatformView:
    android.view.View getView() -> getView
    void onFlutterViewAttached(android.view.View) -> onFlutterViewAttached
    void onFlutterViewDetached() -> onFlutterViewDetached
    void dispose() -> dispose
    void onInputConnectionLocked() -> onInputConnectionLocked
    void onInputConnectionUnlocked() -> onInputConnectionUnlocked
io.flutter.plugin.platform.PlatformViewFactory -> io.flutter.plugin.platform.PlatformViewFactory:
    io.flutter.plugin.common.MessageCodec createArgsCodec -> createArgsCodec
    void <init>(io.flutter.plugin.common.MessageCodec) -> <init>
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> create
    io.flutter.plugin.common.MessageCodec getCreateArgsCodec() -> getCreateArgsCodec
io.flutter.plugin.platform.PlatformViewRegistry -> io.flutter.plugin.platform.PlatformViewRegistry:
    boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory) -> registerViewFactory
io.flutter.plugin.platform.PlatformViewRegistryImpl -> io.flutter.plugin.platform.PlatformViewRegistryImpl:
    java.util.Map viewFactories -> viewFactories
    void <init>() -> <init>
    boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory) -> registerViewFactory
    io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String) -> getFactory
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate -> io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate:
    android.view.View getPlatformViewById(java.lang.Integer) -> getPlatformViewById
    boolean usesVirtualDisplay(java.lang.Integer) -> usesVirtualDisplay
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> attachAccessibilityBridge
    void detachAccessibiltyBridge() -> detachAccessibiltyBridge
io.flutter.plugin.platform.PlatformViewsController -> io.flutter.plugin.platform.PlatformViewsController:
    java.lang.String TAG -> TAG
    io.flutter.plugin.platform.PlatformViewRegistryImpl registry -> registry
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> androidTouchProcessor
    android.content.Context context -> context
    android.view.View flutterView -> flutterView
    io.flutter.view.TextureRegistry textureRegistry -> textureRegistry
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> textInputPlugin
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel platformViewsChannel -> platformViewsChannel
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> accessibilityEventsDelegate
    java.util.HashMap vdControllers -> vdControllers
    java.util.HashMap contextToPlatformView -> contextToPlatformView
    android.util.SparseArray platformViews -> platformViews
    android.util.SparseArray platformViewParent -> platformViewParent
    android.util.SparseArray overlayLayerViews -> overlayLayerViews
    int nextOverlayLayerId -> nextOverlayLayerId
    boolean flutterViewConvertedToImageView -> flutterViewConvertedToImageView
    boolean synchronizeToNativeViewHierarchy -> synchronizeToNativeViewHierarchy
    java.util.HashSet currentFrameUsedOverlayLayerIds -> currentFrameUsedOverlayLayerIds
    java.util.HashSet currentFrameUsedPlatformViewIds -> currentFrameUsedPlatformViewIds
    io.flutter.embedding.android.MotionEventTracker motionEventTracker -> motionEventTracker
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler channelHandler -> channelHandler
    android.view.MotionEvent toMotionEvent(float,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch,boolean) -> toMotionEvent
    void <init>() -> <init>
    void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.embedding.engine.dart.DartExecutor) -> attach
    void detach() -> detach
    void attachToView(android.view.View) -> attachToView
    void detachFromView() -> detachFromView
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> attachAccessibilityBridge
    void detachAccessibiltyBridge() -> detachAccessibiltyBridge
    void attachTextInputPlugin(io.flutter.plugin.editing.TextInputPlugin) -> attachTextInputPlugin
    void detachTextInputPlugin() -> detachTextInputPlugin
    boolean checkInputConnectionProxy(android.view.View) -> checkInputConnectionProxy
    io.flutter.plugin.platform.PlatformViewRegistry getRegistry() -> getRegistry
    void onAttachedToJNI() -> onAttachedToJNI
    void onDetachedFromJNI() -> onDetachedFromJNI
    void onPreEngineRestart() -> onPreEngineRestart
    android.view.View getPlatformViewById(java.lang.Integer) -> getPlatformViewById
    boolean usesVirtualDisplay(java.lang.Integer) -> usesVirtualDisplay
    void lockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> lockInputConnection
    void unlockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> unlockInputConnection
    boolean validateDirection(int) -> validateDirection
    java.util.List parsePointerPropertiesList(java.lang.Object) -> parsePointerPropertiesList
    android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object) -> parsePointerProperties
    java.util.List parsePointerCoordsList(java.lang.Object,float) -> parsePointerCoordsList
    android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float) -> parsePointerCoords
    void validateVirtualDisplayDimensions(int,int) -> validateVirtualDisplayDimensions
    float getDisplayDensity() -> getDisplayDensity
    int toPhysicalPixels(double) -> toPhysicalPixels
    void flushAllViews() -> flushAllViews
    void initializeRootImageViewIfNeeded() -> initializeRootImageViewIfNeeded
    void initializePlatformViewIfNeeded(int) -> initializePlatformViewIfNeeded
    void attachToFlutterRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> attachToFlutterRenderer
    void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack) -> onDisplayPlatformView
    void onDisplayOverlaySurface(int,int,int,int,int) -> onDisplayOverlaySurface
    void onBeginFrame() -> onBeginFrame
    void onEndFrame() -> onEndFrame
    void finishFrame(boolean) -> finishFrame
    io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface(io.flutter.embedding.android.FlutterImageView) -> createOverlaySurface
    io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface() -> createOverlaySurface
    void destroyOverlaySurfaces() -> destroyOverlaySurfaces
    void lambda$onEndFrame$1() -> lambda$onEndFrame$1
    void lambda$initializePlatformViewIfNeeded$0(int,android.view.View,boolean) -> lambda$initializePlatformViewIfNeeded$0
    boolean access$000(int) -> access$000
    io.flutter.plugin.platform.PlatformViewRegistryImpl access$100(io.flutter.plugin.platform.PlatformViewsController) -> access$100
    android.content.Context access$200(io.flutter.plugin.platform.PlatformViewsController) -> access$200
    android.util.SparseArray access$300(io.flutter.plugin.platform.PlatformViewsController) -> access$300
    android.util.SparseArray access$400(io.flutter.plugin.platform.PlatformViewsController) -> access$400
    int access$500(io.flutter.plugin.platform.PlatformViewsController,double) -> access$500
    void access$600(io.flutter.plugin.platform.PlatformViewsController,int,int) -> access$600
    io.flutter.view.TextureRegistry access$700(io.flutter.plugin.platform.PlatformViewsController) -> access$700
    io.flutter.plugin.platform.AccessibilityEventsDelegate access$800(io.flutter.plugin.platform.PlatformViewsController) -> access$800
    android.view.View access$900(io.flutter.plugin.platform.PlatformViewsController) -> access$900
    java.util.HashMap access$1000(io.flutter.plugin.platform.PlatformViewsController) -> access$1000
    io.flutter.plugin.editing.TextInputPlugin access$1100(io.flutter.plugin.platform.PlatformViewsController) -> access$1100
    void access$1200(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> access$1200
    void access$1300(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> access$1300
    boolean access$1402(io.flutter.plugin.platform.PlatformViewsController,boolean) -> access$1402
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel access$1500(io.flutter.plugin.platform.PlatformViewsController) -> access$1500
io.flutter.plugin.platform.PlatformViewsController$1 -> io.flutter.plugin.platform.PlatformViewsController$1:
    io.flutter.plugin.platform.PlatformViewsController this$0 -> this$0
    void <init>(io.flutter.plugin.platform.PlatformViewsController) -> <init>
    void createAndroidViewForPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> createAndroidViewForPlatformView
    void disposeAndroidViewForPlatformView(int) -> disposeAndroidViewForPlatformView
    long createVirtualDisplayForPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> createVirtualDisplayForPlatformView
    void disposeVirtualDisplayForPlatformView(int) -> disposeVirtualDisplayForPlatformView
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> resizePlatformView
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> onTouch
    void setDirection(int,int) -> setDirection
    void clearFocus(int) -> clearFocus
    void ensureValidAndroidVersion(int) -> ensureValidAndroidVersion
    void synchronizeToNativeViewHierarchy(boolean) -> synchronizeToNativeViewHierarchy
    void lambda$createVirtualDisplayForPlatformView$0(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,android.view.View,boolean) -> lambda$createVirtualDisplayForPlatformView$0
io.flutter.plugin.platform.PlatformViewsController$1$1 -> io.flutter.plugin.platform.PlatformViewsController$1$1:
    io.flutter.plugin.platform.VirtualDisplayController val$vdController -> val$vdController
    java.lang.Runnable val$onComplete -> val$onComplete
    io.flutter.plugin.platform.PlatformViewsController$1 this$1 -> this$1
    void <init>(io.flutter.plugin.platform.PlatformViewsController$1,io.flutter.plugin.platform.VirtualDisplayController,java.lang.Runnable) -> <init>
    void run() -> run
io.flutter.plugin.platform.SingleViewPresentation -> io.flutter.plugin.platform.SingleViewPresentation:
    io.flutter.plugin.platform.PlatformViewFactory viewFactory -> viewFactory
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> accessibilityEventsDelegate
    android.view.View$OnFocusChangeListener focusChangeListener -> focusChangeListener
    int viewId -> viewId
    java.lang.Object createParams -> createParams
    io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView -> rootView
    android.widget.FrameLayout container -> container
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState state -> state
    boolean startFocused -> startFocused
    android.content.Context outerContext -> outerContext
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> <init>
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState() -> detachState
    io.flutter.plugin.platform.PlatformView getView() -> getView
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout -> io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout:
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> accessibilityEventsDelegate
    android.view.View embeddedView -> embeddedView
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View) -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup -> io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup:
    android.graphics.Rect viewBounds -> viewBounds
    android.graphics.Rect childRect -> childRect
    void <init>(android.content.Context) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int atMost(int) -> atMost
io.flutter.plugin.platform.SingleViewPresentation$ImmContext -> io.flutter.plugin.platform.SingleViewPresentation$ImmContext:
    android.view.inputmethod.InputMethodManager inputMethodManager -> inputMethodManager
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.view.inputmethod.InputMethodManager) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.content.Context createDisplayContext(android.view.Display) -> createDisplayContext
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext -> io.flutter.plugin.platform.SingleViewPresentation$PresentationContext:
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> windowManagerHandler
    android.view.WindowManager windowManager -> windowManager
    android.content.Context flutterAppWindowContext -> flutterAppWindowContext
    void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler,android.content.Context) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.view.WindowManager getWindowManager() -> getWindowManager
    boolean isCalledFromAlertDialog() -> isCalledFromAlertDialog
io.flutter.plugin.platform.SingleViewPresentation$PresentationState -> io.flutter.plugin.platform.SingleViewPresentation$PresentationState:
    io.flutter.plugin.platform.PlatformView platformView -> platformView
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> windowManagerHandler
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowViewGroup -> fakeWindowViewGroup
    void <init>() -> <init>
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> access$000
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> access$002
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> access$100
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> access$102
    io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> access$200
    io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView) -> access$202
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler -> io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler:
    java.lang.String TAG -> TAG
    android.view.WindowManager delegate -> delegate
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowRootView -> fakeWindowRootView
    void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> <init>
    android.view.WindowManager getWindowManager() -> getWindowManager
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void addView(java.lang.Object[]) -> addView
    void removeView(java.lang.Object[]) -> removeView
    void removeViewImmediate(java.lang.Object[]) -> removeViewImmediate
    void updateViewLayout(java.lang.Object[]) -> updateViewLayout
io.flutter.plugin.platform.VirtualDisplayController -> io.flutter.plugin.platform.VirtualDisplayController:
    android.content.Context context -> context
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> accessibilityEventsDelegate
    int densityDpi -> densityDpi
    io.flutter.view.TextureRegistry$SurfaceTextureEntry textureEntry -> textureEntry
    android.view.View$OnFocusChangeListener focusChangeListener -> focusChangeListener
    android.hardware.display.VirtualDisplay virtualDisplay -> virtualDisplay
    io.flutter.plugin.platform.SingleViewPresentation presentation -> presentation
    android.view.Surface surface -> surface
    io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> create
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformViewFactory,android.view.Surface,io.flutter.view.TextureRegistry$SurfaceTextureEntry,android.view.View$OnFocusChangeListener,int,java.lang.Object) -> <init>
    void resize(int,int,java.lang.Runnable) -> resize
    void dispose() -> dispose
    void onFlutterViewAttached(android.view.View) -> onFlutterViewAttached
    void onFlutterViewDetached() -> onFlutterViewDetached
    void onInputConnectionLocked() -> onInputConnectionLocked
    void onInputConnectionUnlocked() -> onInputConnectionUnlocked
    android.view.View getView() -> getView
    void dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
io.flutter.plugin.platform.VirtualDisplayController$1 -> io.flutter.plugin.platform.VirtualDisplayController$1:
    android.view.View val$embeddedView -> val$embeddedView
    java.lang.Runnable val$onNewSizeFrameAvailable -> val$onNewSizeFrameAvailable
    io.flutter.plugin.platform.VirtualDisplayController this$0 -> this$0
    void <init>(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable) -> <init>
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
io.flutter.plugin.platform.VirtualDisplayController$1$1 -> io.flutter.plugin.platform.VirtualDisplayController$1$1:
    io.flutter.plugin.platform.VirtualDisplayController$1 this$1 -> this$1
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$1) -> <init>
    void run() -> run
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener -> io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener:
    android.view.View mView -> mView
    java.lang.Runnable mOnDrawRunnable -> mOnDrawRunnable
    void schedule(android.view.View,java.lang.Runnable) -> schedule
    void <init>(android.view.View,java.lang.Runnable) -> <init>
    void onDraw() -> onDraw
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1 -> io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1:
    io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0 -> this$0
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener) -> <init>
    void run() -> run
io.flutter.plugins.GeneratedPluginRegistrant -> io.flutter.plugins.GeneratedPluginRegistrant:
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> registerWith
    boolean alreadyRegisteredWith(io.flutter.plugin.common.PluginRegistry) -> alreadyRegisteredWith
io.flutter.util.PathUtils -> io.flutter.util.PathUtils:
    void <init>() -> <init>
    java.lang.String getFilesDir(android.content.Context) -> getFilesDir
    java.lang.String getDataDirectory(android.content.Context) -> getDataDirectory
    java.lang.String getCacheDirectory(android.content.Context) -> getCacheDirectory
io.flutter.util.Preconditions -> io.flutter.util.Preconditions:
    void <init>() -> <init>
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    void checkState(boolean) -> checkState
    void checkState(boolean,java.lang.Object) -> checkState
io.flutter.util.Predicate -> io.flutter.util.Predicate:
    boolean test(java.lang.Object) -> test
io.flutter.util.ViewUtils -> io.flutter.util.ViewUtils:
    void <init>() -> <init>
    android.app.Activity getActivity(android.content.Context) -> getActivity
    int generateViewId(int) -> generateViewId
io.flutter.view.AccessibilityBridge -> io.flutter.view.AccessibilityBridge:
    java.lang.String TAG -> TAG
    int ACTION_SHOW_ON_SCREEN -> ACTION_SHOW_ON_SCREEN
    float SCROLL_EXTENT_FOR_INFINITY -> SCROLL_EXTENT_FOR_INFINITY
    float SCROLL_POSITION_CAP_FOR_INFINITY -> SCROLL_POSITION_CAP_FOR_INFINITY
    int ROOT_NODE_ID -> ROOT_NODE_ID
    int MIN_ENGINE_GENERATED_NODE_ID -> MIN_ENGINE_GENERATED_NODE_ID
    int FIRST_RESOURCE_ID -> FIRST_RESOURCE_ID
    android.view.View rootAccessibilityView -> rootAccessibilityView
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> accessibilityChannel
    android.view.accessibility.AccessibilityManager accessibilityManager -> accessibilityManager
    io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder -> accessibilityViewEmbedder
    io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate -> platformViewsAccessibilityDelegate
    android.content.ContentResolver contentResolver -> contentResolver
    java.util.Map flutterSemanticsTree -> flutterSemanticsTree
    java.util.Map customAccessibilityActions -> customAccessibilityActions
    io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode -> accessibilityFocusedSemanticsNode
    java.lang.Integer embeddedAccessibilityFocusedNodeId -> embeddedAccessibilityFocusedNodeId
    java.lang.Integer embeddedInputFocusedNodeId -> embeddedInputFocusedNodeId
    int accessibilityFeatureFlags -> accessibilityFeatureFlags
    io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode -> inputFocusedSemanticsNode
    io.flutter.view.AccessibilityBridge$SemanticsNode lastInputFocusedSemanticsNode -> lastInputFocusedSemanticsNode
    io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject -> hoveredObject
    java.util.List flutterNavigationStack -> flutterNavigationStack
    int previousRouteId -> previousRouteId
    java.lang.Integer lastLeftFrameInset -> lastLeftFrameInset
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> onAccessibilityChangeListener
    boolean isReleased -> isReleased
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler -> accessibilityMessageHandler
    android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener -> accessibilityStateChangeListener
    android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener -> touchExplorationStateChangeListener
    android.database.ContentObserver animationScaleObserver -> animationScaleObserver
    int getHoveredObjectId() -> getHoveredObjectId
    void <init>(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate) -> <init>
    void <init>(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.view.AccessibilityViewEmbedder,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate) -> <init>
    void release() -> release
    boolean isAccessibilityEnabled() -> isAccessibilityEnabled
    boolean isTouchExplorationEnabled() -> isTouchExplorationEnabled
    void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener) -> setOnAccessibilityChangeListener
    void sendLatestAccessibilityFlagsToFlutter() -> sendLatestAccessibilityFlagsToFlutter
    boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode) -> shouldSetCollectionInfo
    android.view.accessibility.AccessibilityNodeInfo obtainAccessibilityNodeInfo(android.view.View,int) -> obtainAccessibilityNodeInfo
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    android.graphics.Rect getBoundsInScreen(android.graphics.Rect) -> getBoundsInScreen
    boolean performAction(int,int,android.os.Bundle) -> performAction
    boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean) -> performCursorMoveAction
    void predictCursorMovement(io.flutter.view.AccessibilityBridge$SemanticsNode,int,boolean,boolean) -> predictCursorMovement
    boolean performSetText(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle) -> performSetText
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
    io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode() -> getRootSemanticsNode
    io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int) -> getOrCreateSemanticsNode
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int) -> getOrCreateAccessibilityAction
    boolean onAccessibilityHoverEvent(android.view.MotionEvent) -> onAccessibilityHoverEvent
    void onTouchExplorationExit() -> onTouchExplorationExit
    void handleTouchExploration(float,float) -> handleTouchExploration
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[]) -> updateSemantics
    android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String) -> createTextChangedEvent
    void sendAccessibilityEvent(int,int) -> sendAccessibilityEvent
    void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEvent
    void onWindowNameChange(io.flutter.view.AccessibilityBridge$SemanticsNode) -> onWindowNameChange
    void setAccessibilityPaneTitle(java.lang.String) -> setAccessibilityPaneTitle
    void sendWindowContentChangeEvent(int) -> sendWindowContentChangeEvent
    android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int) -> obtainAccessibilityEvent
    boolean doesLayoutInDisplayCutoutModeRequireLeftInset() -> doesLayoutInDisplayCutoutModeRequireLeftInset
    void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode) -> willRemoveSemanticsNode
    void reset() -> reset
    boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> externalViewRequestSendAccessibilityEvent
    boolean lambda$shouldSetCollectionInfo$1(io.flutter.view.AccessibilityBridge$SemanticsNode) -> lambda$shouldSetCollectionInfo$1
    boolean lambda$shouldSetCollectionInfo$0(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> lambda$shouldSetCollectionInfo$0
    android.view.View access$100(io.flutter.view.AccessibilityBridge) -> access$100
    void access$200(io.flutter.view.AccessibilityBridge,int,int) -> access$200
    android.view.accessibility.AccessibilityEvent access$300(io.flutter.view.AccessibilityBridge,int,int) -> access$300
    void access$400(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent) -> access$400
    boolean access$500(io.flutter.view.AccessibilityBridge) -> access$500
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$600(io.flutter.view.AccessibilityBridge) -> access$600
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$700(io.flutter.view.AccessibilityBridge) -> access$700
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$800(io.flutter.view.AccessibilityBridge) -> access$800
    android.view.accessibility.AccessibilityManager access$900(io.flutter.view.AccessibilityBridge) -> access$900
    android.content.ContentResolver access$1000(io.flutter.view.AccessibilityBridge) -> access$1000
    int access$1100(io.flutter.view.AccessibilityBridge) -> access$1100
    int access$1102(io.flutter.view.AccessibilityBridge,int) -> access$1102
    void access$1200(io.flutter.view.AccessibilityBridge) -> access$1200
    void access$1300(io.flutter.view.AccessibilityBridge) -> access$1300
    io.flutter.view.AccessibilityBridge$SemanticsNode access$6500(io.flutter.view.AccessibilityBridge,int) -> access$6500
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$6600(io.flutter.view.AccessibilityBridge,int) -> access$6600
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$1 -> io.flutter.view.AccessibilityBridge$1:
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void announce(java.lang.String) -> announce
    void onTap(int) -> onTap
    void onLongPress(int) -> onLongPress
    void onTooltip(java.lang.String) -> onTooltip
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[]) -> updateSemantics
io.flutter.view.AccessibilityBridge$2 -> io.flutter.view.AccessibilityBridge$2:
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
io.flutter.view.AccessibilityBridge$3 -> io.flutter.view.AccessibilityBridge$3:
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
    void onChange(boolean,android.net.Uri) -> onChange
io.flutter.view.AccessibilityBridge$4 -> io.flutter.view.AccessibilityBridge$4:
    android.view.accessibility.AccessibilityManager val$accessibilityManager -> val$accessibilityManager
    io.flutter.view.AccessibilityBridge this$0 -> this$0
    void <init>(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager) -> <init>
    void onTouchExplorationStateChanged(boolean) -> onTouchExplorationStateChanged
io.flutter.view.AccessibilityBridge$5 -> io.flutter.view.AccessibilityBridge$5:
    int[] $SwitchMap$io$flutter$view$AccessibilityBridge$StringAttributeType -> $SwitchMap$io$flutter$view$AccessibilityBridge$StringAttributeType
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$AccessibilityFeature -> io.flutter.view.AccessibilityBridge$AccessibilityFeature:
    io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION -> ACCESSIBLE_NAVIGATION
    io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS -> INVERT_COLORS
    io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS -> DISABLE_ANIMATIONS
    int value -> value
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values() -> values
    io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$Action -> io.flutter.view.AccessibilityBridge$Action:
    io.flutter.view.AccessibilityBridge$Action TAP -> TAP
    io.flutter.view.AccessibilityBridge$Action LONG_PRESS -> LONG_PRESS
    io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT -> SCROLL_LEFT
    io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT -> SCROLL_RIGHT
    io.flutter.view.AccessibilityBridge$Action SCROLL_UP -> SCROLL_UP
    io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN -> SCROLL_DOWN
    io.flutter.view.AccessibilityBridge$Action INCREASE -> INCREASE
    io.flutter.view.AccessibilityBridge$Action DECREASE -> DECREASE
    io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN -> SHOW_ON_SCREEN
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER -> MOVE_CURSOR_FORWARD_BY_CHARACTER
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER -> MOVE_CURSOR_BACKWARD_BY_CHARACTER
    io.flutter.view.AccessibilityBridge$Action SET_SELECTION -> SET_SELECTION
    io.flutter.view.AccessibilityBridge$Action COPY -> COPY
    io.flutter.view.AccessibilityBridge$Action CUT -> CUT
    io.flutter.view.AccessibilityBridge$Action PASTE -> PASTE
    io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS -> DID_GAIN_ACCESSIBILITY_FOCUS
    io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS -> DID_LOSE_ACCESSIBILITY_FOCUS
    io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION -> CUSTOM_ACTION
    io.flutter.view.AccessibilityBridge$Action DISMISS -> DISMISS
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD -> MOVE_CURSOR_FORWARD_BY_WORD
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD -> MOVE_CURSOR_BACKWARD_BY_WORD
    io.flutter.view.AccessibilityBridge$Action SET_TEXT -> SET_TEXT
    int value -> value
    io.flutter.view.AccessibilityBridge$Action[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$Action[] values() -> values
    io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction -> io.flutter.view.AccessibilityBridge$CustomAccessibilityAction:
    int resourceId -> resourceId
    int id -> id
    int overrideId -> overrideId
    java.lang.String label -> label
    java.lang.String hint -> hint
    void <init>() -> <init>
    java.lang.String access$2900(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$2900
    int access$3300(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$3300
    java.lang.String access$3400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$3400
    int access$4100(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$4100
    int access$4102(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> access$4102
    int access$3302(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> access$3302
    int access$4302(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> access$4302
    java.lang.String access$3402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> access$3402
    java.lang.String access$2902(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> access$2902
    int access$4300(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> access$4300
io.flutter.view.AccessibilityBridge$Flag -> io.flutter.view.AccessibilityBridge$Flag:
    io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE -> HAS_CHECKED_STATE
    io.flutter.view.AccessibilityBridge$Flag IS_CHECKED -> IS_CHECKED
    io.flutter.view.AccessibilityBridge$Flag IS_SELECTED -> IS_SELECTED
    io.flutter.view.AccessibilityBridge$Flag IS_BUTTON -> IS_BUTTON
    io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD -> IS_TEXT_FIELD
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED -> IS_FOCUSED
    io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE -> HAS_ENABLED_STATE
    io.flutter.view.AccessibilityBridge$Flag IS_ENABLED -> IS_ENABLED
    io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP -> IS_IN_MUTUALLY_EXCLUSIVE_GROUP
    io.flutter.view.AccessibilityBridge$Flag IS_HEADER -> IS_HEADER
    io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED -> IS_OBSCURED
    io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE -> SCOPES_ROUTE
    io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE -> NAMES_ROUTE
    io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN -> IS_HIDDEN
    io.flutter.view.AccessibilityBridge$Flag IS_IMAGE -> IS_IMAGE
    io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION -> IS_LIVE_REGION
    io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE -> HAS_TOGGLED_STATE
    io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED -> IS_TOGGLED
    io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING -> HAS_IMPLICIT_SCROLLING
    io.flutter.view.AccessibilityBridge$Flag IS_READ_ONLY -> IS_READ_ONLY
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSABLE -> IS_FOCUSABLE
    io.flutter.view.AccessibilityBridge$Flag IS_LINK -> IS_LINK
    io.flutter.view.AccessibilityBridge$Flag IS_SLIDER -> IS_SLIDER
    io.flutter.view.AccessibilityBridge$Flag IS_KEYBOARD_KEY -> IS_KEYBOARD_KEY
    int value -> value
    io.flutter.view.AccessibilityBridge$Flag[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$Flag[] values() -> values
    io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$LocaleStringAttribute -> io.flutter.view.AccessibilityBridge$LocaleStringAttribute:
    java.lang.String locale -> locale
    void <init>() -> <init>
    void <init>(io.flutter.view.AccessibilityBridge$1) -> <init>
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener -> io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener:
    void onAccessibilityChanged(boolean,boolean) -> onAccessibilityChanged
io.flutter.view.AccessibilityBridge$SemanticsNode -> io.flutter.view.AccessibilityBridge$SemanticsNode:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> accessibilityBridge
    int id -> id
    int flags -> flags
    int actions -> actions
    int maxValueLength -> maxValueLength
    int currentValueLength -> currentValueLength
    int textSelectionBase -> textSelectionBase
    int textSelectionExtent -> textSelectionExtent
    int platformViewId -> platformViewId
    int scrollChildren -> scrollChildren
    int scrollIndex -> scrollIndex
    float scrollPosition -> scrollPosition
    float scrollExtentMax -> scrollExtentMax
    float scrollExtentMin -> scrollExtentMin
    java.lang.String label -> label
    java.util.List labelAttributes -> labelAttributes
    java.lang.String value -> value
    java.util.List valueAttributes -> valueAttributes
    java.lang.String increasedValue -> increasedValue
    java.util.List increasedValueAttributes -> increasedValueAttributes
    java.lang.String decreasedValue -> decreasedValue
    java.util.List decreasedValueAttributes -> decreasedValueAttributes
    java.lang.String hint -> hint
    java.util.List hintAttributes -> hintAttributes
    int previousNodeId -> previousNodeId
    io.flutter.view.AccessibilityBridge$TextDirection textDirection -> textDirection
    boolean hadPreviousConfig -> hadPreviousConfig
    int previousFlags -> previousFlags
    int previousActions -> previousActions
    int previousTextSelectionBase -> previousTextSelectionBase
    int previousTextSelectionExtent -> previousTextSelectionExtent
    float previousScrollPosition -> previousScrollPosition
    float previousScrollExtentMax -> previousScrollExtentMax
    float previousScrollExtentMin -> previousScrollExtentMin
    java.lang.String previousValue -> previousValue
    java.lang.String previousLabel -> previousLabel
    float left -> left
    float top -> top
    float right -> right
    float bottom -> bottom
    float[] transform -> transform
    io.flutter.view.AccessibilityBridge$SemanticsNode parent -> parent
    java.util.List childrenInTraversalOrder -> childrenInTraversalOrder
    java.util.List childrenInHitTestOrder -> childrenInHitTestOrder
    java.util.List customAccessibilityActions -> customAccessibilityActions
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride -> onTapOverride
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride -> onLongPressOverride
    boolean inverseTransformDirty -> inverseTransformDirty
    float[] inverseTransform -> inverseTransform
    boolean globalGeometryDirty -> globalGeometryDirty
    float[] globalTransform -> globalTransform
    android.graphics.Rect globalRect -> globalRect
    boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> nullableHasAncestor
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate) -> getAncestor
    boolean hasAction(io.flutter.view.AccessibilityBridge$Action) -> hasAction
    boolean hadAction(io.flutter.view.AccessibilityBridge$Action) -> hadAction
    boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag) -> hasFlag
    boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag) -> hadFlag
    boolean didScroll() -> didScroll
    boolean didChangeLabel() -> didChangeLabel
    void log(java.lang.String,boolean) -> log
    void updateWith(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[]) -> updateWith
    java.util.List getStringAttributesFromBuffer(java.nio.ByteBuffer,java.nio.ByteBuffer[]) -> getStringAttributesFromBuffer
    void ensureInverseTransform() -> ensureInverseTransform
    android.graphics.Rect getGlobalRect() -> getGlobalRect
    io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[]) -> hitTest
    boolean isFocusable() -> isFocusable
    void collectRoutes(java.util.List) -> collectRoutes
    java.lang.String getRouteName() -> getRouteName
    void updateRecursively(float[],java.util.Set,boolean) -> updateRecursively
    void transformPoint(float[],float[],float[]) -> transformPoint
    float min(float,float,float,float) -> min
    float max(float,float,float,float) -> max
    java.lang.CharSequence getValueLabelHint() -> getValueLabelHint
    android.text.SpannableString createSpannableString(java.lang.String,java.util.List) -> createSpannableString
    int access$000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$000
    int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1400
    boolean access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> access$1500
    int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1600
    android.graphics.Rect access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1700
    boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$1800
    boolean access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> access$1900
    int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2000
    int access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2100
    boolean access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> access$2200
    int access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2300
    java.lang.String access$2400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2400
    int access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2500
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2600
    int access$2700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2700
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2800
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3000
    java.lang.CharSequence access$3100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3100
    java.util.List access$3200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3200
    java.util.List access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3500
    java.lang.String access$2402(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String) -> access$2402
    java.lang.String access$3600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3600
    java.util.List access$3702(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List) -> access$3702
    java.util.List access$3800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3800
    java.lang.String access$3900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$3900
    java.util.List access$4000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4000
    int access$2002(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> access$2002
    int access$2102(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> access$2102
    int access$002(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> access$002
    io.flutter.view.AccessibilityBridge$SemanticsNode access$4200(io.flutter.view.AccessibilityBridge$SemanticsNode,float[]) -> access$4200
    void access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[]) -> access$4400
    boolean access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$4500
    boolean access$4602(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> access$4602
    boolean access$4702(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> access$4702
    void access$4800(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean) -> access$4800
    void access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List) -> access$4900
    boolean access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5000
    float access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5100
    float access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5200
    float access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5300
    boolean access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> access$5400
    int access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5500
    java.util.List access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5600
    boolean access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5700
    boolean access$5800(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> access$5800
    java.lang.String access$5900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$5900
    java.lang.String access$6000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$6000
    int access$6100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$6100
    int access$6200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$6200
    java.lang.String access$6300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$6300
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2602(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> access$2602
io.flutter.view.AccessibilityBridge$SpellOutStringAttribute -> io.flutter.view.AccessibilityBridge$SpellOutStringAttribute:
    void <init>() -> <init>
    void <init>(io.flutter.view.AccessibilityBridge$1) -> <init>
io.flutter.view.AccessibilityBridge$StringAttribute -> io.flutter.view.AccessibilityBridge$StringAttribute:
    int start -> start
    int end -> end
    io.flutter.view.AccessibilityBridge$StringAttributeType type -> type
    void <init>() -> <init>
    void <init>(io.flutter.view.AccessibilityBridge$1) -> <init>
io.flutter.view.AccessibilityBridge$StringAttributeType -> io.flutter.view.AccessibilityBridge$StringAttributeType:
    io.flutter.view.AccessibilityBridge$StringAttributeType SPELLOUT -> SPELLOUT
    io.flutter.view.AccessibilityBridge$StringAttributeType LOCALE -> LOCALE
    io.flutter.view.AccessibilityBridge$StringAttributeType[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$StringAttributeType[] values() -> values
    io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$TextDirection -> io.flutter.view.AccessibilityBridge$TextDirection:
    io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN -> UNKNOWN
    io.flutter.view.AccessibilityBridge$TextDirection LTR -> LTR
    io.flutter.view.AccessibilityBridge$TextDirection RTL -> RTL
    io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES -> $VALUES
    io.flutter.view.AccessibilityBridge$TextDirection[] values() -> values
    io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    io.flutter.view.AccessibilityBridge$TextDirection fromInt(int) -> fromInt
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityViewEmbedder -> io.flutter.view.AccessibilityViewEmbedder:
    java.lang.String TAG -> TAG
    io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors -> reflectionAccessors
    android.view.View rootAccessibilityView -> rootAccessibilityView
    android.util.SparseArray flutterIdToOrigin -> flutterIdToOrigin
    java.util.Map originToFlutterId -> originToFlutterId
    java.util.Map embeddedViewToDisplayBounds -> embeddedViewToDisplayBounds
    int nextFlutterId -> nextFlutterId
    void <init>(android.view.View,int) -> <init>
    android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect) -> getRootNode
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View) -> convertToFlutterNode
    void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodeParent
    void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> addChildrenToFlutterNode
    void cacheVirtualIdMappings(android.view.View,int,int) -> cacheVirtualIdMappings
    void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodesTranslateBounds
    void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo) -> copyAccessibilityFields
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord) -> getRecordFlutterId
    boolean onAccessibilityHoverEvent(int,android.view.MotionEvent) -> onAccessibilityHoverEvent
    android.view.View platformViewOfNode(int) -> platformViewOfNode
io.flutter.view.AccessibilityViewEmbedder$1 -> io.flutter.view.AccessibilityViewEmbedder$1:
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors -> io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors:
    java.lang.reflect.Method getSourceNodeId -> getSourceNodeId
    java.lang.reflect.Method getParentNodeId -> getParentNodeId
    java.lang.reflect.Method getRecordSourceNodeId -> getRecordSourceNodeId
    java.lang.reflect.Method getChildId -> getChildId
    java.lang.reflect.Field childNodeIdsField -> childNodeIdsField
    java.lang.reflect.Method longArrayGetIndex -> longArrayGetIndex
    void <init>() -> <init>
    int getVirtualNodeId(long) -> getVirtualNodeId
    java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo) -> getSourceNodeId
    java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int) -> getChildId
    java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo) -> getParentNodeId
    java.lang.Long yoinkParentIdFromParcel(android.view.accessibility.AccessibilityNodeInfo) -> yoinkParentIdFromParcel
    boolean isBitSet(long,int) -> isBitSet
    java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord) -> getRecordSourceNodeId
    void <init>(io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
    java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> access$100
    int access$200(long) -> access$200
    java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> access$300
    java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int) -> access$500
    java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord) -> access$600
io.flutter.view.AccessibilityViewEmbedder$ViewAndId -> io.flutter.view.AccessibilityViewEmbedder$ViewAndId:
    android.view.View view -> view
    int id -> id
    void <init>(android.view.View,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
io.flutter.view.FlutterCallbackInformation -> io.flutter.view.FlutterCallbackInformation:
    java.lang.String callbackName -> callbackName
    java.lang.String callbackClassName -> callbackClassName
    java.lang.String callbackLibraryPath -> callbackLibraryPath
    io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long) -> lookupCallbackInformation
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
io.flutter.view.FlutterMain -> io.flutter.view.FlutterMain:
    void <init>() -> <init>
    void startInitialization(android.content.Context) -> startInitialization
    void startInitialization(android.content.Context,io.flutter.view.FlutterMain$Settings) -> startInitialization
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> ensureInitializationComplete
    void ensureInitializationCompleteAsync(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable) -> ensureInitializationCompleteAsync
    java.lang.String findAppBundlePath() -> findAppBundlePath
    java.lang.String findAppBundlePath(android.content.Context) -> findAppBundlePath
    java.lang.String getLookupKeyForAsset(java.lang.String) -> getLookupKeyForAsset
    java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String) -> getLookupKeyForAsset
io.flutter.view.FlutterMain$Settings -> io.flutter.view.FlutterMain$Settings:
    java.lang.String logTag -> logTag
    void <init>() -> <init>
    java.lang.String getLogTag() -> getLogTag
    void setLogTag(java.lang.String) -> setLogTag
io.flutter.view.FlutterNativeView -> io.flutter.view.FlutterNativeView:
    java.lang.String TAG -> TAG
    io.flutter.app.FlutterPluginRegistry mPluginRegistry -> mPluginRegistry
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> dartExecutor
    io.flutter.view.FlutterView mFlutterView -> mFlutterView
    io.flutter.embedding.engine.FlutterJNI mFlutterJNI -> mFlutterJNI
    android.content.Context mContext -> mContext
    boolean applicationIsRunning -> applicationIsRunning
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> flutterUiDisplayListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void detachFromFlutterView() -> detachFromFlutterView
    void destroy() -> destroy
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity) -> attachViewAndActivity
    boolean isAttached() -> isAttached
    void assertAttached() -> assertAttached
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> runFromBundle
    boolean isApplicationRunning() -> isApplicationRunning
    java.lang.String getObservatoryUri() -> getObservatoryUri
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    io.flutter.embedding.engine.FlutterJNI getFlutterJNI() -> getFlutterJNI
    void attach(io.flutter.view.FlutterNativeView,boolean) -> attach
    io.flutter.view.FlutterView access$000(io.flutter.view.FlutterNativeView) -> access$000
    io.flutter.app.FlutterPluginRegistry access$200(io.flutter.view.FlutterNativeView) -> access$200
io.flutter.view.FlutterNativeView$1 -> io.flutter.view.FlutterNativeView$1:
    io.flutter.view.FlutterNativeView this$0 -> this$0
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onFlutterUiDisplayed() -> onFlutterUiDisplayed
    void onFlutterUiNoLongerDisplayed() -> onFlutterUiNoLongerDisplayed
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl -> io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl:
    io.flutter.view.FlutterNativeView this$0 -> this$0
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onPreEngineRestart() -> onPreEngineRestart
    void onEngineWillDestroy() -> onEngineWillDestroy
    void <init>(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1) -> <init>
io.flutter.view.FlutterRunArguments -> io.flutter.view.FlutterRunArguments:
    java.lang.String bundlePath -> bundlePath
    java.lang.String entrypoint -> entrypoint
    java.lang.String libraryPath -> libraryPath
    void <init>() -> <init>
io.flutter.view.FlutterView -> io.flutter.view.FlutterView:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> dartExecutor
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> flutterRenderer
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> navigationChannel
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> keyEventChannel
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> lifecycleChannel
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> localizationChannel
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> platformChannel
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> settingsChannel
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> systemChannel
    android.view.inputmethod.InputMethodManager mImm -> mImm
    io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin -> mTextInputPlugin
    io.flutter.plugin.localization.LocalizationPlugin mLocalizationPlugin -> mLocalizationPlugin
    io.flutter.plugin.mouse.MouseCursorPlugin mMouseCursorPlugin -> mMouseCursorPlugin
    io.flutter.embedding.android.KeyboardManager mKeyboardManager -> mKeyboardManager
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> androidTouchProcessor
    io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider -> mAccessibilityNodeProvider
    android.view.SurfaceHolder$Callback mSurfaceCallback -> mSurfaceCallback
    io.flutter.view.FlutterView$ViewportMetrics mMetrics -> mMetrics
    java.util.List mActivityLifecycleListeners -> mActivityLifecycleListeners
    java.util.List mFirstFrameListeners -> mFirstFrameListeners
    java.util.concurrent.atomic.AtomicLong nextTextureId -> nextTextureId
    io.flutter.view.FlutterNativeView mNativeView -> mNativeView
    boolean mIsSoftwareRenderingEnabled -> mIsSoftwareRenderingEnabled
    boolean didRenderFirstFrame -> didRenderFirstFrame
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> onAccessibilityChangeListener
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView) -> <init>
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    io.flutter.view.FlutterNativeView getFlutterNativeView() -> getFlutterNativeView
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    java.lang.String getLookupKeyForAsset(java.lang.String) -> getLookupKeyForAsset
    java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String) -> getLookupKeyForAsset
    void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener) -> addActivityLifecycleListener
    void onStart() -> onStart
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onStop() -> onStop
    void onMemoryPressure() -> onMemoryPressure
    boolean hasRenderedFirstFrame() -> hasRenderedFirstFrame
    void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> addFirstFrameListener
    void removeFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> removeFirstFrameListener
    void enableTransparentBackground() -> enableTransparentBackground
    void disableTransparentBackground() -> disableTransparentBackground
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void pushRoute(java.lang.String) -> pushRoute
    void popRoute() -> popRoute
    void sendUserPlatformSettingsToDart() -> sendUserPlatformSettingsToDart
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    float getDevicePixelRatio() -> getDevicePixelRatio
    io.flutter.view.FlutterNativeView detach() -> detach
    void destroy() -> destroy
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean checkInputConnectionProxy(android.view.View) -> checkInputConnectionProxy
    void onProvideAutofillVirtualStructure(android.view.ViewStructure,int) -> onProvideAutofillVirtualStructure
    void autofill(android.util.SparseArray) -> autofill
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides() -> calculateShouldZeroSides
    int guessBottomKeyboardInset(android.view.WindowInsets) -> guessBottomKeyboardInset
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    boolean isAttached() -> isAttached
    void assertAttached() -> assertAttached
    void preRun() -> preRun
    void resetAccessibilityTree() -> resetAccessibilityTree
    void postRun() -> postRun
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> runFromBundle
    android.graphics.Bitmap getBitmap() -> getBitmap
    void updateViewportMetrics() -> updateViewportMetrics
    void onFirstFrame() -> onFirstFrame
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void resetWillNotDraw(boolean,boolean) -> resetWillNotDraw
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    void releaseAccessibilityNodeProvider() -> releaseAccessibilityNodeProvider
    android.view.PointerIcon getSystemPointerIcon(int) -> getSystemPointerIcon
    void send(java.lang.String,java.nio.ByteBuffer) -> send
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> send
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> setMessageHandler
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> createSurfaceTexture
    void access$000(io.flutter.view.FlutterView,boolean,boolean) -> access$000
    io.flutter.view.FlutterNativeView access$100(io.flutter.view.FlutterView) -> access$100
io.flutter.view.FlutterView$1 -> io.flutter.view.FlutterView$1:
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView) -> <init>
    void onAccessibilityChanged(boolean,boolean) -> onAccessibilityChanged
io.flutter.view.FlutterView$2 -> io.flutter.view.FlutterView$2:
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.view.FlutterView$3 -> io.flutter.view.FlutterView$3:
    io.flutter.plugin.platform.PlatformPlugin val$platformPlugin -> val$platformPlugin
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView,io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void onPostResume() -> onPostResume
io.flutter.view.FlutterView$FirstFrameListener -> io.flutter.view.FlutterView$FirstFrameListener:
    void onFirstFrame() -> onFirstFrame
io.flutter.view.FlutterView$Provider -> io.flutter.view.FlutterView$Provider:
    io.flutter.view.FlutterView getFlutterView() -> getFlutterView
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry -> io.flutter.view.FlutterView$SurfaceTextureRegistryEntry:
    long id -> id
    io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper -> textureWrapper
    boolean released -> released
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> onFrameListener
    io.flutter.view.FlutterView this$0 -> this$0
    void <init>(io.flutter.view.FlutterView,long,android.graphics.SurfaceTexture) -> <init>
    io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper() -> textureWrapper
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    long id() -> id
    void release() -> release
    boolean access$200(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> access$200
    long access$300(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> access$300
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1 -> io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1:
    io.flutter.view.FlutterView$SurfaceTextureRegistryEntry this$1 -> this$1
    void <init>(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.view.FlutterView$ViewportMetrics -> io.flutter.view.FlutterView$ViewportMetrics:
    float devicePixelRatio -> devicePixelRatio
    int physicalWidth -> physicalWidth
    int physicalHeight -> physicalHeight
    int physicalViewPaddingTop -> physicalViewPaddingTop
    int physicalViewPaddingRight -> physicalViewPaddingRight
    int physicalViewPaddingBottom -> physicalViewPaddingBottom
    int physicalViewPaddingLeft -> physicalViewPaddingLeft
    int physicalViewInsetTop -> physicalViewInsetTop
    int physicalViewInsetRight -> physicalViewInsetRight
    int physicalViewInsetBottom -> physicalViewInsetBottom
    int physicalViewInsetLeft -> physicalViewInsetLeft
    int systemGestureInsetTop -> systemGestureInsetTop
    int systemGestureInsetRight -> systemGestureInsetRight
    int systemGestureInsetBottom -> systemGestureInsetBottom
    int systemGestureInsetLeft -> systemGestureInsetLeft
    int physicalTouchSlop -> physicalTouchSlop
    void <init>() -> <init>
io.flutter.view.FlutterView$ZeroSides -> io.flutter.view.FlutterView$ZeroSides:
    io.flutter.view.FlutterView$ZeroSides NONE -> NONE
    io.flutter.view.FlutterView$ZeroSides LEFT -> LEFT
    io.flutter.view.FlutterView$ZeroSides RIGHT -> RIGHT
    io.flutter.view.FlutterView$ZeroSides BOTH -> BOTH
    io.flutter.view.FlutterView$ZeroSides[] $VALUES -> $VALUES
    io.flutter.view.FlutterView$ZeroSides[] values() -> values
    io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.TextureRegistry -> io.flutter.view.TextureRegistry:
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> createSurfaceTexture
io.flutter.view.TextureRegistry$SurfaceTextureEntry -> io.flutter.view.TextureRegistry$SurfaceTextureEntry:
    android.graphics.SurfaceTexture surfaceTexture() -> surfaceTexture
    long id() -> id
    void release() -> release
io.flutter.view.VsyncWaiter -> io.flutter.view.VsyncWaiter:
    io.flutter.view.VsyncWaiter instance -> instance
    android.view.WindowManager windowManager -> windowManager
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> asyncWaitForVsyncDelegate
    io.flutter.view.VsyncWaiter getInstance(android.view.WindowManager) -> getInstance
    void <init>(android.view.WindowManager) -> <init>
    void init() -> init
    android.view.WindowManager access$000(io.flutter.view.VsyncWaiter) -> access$000
io.flutter.view.VsyncWaiter$1 -> io.flutter.view.VsyncWaiter$1:
    io.flutter.view.VsyncWaiter this$0 -> this$0
    void <init>(io.flutter.view.VsyncWaiter) -> <init>
    void asyncWaitForVsync(long) -> asyncWaitForVsync
io.flutter.view.VsyncWaiter$1$1 -> io.flutter.view.VsyncWaiter$1$1:
    long val$cookie -> val$cookie
    io.flutter.view.VsyncWaiter$1 this$1 -> this$1
    void <init>(io.flutter.view.VsyncWaiter$1,long) -> <init>
    void doFrame(long) -> doFrame
uk.co.thenetninja.world_time_app.MainActivity -> uk.co.thenetninja.world_time_app.MainActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
